{"version":3,"file":"localBadiDate.min.js","sources":["../src/locale/en.js","../src/badiLocale.js","../src/badiYears.js","../src/badiDate.js","../src/clockLocations.js","../src/localBadiDate.js"],"sourcesContent":["const month = {\n  1: 'Bahá',\n  2: 'Jalál',\n  3: 'Jamál',\n  4: '‘Aẓamat',\n  5: 'Núr',\n  6: 'Raḥmat',\n  7: 'Kalimát',\n  8: 'Kamál',\n  9: 'Asmá’',\n  10: '‘Izzat',\n  11: 'Ma<u>sh</u>íyyat',\n  12: '‘Ilm',\n  13: 'Qudrat',\n  14: 'Qawl',\n  15: 'Masá’il',\n  16: '<u>Sh</u>araf',\n  17: 'Sulṭán',\n  18: 'Mulk',\n  19: '‘Alá’',\n  20: 'Ayyám-i-Há'\n};\n\nconst monthL = {\n  1: 'Splendour',\n  2: 'Glory',\n  3: 'Beauty',\n  4: 'Grandeur',\n  5: 'Light',\n  6: 'Mercy',\n  7: 'Words',\n  8: 'Perfection',\n  9: 'Names',\n  10: 'Might',\n  11: 'Will',\n  12: 'Knowledge',\n  13: 'Power',\n  14: 'Speech',\n  15: 'Questions',\n  16: 'Honour',\n  17: 'Sovereignty',\n  18: 'Dominion',\n  19: 'Loftiness',\n  20: 'Ayyám-i-Há'\n};\n\nconst holyDay = {\n  1: 'Naw-Rúz',\n  2: 'First day of Riḍván',\n  3: 'Ninth day of Riḍván',\n  4: 'Twelfth day of Riḍván',\n  5: 'Declaration of the Báb',\n  6: 'Ascension of Bahá’u’lláh',\n  7: 'Martyrdom of the Báb',\n  8: 'Birth of the Báb',\n  9: 'Birth of Bahá’u’lláh',\n  10: 'Day of the Covenant',\n  11: 'Ascension of ‘Abdu’l-Bahá'\n};\n\n// CAREFUL: Numbering corresponds to Badí' week, i.e. 1 is Jalál (-> Saturday)\nconst weekday = {\n  1: 'Jalál',\n  2: 'Jamál',\n  3: 'Kamál',\n  4: 'Fiḍál',\n  5: '‘Idál',\n  6: 'Istijlál',\n  7: 'Istiqlál'\n};\n\nconst weekdayAbbr3 = {\n  1: 'Jal',\n  2: 'Jam',\n  3: 'Kam',\n  4: 'Fiḍ',\n  5: '‘Idá',\n  6: 'Isj',\n  7: 'Isq'\n};\n\nconst weekdayAbbr2 = {\n  1: 'Jl',\n  2: 'Jm',\n  3: 'Ka',\n  4: 'Fi',\n  5: '‘Id',\n  6: 'Ij',\n  7: 'Iq'\n};\n\nconst weekdayL = {\n  1: 'Glory',\n  2: 'Beauty',\n  3: 'Perfection',\n  4: 'Grace',\n  5: 'Justice',\n  6: 'Majesty',\n  7: 'Independence'\n};\n\nconst yearInVahid = {\n  1: 'Alif',\n  2: 'Bá’',\n  3: 'Ab',\n  4: 'Dál',\n  5: 'Báb',\n  6: 'Váv',\n  7: 'Abad',\n  8: 'Jád',\n  9: 'Bahá',\n  10: 'Ḥubb',\n  11: 'Bahháj',\n  12: 'Javáb',\n  13: 'Aḥad',\n  14: 'Vahháb',\n  15: 'Vidád',\n  16: 'Badí‘',\n  17: 'Bahí',\n  18: 'Abhá',\n  19: 'Váḥid'\n};\n\nconst BE = 'BE';\nconst badiCalendar = 'Badí‘ Calendar';\n\nexport {month, monthL, holyDay, weekday, weekdayAbbr3, weekdayAbbr2, weekdayL,\n  yearInVahid, BE, badiCalendar};\n","/* eslint-disable dot-notation, line-comment-position, camelcase, sort-imports */\nimport * as en from './locale/en.js';\nimport * as ar from './locale/ar.js';\nimport * as de from './locale/de.js';\nimport * as es from './locale/es.js';\nimport * as fa from './locale/fa.js';\nimport * as fr from './locale/fr.js';\nimport * as lv from './locale/lv.js';\nimport * as nl from './locale/nl.js';\nimport * as pt from './locale/pt.js';\nimport * as ru from './locale/ru.js';\nimport * as sv from './locale/sv.js';\nimport * as zh from './locale/zh.js';\nimport * as en_us from './locale/en-us.js';\n\nconst badiLocale = {};\nbadiLocale['en'] = en;\nbadiLocale['ar'] = ar;\nbadiLocale['de'] = de;\nbadiLocale['es'] = es;\nbadiLocale['fa'] = fa;\nbadiLocale['fr'] = fr;\nbadiLocale['lv'] = lv;\nbadiLocale['nl'] = nl;\nbadiLocale['pt'] = pt;\nbadiLocale['ru'] = ru;\nbadiLocale['sv'] = sv;\nbadiLocale['zh'] = zh;\nbadiLocale['en-us'] = en_us;\n\n/**\n * Set default language for localization. If the language doesn't exist,\n * nothing is changed.\n * @param {string} language that should be set as default\n */\nconst setDefaultLanguage = function (language) {\n  if (typeof badiLocale[language] === 'undefined') {\n    // eslint-disable-next-line no-console\n    console.log('Chosen language does not exist. Setting has not been changed');\n  } else {\n    badiLocale['default'] = badiLocale[language];\n  }\n};\n\nexport {badiLocale, setDefaultLanguage};\n","const badiYears = [\n  'l4da', 'k4ci', 'k5c7', 'l4d6', 'l4ce', 'k4c4', 'k5d4', 'l4cb', 'l4c1',\n  'k4cj', 'k5c8', 'l4d7', 'l4cf', 'k4c5', 'k4d5', 'k5ce', 'l4c2', 'k4d2',\n  'k4ca', 'k5da', 'l4ch', 'k4c6', 'k4d6', 'k5cf', 'l4c4', 'k4d4', 'k4cc',\n  'k5c1', 'l4cj', 'k4c8', 'k4d8', 'k5cg', 'l4c5', 'k4d5', 'k4ce', 'k5c3',\n  'l4d2', 'k4ca', 'k4d9', 'k5ci', 'l4c6', 'k4d6', 'k4cf', 'k4c4', 'k5d4',\n  'k4cb', 'k4bj', 'k4cj', 'k5c9', 'k4d8', 'k4cg', 'k4c6', 'k5d6', 'k4cd',\n  'k4c2', 'k4d2', 'k5ca', 'k4d9', 'k4ci', 'k4c7', 'k5d7', 'k4cf', 'k4c4',\n  'k4d4', 'k5cc', 'k4bj', 'k4cj', 'k4c9', 'k5d9', 'k4cg', 'k4c6', 'k4d5',\n  'k5cd', 'k4c2', 'k4d1', 'k4ca', 'k4da', 'j5cj', 'k4c7', 'k4d7', 'k4cf',\n  'j5c4', 'k4d3', 'k4cb', 'k4c1', 'k5d1', 'l4c9', 'l4d9', 'l4ch', 'k5c6',\n  'l4d5', 'l4cd', 'l4c2', 'k5d2', 'l4ca', 'l4da', 'l4cj', 'k5c8', 'l4d7',\n  'l4cf', 'l4c4', 'k5d4', 'l4cb', 'l4c1', 'l4d1', 'k5c9', 'l4d8', 'l4cg',\n  'l4c5', 'k4d5', 'k5ce', 'l4c2', 'l4d2', 'k4cb', 'k5db', 'l4ci', 'l4c7',\n  'k4d7', 'k5cf', 'l4c4', 'l4d4', 'k4cc', 'k5c2', 'l4d1', 'l4c9', 'k4d9',\n  'k5ch', 'l4c5', 'l4d5', 'k4ce', 'k5c3', 'l4d2', 'l4cb', 'k4da', 'k5ci',\n  'l4c6', 'l4d6', 'k4cf', 'k5c5', 'l4d4', 'l4cc', 'k4c1', 'k4d1', 'k5c9',\n  'l4d8', 'k4cg', 'k4c6', 'k5d6', 'l4ce', 'k4c3', 'k4d3', 'k5cb', 'l4da',\n  'k4ci', 'k4c7', 'k5d7', 'l4cf', 'k4c5', 'k4d5', 'k5cd', 'l4c1', 'k4cj',\n  'k4c9', 'k5d9', 'l4cg', 'k4c6', 'k4d6', 'k5ce', 'l4c3', 'k4d2', 'k4ca',\n  'k5bj', 'l4ci', 'k4c7', 'k4d7', 'k4cg', 'k5c5', 'k4d4', 'k4cc', 'k4c1',\n  'k5d1', 'k4c9', 'k4d9', 'k4ch', 'k5c7', 'l4d6', 'l4ce', 'l4c3', 'l5d3',\n  'l4ca', 'l4da', 'l4cj', 'l5c8', 'l4d7', 'l4cg', 'l4c5', 'l5d4', 'l4cb',\n  'l4c1', 'l4d1', 'l5ca', 'l4d9', 'l4ch', 'l4c6', 'l5d6', 'l4cd', 'l4c2',\n  'l4d2', 'l4cb', 'k5c1', 'l4cj', 'l4c8', 'l4d8', 'k5cg', 'l4c4', 'l4d4',\n  'l4cc', 'k5c2', 'l4d1', 'l4ca', 'l4da', 'k5ci', 'l4c6', 'l4d5', 'l4ce',\n  'k5c3', 'l4d2', 'l4cb', 'l4db', 'k5cj', 'l4c8', 'l4d7', 'l4cf', 'k5c5',\n  'l4d4', 'l4cc', 'l4c2', 'k5d2', 'l4c9', 'l4d9', 'l4ch', 'k4c6', 'k5d6',\n  'l4ce', 'l4c3', 'k4d3', 'k5cc', 'l4db', 'l4cj', 'k4c8', 'k5d8', 'l4cf',\n  'l4c4', 'k4d5', 'k5cd', 'l4c2', 'l4d2', 'k4ca', 'k5d9', 'l4cg', 'l4c6',\n  'k4d6', 'k5cf', 'l4c3', 'l4d3', 'k4cb', 'k5bj', 'l4ci', 'l4c7', 'k4d7',\n  'k5cg', 'l4c5', 'l4d5', 'k4cd', 'k4c2', 'k5d2', 'l4c9', 'k4d9', 'k4ch',\n  'k5c7', 'l4d6', 'k4cf', 'k4c4', 'k5d4', 'l4cb', 'l4bj', 'l4cj', 'l5c8',\n  'm4d7', 'l4cg', 'l4c5', 'l5d5', 'm4cc', 'l4c1', 'l4d1', 'l5ca', 'm4d9',\n  'l4ch', 'l4c7', 'l5d7', 'm4ce', 'l4c3', 'l4d3', 'l5cb', 'm4bi', 'l4ci',\n  'l4c8', 'l4d8', 'l5ch', 'l4c5', 'l4d5', 'l4cd', 'l5c2', 'l4d1', 'l4c9',\n  'l4da', 'l5ci', 'l4c7', 'l4d7', 'l4cf', 'l5c4', 'l4d2', 'l4cb', 'l4bj',\n  'l5d1', 'l4c8', 'l4d8', 'l4cg', 'l5c5', 'l4d4', 'l4cc', 'l4c2', 'l5d2',\n  'l4c9', 'l4da', 'l4ci'];\n\nexport {badiYears};\n","import {badiLocale, setDefaultLanguage} from './badiLocale.js';\nimport {badiYears} from './badiYears.js';\n\n/**\n * A date in the Badí' calendar.\n */\nclass BadiDate {\n  /**\n   * Accepts a number of different sets of arguments for instantiation: JS Date\n   * object, moment object, ISO 8601 date string, Badí' date string in the\n   * format 'year-month-day' or 'year-holyDayNumber' and array in the format\n   * [year, month, day] or [year, holyDayNumber] where holyDayNumber is a number\n   * between 1 (Naw-Rúz) and 11 (Ascension of 'Abdu'l-Bahá).\n   * @param {(Date|moment|string|Array)} date input date\n   */\n  constructor(date) { // eslint-disable-line complexity\n    this._gregDate = 0;\n    this._badiYear = 0;\n    this._badiMonth = 0;\n    this._badiDate = 0;\n    this._nawRuz = 0;\n    this._ayyamiHaLength = 0;\n    this._yearTB = [];\n    this._holyDay = false;\n    this._valid = true;\n\n    if (date instanceof Date) {\n      this.gregDate = moment.utc(\n        [date.getFullYear(), date.getMonth(), date.getDate(), 12]);\n    } else if (date instanceof moment) {\n      this._gregDate = moment.utc([date.year(), date.month(), date.date(), 12]);\n    } else if (typeof date === 'string') {\n      const dateArray = this._parseBadiDateString(date);\n      if (dateArray) {\n        this._setFromBadiDate(dateArray);\n      // Looks like the input was a Gregorian datestring\n      } else {\n        // Attempt to handle a malformed string which moment complains about but\n        // Date makes a best guess at.\n        const tempDate = new Date(date);\n        this._gregDate = moment.utc([tempDate.getFullYear(),\n          tempDate.getMonth(), tempDate.getDate(), 12]);\n        // Check if it's before 1 BE or after 356 BE (which we can't handle)\n        if (this._notInValidGregRange(this._gregDate)) {\n          this._setInvalid();\n        }\n      }\n    } else if (date.constructor === Array) {\n      if (date.length !== 3 && date.length !== 2) {\n        this._setInvalid();\n      } else {\n        this._setFromBadiDate(date);\n      }\n    }\n    if (this._badiYear === 0) {\n      // We haven't set the Badí' date yet\n      this._setFromGregorianDate();\n    }\n    if (this._valid) {\n      this._setHolyDay();\n    }\n  }\n\n  /**\n   * Formats the output as defined by the given format string\n   * The following tokens are accepted:\n   * d - day of month without leading zeroes\n   * dd - day of month with leading zeroes\n   * D - day of month as 3-letter (+ apostrophes) abbreviation of translit.\n   * DD - full day of month transliteration\n   * DDL - full day of month translation\n   * DD+ - full day of month transliteration (translation)\n   * m, mm, M, MM, MML, MM+ - same as days\n   * ww - day of week, two letter abbreviation (Jl, Jm, Ka, Fi, 'Id, Ij, Iq)\n   * W - day of week, 3 letter abbreviation (Jal, Jam, Kam, Fiḍ, 'Idá, Isj, Isq)\n   * WW - day of week, full name\n   * WWL - day of week, full name translation\n   * yv - year in vahid without leading zeroes\n   * yyv - year in vahid with leading zeroes\n   * YV - year in vahid full transliteration\n   * v - vahid without leading zeroes\n   * vv - vahid with leading zeroes\n   * k - Kull-i-Shay without leading zeroes\n   * kk - Kull-i-Shay with leading zeroes\n   * y - year without leading zeroes\n   * yy - 3 digit year with leading zeroes\n   * Anything in between {} will be printed as is.\n   * @param {string} formatString gives the output format (see reference above)\n   * @param {string} language output language (subject to fallbacks)\n   * @returns {string} date formatted according to inputs\n   */\n  format(formatString, language) { // eslint-disable-line complexity\n    if (!this.isValid()) {\n      return 'Not a valid date';\n    }\n    const formatTokens = [\n      ['DDL', 'DD+', 'MML', 'MM+', 'WWL', 'yyv'],\n      ['dd', 'DD', 'mm', 'MM', 'ww', 'WW', 'yv', 'YV', 'vv', 'kk', 'yy', 'BE'],\n      ['d', 'D', 'm', 'M', 'W', 'v', 'k', 'y']];\n    if (typeof language === 'undefined' ||\n        typeof badiLocale[language] === 'undefined') {\n      // eslint-disable-next-line dot-notation\n      if (typeof badiLocale['default'] === 'undefined') {\n        language = 'en';\n      } else {\n        language = 'default';\n      }\n    }\n    if (typeof formatString === 'undefined') {\n      formatString = 'd MM+ y BE';\n    } else if (typeof formatString !== 'string') {\n      return 'Invalid formatting string.';\n    }\n    let returnString = '';\n    const length = formatString.length;\n    for (let i = 0; i < length; i++) {\n      // Text wrapped in {} is output as-is. A '{' without a matching '}'\n      // results in invalid input\n      if (formatString.charAt(i) === '{' && i < length - 1) {\n        for (let j = i + 1; j <= length; j++) {\n          if (j === length) {\n            return 'Invalid formatting string.';\n          }\n          if (formatString.charAt(j) === '}') {\n            i = j;\n            break;\n          }\n          returnString += formatString.charAt(j);\n        }\n      } else {\n        const next1 = formatString.charAt(i);\n        const next2 = next1 + formatString.charAt(i + 1);\n        const next3 = next2 + formatString.charAt(i + 2);\n        // First check for match to 3-symbol token, then 2, then 1\n        // (Tokens are not uniquely decodable)\n        if (formatTokens[0].indexOf(next3) > -1) {\n          returnString += this._getFormatItem(next3, language);\n          i += 2;\n        } else if (formatTokens[1].indexOf(next2) > -1) {\n          returnString += this._getFormatItem(next2, language);\n          i += 1;\n        } else if (formatTokens[2].indexOf(next1) > -1) {\n          returnString += this._getFormatItem(next1, language);\n        } else {\n          returnString += next1;\n        }\n      }\n    }\n    return returnString;\n  }\n\n  /**\n   * Retrieve the appropriate output for a given formatting token and language.\n   * @param {string} token identifying the date component for output\n   * @param {string} language output language\n   * @returns {string} localized output string in desired language (or fallback)\n   */\n  _getFormatItem(token, language) { // eslint-disable-line complexity\n    // ES6 is a bit funny with the scope of let in a switch\n    let day, month, monthL;\n    switch (token) {\n      // Single character tokens\n      case 'd':\n        return String(this._badiDay);\n      case 'D':\n        day = this._formatItemFallback(language, 'month', this._badiDay);\n        if (day.substring(4, 5) === '’' && day.substring(0, 1) === '‘') {\n          return day.substring(0, 5);\n        } else if (day.substring(0, 1) === '‘') {\n          return day.replace(/<(?:.|\\n)*?>/gm, '').substring(0, 4);\n        }\n        return day.replace(/<(?:.|\\n)*?>/gm, '').substring(0, 3);\n      case 'm':\n        return String(this._badiMonth);\n      case 'M':\n        month = this._formatItemFallback(\n          language, 'month', this._badiMonth);\n        if (month.substring(4, 5) === '’' && month.substring(0, 1) === '‘') {\n          return month.substring(0, 5);\n        } else if (month.substring(0, 1) === '‘') {\n          return month.replace(/<(?:.|\\n)*?>/gm, '').substring(0, 4);\n        }\n        return month.replace(/<(?:.|\\n)*?>/gm, '').substring(0, 3);\n      case 'W':\n        return this._formatItemFallback(\n          language, 'weekdayAbbbr3', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'y':\n        return String(this._badiYear);\n      case 'v':\n        return String((Math.floor((this._badiYear - 1) / 19) % 19) + 1);\n      case 'k':\n        return String(Math.floor((this._badiYear - 1) / 361) + 1);\n      // Two character tokens\n      case 'dd':\n        return ('0' + String(this._badiDay)).slice(-2);\n      case 'DD':\n        return this._formatItemFallback(language, 'month', this._badiDay);\n      case 'mm':\n        return ('0' + String(this._badiMonth)).slice(-2);\n      case 'MM':\n        return this._formatItemFallback(language, 'month', this._badiMonth);\n      case 'ww':\n        return this._formatItemFallback(\n          language, 'weekdayAbbr2', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'WW':\n        return this._formatItemFallback(\n          language, 'weekday', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'yy':\n        return ('00' + String(this._badiYear)).slice(-3);\n      case 'yv':\n        return String((this._badiYear - 1) % 19 + 1);\n      case 'YV':\n        return this._formatItemFallback(\n          language, 'yearInVahid', (this._badiYear - 1) % 19 + 1);\n      case 'vv':\n        return ('0' + String((Math.floor(\n          (this._badiYear - 1) / 19) + 2) % 19 - 1)).slice(-2);\n      case 'kk':\n        return ('0' + String(Math.floor(\n          (this._badiYear - 1) / 361) + 1)).slice(-2);\n      case 'BE':\n        return this._formatItemFallback(language, 'BE');\n      // Three character tokens\n      case 'DDL':\n        return this._formatItemFallback(language, 'monthL', this._badiDay);\n      case 'DD+':\n        return this._formatItemFallback(language, 'month', this._badiDay) +\n          ' (' + this._formatItemFallback(language, 'monthL', this._badiDay) +\n          ')';\n      case 'MML':\n        return this._formatItemFallback(language, 'monthL', this._badiMonth);\n      case 'MM+':\n        month = this._formatItemFallback(\n          language, 'month', this._badiMonth);\n        monthL = this._formatItemFallback(\n          language, 'monthL', this._badiMonth);\n        if (month === monthL) {\n          return month;\n        }\n        return month + ' (' + monthL + ')';\n      case 'WWL':\n        return this._formatItemFallback(\n          language, 'weekdayL', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'yyv':\n        return ('0' + String((this._badiYear - 1) % 19 + 1)).slice(-2);\n      default:\n        return '';\n    }\n  }\n\n  /**\n   * Determine the next language in the fallback order:\n   * regional variant -> primary language -> default language -> English\n   * @param {string} languageCode of the language for which fallback is needed\n   * @returns {string} next item in fallback order\n   */\n  _languageFallback(languageCode) {\n    if (languageCode.indexOf('-') > -1) {\n      return languageCode.split('-')[0];\n    // eslint-disable-next-line no-negated-condition\n    } else if (languageCode !== 'default') {\n      return 'default';\n    }\n    return 'en';\n  }\n\n  /**\n   * Retrieve element from localization with fallback\n   * @param {string} language output language (subject to fallbacks)\n   * @param {string} category group of localization elements (e.g. 'holyDay')\n   *                 or label for single items such as 'BE'\n   * @param {int} index of desired item in category, always 1-indexed\n   * @returns {string} localized output string\n   */\n  _formatItemFallback(language, category, index) {\n    if (typeof index === 'undefined') {\n      while (typeof badiLocale[language] === 'undefined' ||\n             typeof badiLocale[language][category] === 'undefined') {\n        language = this._languageFallback(language);\n      }\n      return badiLocale[language][category];\n    }\n    while (typeof badiLocale[language] === 'undefined' ||\n           typeof badiLocale[language][category] === 'undefined' ||\n           typeof badiLocale[language][category][index] === 'undefined') {\n      language = this._languageFallback(language);\n    }\n    return badiLocale[language][category][index];\n  }\n\n  /**\n   * Check whether a string supplied to the constructor describes a valid Badí'\n   * date, either as year-month-day or year-holyDay and if yes, return an array\n   * of date components.\n   * @param {string} dateString Badí' date in string format\n   * @returns {(array|false)} array consisting of the Badí' date components\n   *                          (either [year, month, day] or\n   *                          [year, holyDayNumber]) or false\n   */\n  _parseBadiDateString(dateString) { // eslint-disable-line complexity\n    const dateComponents = dateString.split('-');\n    // Are all components numerical\n    for (let i = 0; i < dateComponents.length; i++) {\n      if (!(/^\\d+$/.test(dateComponents[i]))) {\n        return false;\n      }\n      dateComponents[i] = parseInt(dateComponents[i], 10);\n    }\n    // If only two numbers are supplied, the second designates a Holy Day and\n    // must be between 1 and 11\n    if (dateComponents.length !== 3) {\n      if (dateComponents.length === 2 && dateComponents[1] > 0 &&\n          dateComponents[1] < 12) {\n        return dateComponents;\n      }\n      return false;\n    }\n    // Are the month and day numbers in sensible ranges?\n    // We call Ayyám-i-Há month 20\n    if (dateComponents[1] > 20 || dateComponents[1] < 1) {\n      return false;\n    }\n    if (dateComponents[2] > 19 || dateComponents[2] < 1) {\n      return false;\n    }\n    return dateComponents;\n  }\n\n  /**\n   * Check whether a moment object is within the valid range of dates.\n   * @param {moment} datetime date to be checked\n   * @returns {bool} whether the provided datetime is within the valid range\n   */\n  _notInValidGregRange(datetime) {\n    if (datetime.isBefore(moment.utc('1844-03-21')) ||\n        datetime.isAfter(moment.utc('2351-03-20'))) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Generate date from input corresponding to a Gregorian date.\n   */\n  _setFromGregorianDate() {\n    if (this._notInValidGregRange(this._gregDate)) {\n      this._setInvalid();\n      return;\n    }\n    const gregYear = this._gregDate.year();\n    if (this._gregDate.isBefore(moment.utc('2015-03-21'))) {\n      // Old implementation for day before Naw-Rúz 172\n      if (this._gregDate.isBefore(gregYear + '-03-21')) {\n        this._nawRuz = moment.utc((gregYear - 1).toString() + '-03-21');\n        this._badiYear = gregYear - 1844;\n      } else {\n        this._nawRuz = moment.utc(gregYear.toString() + '-03-21');\n        this._badiYear = gregYear - 1843;\n      }\n      this._setOldAyyamiHaLength();\n      this._yearTB = [12, 5, 13, 9];\n    } else {\n      // New implementation\n      this._badiYear = gregYear - 1843;\n      this._setBadiYearInfo(true);\n    }\n    // Now need to set Badí' month and date from the gregorian date\n    this._setBadiMonthDay();\n  }\n\n  /**\n   * Set Badí' month and day from Gregorian date\n   */\n  _setBadiMonthDay() {\n    const dayOfBadiYear = this._dayOfYear(this._gregDate);\n    if (dayOfBadiYear < 343) {\n      this._badiMonth = Math.floor((dayOfBadiYear - 1) / 19 + 1);\n      this._badiDay = (dayOfBadiYear - 1) % 19 + 1;\n    } else if (dayOfBadiYear < 343 + this._ayyamiHaLength) {\n      this._badiMonth = 20;\n      this._badiDay = dayOfBadiYear - 342;\n    } else {\n      this._badiMonth = 19;\n      this._badiDay = dayOfBadiYear - (342 + this._ayyamiHaLength);\n    }\n  }\n\n  /**\n   * Generate date from input that supplied the Badí' year and either Badí'\n   * month and day or a Holy Day number.\n   * @param {array} dateArray Badí' date either given in the form\n   *                          [year, month, day] or [year, holyDayNumber]\n   */\n  _setFromBadiDate(dateArray) { // eslint-disable-line complexity\n    this._badiYear = parseInt(dateArray[0], 10);\n    // Are we in the valid range?\n    if (this._badiYear < 1 || this._badiYear > 507) {\n      this._setInvalid();\n      return;\n    } else if (this._badiYear < 172) {\n      // Old implementation for dates before Naw-Rúz 172\n      this._nawRuz = moment.utc([1843 + this._badiYear, 2, 21]);\n      this._setOldAyyamiHaLength();\n      this._yearTB = [12, 5, 13, 9];\n    } else {\n      // New implementation\n      this._setBadiYearInfo();\n    }\n    // If all three components exist, we have a year, month, and day\n    // eslint-disable-next-line no-negated-condition\n    if (typeof dateArray[2] !== 'undefined') {\n      this._badiMonth = parseInt(dateArray[1], 10);\n      this._badiDay = parseInt(dateArray[2], 10);\n      if (this._badiMonth === 20 && this._badiDay > this._ayyamiHaLength) {\n        // If only off by one day, we'll bubble up so that 5th Ayyám-i-Há in a\n        // year with only 4 days of Ayyám-i-Há can be salvaged\n        if (this._badiDay - this._ayyamiHaLength === 1) {\n          this._badiMonth = 19;\n          this._badiDay = 1;\n        } else {\n          this._setInvalid();\n        }\n      }\n    // Otherwise input designated a Holy Day\n    } else {\n      const holyDayNum = parseInt(dateArray[1], 10);\n      switch (holyDayNum) {\n        case 1:\n          // Naw-Rúz\n          this._badiMonth = 1;\n          this._badiDay = 1;\n          break;\n        case 2:\n          // First Day of Ridván\n          this._badiMonth = 2;\n          this._badiDay = 13;\n          break;\n        case 3:\n          // Ninth Day of Ridván\n          this._badiMonth = 3;\n          this._badiDay = 2;\n          break;\n        case 4:\n          // Twelfth Day of Ridván\n          this._badiMonth = 3;\n          this._badiDay = 5;\n          break;\n        case 5:\n          // Declaration of the Báb\n          this._badiMonth = 4;\n          this._badiDay = 8;\n          if (this._badiYear < 172) {\n            // Date was different in old implementation\n            this._badiDay = 7;\n          }\n          break;\n        case 6:\n          // Ascension of Bahá'u'lláh\n          this._badiMonth = 4;\n          this._badiDay = 13;\n          break;\n        case 7:\n          // Martyrdom of the Báb\n          this._badiMonth = 6;\n          this._badiDay = 17;\n          if (this._badiYear < 172) {\n            // Date was different in old implementation\n            this._badiDay = 16;\n          }\n          break;\n        case 8:\n          // Birth of the Báb\n          this._badiMonth = this._yearTB[0];\n          this._badiDay = this._yearTB[1];\n          break;\n        case 9:\n          // Birth of Bahá'u'lláh\n          this._badiMonth = this._yearTB[2];\n          this._badiDay = this._yearTB[3];\n          break;\n        case 10:\n          // Day of the Covenant\n          this._badiMonth = 14;\n          this._badiDay = 4;\n          break;\n        case 11:\n          // Ascension of 'Abdu'l-Bahá\n          this._badiMonth = 14;\n          this._badiDay = 6;\n          break;\n        default:\n          this._setInvalid();\n          return;\n      }\n    }\n    // Finally we set the Gregorian date for this Badí' date\n    const dayOfGregYear = this._nawRuz.diff(\n      moment.utc([this._badiYear + 1843]), 'days') +\n      this._dayOfYear([this._badiYear, this._badiMonth, this._badiDay]);\n    this._gregDate = moment.utc([this._badiYear + 1843]);\n    // Bubbles up to next year if necessary\n    this._gregDate.dayOfYear(dayOfGregYear);\n    this._gregDate.hour(12);\n  }\n\n  /**\n   * Set the length of Ayyám-i-Há for dates before the new implementation.\n   */\n  _setOldAyyamiHaLength() {\n    if (moment([this._nawRuz.year() + 1]).isLeapYear()) {\n      this._ayyamiHaLength = 5;\n    } else {\n      this._ayyamiHaLength = 4;\n    }\n  }\n\n  /**\n   * Set year parameters for the given year.\n   * @param {bool} fromGregDate whether we are generating the date object from\n   *                            a Gregorian date\n   */\n  _setBadiYearInfo(fromGregDate) {\n    let yearData = this._extractBadiYearInfo();\n    if (fromGregDate === true &&\n        this._gregDate.isBefore(moment.utc(yearData.NR))) {\n      this._badiYear -= 1;\n      yearData = this._extractBadiYearInfo();\n    }\n    this._nawRuz = moment.utc(yearData.NR);\n    this._ayyamiHaLength = yearData.aHL;\n    this._yearTB = yearData.TB;\n  }\n\n  /**\n   * Unpack the info for the Badí' year from the base36 encoded version.\n   * @returns {object} Object containing the date of Naw-Rúz, the length of\n   *                   Ayyám-i-Há, and an array containing month, day, month,\n   *                   day of the Twin Holy Days\n   */\n  _extractBadiYearInfo() {\n    let yearData = {};\n    // Check whether data needs to be unpacked or exists in the verbose version\n    if (badiYears[0] === 'l4da') {\n      const components = badiYears[this._badiYear - 172].split('');\n      yearData.NR = String(this._badiYear - 172 + 2015) + '-03-' +\n                    String(parseInt(components[0], 36));\n      yearData.aHL = parseInt(components[1], 36);\n      const TB1 = [parseInt(components[2], 36), parseInt(components[3], 36)];\n      const TB2 = TB1[1] < 19 ? [TB1[0], TB1[1] + 1] : [TB1[0] + 1, 1];\n      yearData.TB = [TB1[0], TB1[1], TB2[0], TB2[1]];\n    } else {\n      yearData = badiYears[this._badiYear];\n    }\n    return yearData;\n  }\n\n  /**\n   * Get the days since Naw-Rúz (NR itself is '1') of the Badí' or Gregorian\n   * date provided.\n   * @param {(array|moment)} date Badí' date in the form [year, month, day]\n   *                         or moment\n   * @returns {int} 1-indexed number of the day in the Badí' year\n   */\n  _dayOfYear(date) {\n    let numDays = 0;\n    if (date.constructor === Array) {\n      // We have a Badí' date\n      if (date[1] < 19) {\n        numDays = 19 * (date[1] - 1) + date[2];\n      } else if (date[1] === 20) {\n        numDays = 342 + date[2];\n      } else if (date[1] === 19) {\n        numDays = 342 + this._ayyamiHaLength + date[2];\n      }\n    } else {\n      numDays = date.diff(this._nawRuz, 'days') + 1;\n    }\n    return numDays;\n  }\n\n  /**\n   * Set the member variables to invalid values.\n   */\n  _setInvalid() {\n    this._gregDate = moment.utc('0000-00-00');\n    this._badiYear = -1;\n    this._badiMonth = -1;\n    this._badiDay = -1;\n    this._ayyamiHaLength = -1;\n    this._nawRuz = moment.utc('0000-00-00');\n    this._valid = false;\n  }\n\n  /**\n   * If the date is a Holy Day, assign it\n   */\n  _setHolyDay() { // eslint-disable-line complexity\n    // First the dates that haven't changed with the new implementation\n    if (this._badiMonth === 1 && this._badiDay === 1) {\n      // Naw-Rúz\n      this._holyDay = 1;\n    } else if (this._badiMonth === 2 && this._badiDay === 13) {\n      // First Day of Ridván\n      this._holyDay = 2;\n    } else if (this._badiMonth === 3 && this._badiDay === 2) {\n      // Ninth Day of Ridván\n      this._holyDay = 3;\n    } else if (this._badiMonth === 3 && this._badiDay === 5) {\n      // Twelfth Day of Ridván\n      this._holyDay = 4;\n    } else if (this._badiMonth === 4 && this._badiDay === 13) {\n      // Ascension of Bahá'u'lláh\n      this._holyDay = 6;\n    } else if (this._badiMonth === 14 && this._badiDay === 4) {\n      // Day of the Covenant\n      this._holyDay = 10;\n    } else if (this._badiMonth === 14 && this._badiDay === 6) {\n      // Ascension of 'Abdu'l-Bahá\n      this._holyDay = 11;\n    }\n    // Twin birthdays are set in the instance at this point regardless of\n    // implementation\n    if (this._badiMonth === this._yearTB[0] &&\n        this._badiDay === this._yearTB[1]) {\n      // Birth of the Báb\n      this._holyDay = 8;\n    } else if (this._badiMonth === this._yearTB[2] &&\n               this._badiDay === this._yearTB[3]) {\n      // Birth of Bahá'u'lláh\n      this._holyDay = 9;\n    }\n    // Finally the two dates that have changed by one day\n    if (this._badiYear < 172) {\n      if (this._badiMonth === 4 && this._badiDay === 7) {\n        // Declaration of the Báb\n        this._holyDay = 5;\n      } else if (this._badiMonth === 6 && this._badiDay === 16) {\n        // Martyrdom of the Báb\n        this._holyDay = 7;\n      }\n    } else if (this._badiMonth === 4 && this._badiDay === 8) {\n      // Declaration of the Báb\n      this._holyDay = 5;\n    } else if (this._badiMonth === 6 && this._badiDay === 17) {\n      // Martyrdom of the Báb\n      this._holyDay = 7;\n    }\n  }\n\n  /**\n   * Get the name of the Holy Day (if any) in the given language (using\n   * localization fallbacks as necessary).\n   * @param {string} language Optional language for the return string\n   *                 (subject to language fallback)\n   * @returns {(string|false)} Name of the Holy Day in the given (or fallback)\n   *                           language, or false.\n   */\n  holyDay(language) {\n    if (!this._holyDay) {\n      return false;\n    }\n    return this._formatItemFallback(language, 'holyDay', this._holyDay);\n  }\n\n  /**\n   * Check whether this is a valid date (i.e. created from valid input).\n   * @returns {bool} whether this is a valid date.\n   */\n  isValid() {\n    return this._valid;\n  }\n\n  /**\n   * Get the Badí' day as a number.\n   * @returns {int} number of the day in the Badí' month (between 1 and 19)\n   */\n  badiDay() {\n    return this._badiDay;\n  }\n\n  /**\n   * Get the Badí' month as a number.\n   * @returns {int} number of the Badí' month (between 1 and 20 where 20 is\n   *                Ayyám-i-Há\n   */\n  badiMonth() {\n    return this._badiMonth;\n  }\n\n  /**\n   * Get the Badí' year.\n   * @returns {int} number of the Badí' year.\n   */\n  badiYear() {\n    return this._badiYear;\n  }\n\n  /**\n   * Get number of the Badí' weekday between 1 (Jalál ~> Saturday) and\n   * 7 (Istiqlál ~> Friday).\n   * @returns {int} number of Badí' weekday\n   */\n  badiWeekday() {\n    return (this._gregDate.isoWeekday() + 1) % 7 + 1;\n  }\n\n  /**\n   * Get number of the year in the Váḥid the current date is in.\n   * @returns {int} number of year in Váḥid (between 1 and 19)\n   */\n  yearInVahid() {\n    return (this._badiYear - 1) % 19 + 1;\n  }\n\n  /**\n   * Get number of the Váḥid (19 year period) the current date is in.\n   * @returns {int} number of Váḥid (between 1 and 19)\n   */\n  vahid() {\n    return (Math.floor((this._badiYear - 1) / 19) % 19) + 1;\n  }\n\n  /**\n   * Get number of the Kull-i-Shay' (361 year period) the current date is in.\n   * @returns {int} number of Kull-i-Shay' (1 for most supported dates)\n   */\n  kullIShay() {\n    return Math.floor((this._badiYear - 1) / 361) + 1;\n  }\n\n  /**\n   * Get the Gregorian date on whose sunset the Badí' date ends.\n   * @returns {moment} Gregorian date, with time set to 12:00:00\n   */\n  gregorianDate() {\n    return this._gregDate;\n  }\n\n  /**\n   * Get the length of Ayyám-i-Há for the year this date is in.\n   * @returns {int} Number of days of Ayyám-i-Há\n   */\n  ayyamiHaLength() {\n    return this._ayyamiHaLength;\n  }\n\n  /**\n   * Get the number (between 1 and 11) of the Holy Day.\n   * @returns {(int|false)} number of Holy Day or false if none.\n   */\n  holyDayNumber() {\n    return this._holyDay;\n  }\n}\n\n/**\n * Sets option (defaultLanguage) for the\n * module.\n * @param {object} options Options to be set.\n */\nconst badiDateOptions = function (options) {\n  if (typeof options.defaultLanguage === 'string') {\n    setDefaultLanguage(options.defaultLanguage);\n  }\n};\n\nexport {BadiDate, badiDateOptions};\n","/* eslint-disable max-len, complexity */\nconst clockLocations = {\n  Canada: [[[-63.29333, 60], [-138.9386, 60], [-139.1889, 60.08888], [-139.0681, 60.35222], [-139.6767, 60.34055], [-139.9794, 60.18777], [-140.45081, 60.30972], [-140.52139, 60.22221], [-140.9955, 60.30721], [-140.99686, 61.8948], [-141.00005, 65.84028], [-141.00206, 68.42821], [-141.00296, 69.58786], [-141.00477, 69.58884], [-140.99813, 70.12335], [-124.80692, 77.04204], [-117.95462, 78.95431], [-99.46935, 82.3539], [-75.0348, 84.79736], [-59.3117, 83.84122], [-60.98493, 82.07503], [-69.57686, 80.21588], [-71.1173, 79.6183], [-74.13178, 79.24647], [-73.93259, 78.5692], [-75.69878, 77.78571], [-77.43842, 77.49355], [-77.55793, 76.52414], [-78.54063, 76.17887], [-79.31085, 74.25332], [-75.79174, 73.25735], [-73.13581, 72.0489], [-69.1652, 71.09276], [-66.31007, 69.91087], [-66.05776, 68.70243], [-60.73262, 66.89639], [-62.3129, 65.07708], [-63.60102, 64.69197], [-64.19861, 60.84087], [-63.29333, 60.00012]]],\n  Finland: [[[31.5848296, 62.9070356], [31.4390606, 62.785375], [31.3454013, 62.64032620000001], [31.2218346, 62.49829550000001], [31.138311, 62.4420838], [30.720412, 62.20890580000002], [30.6564061, 62.2085877], [30.602068, 62.14134890000001], [30.4231749, 62.02237140000001], [30.3061104, 61.964546], [30.1556605, 61.8579888], [30.0752371, 61.8183646], [30.0387281, 61.76500110000001], [29.8185491, 61.6549278], [29.74029919999999, 61.5737044], [29.5030724, 61.461338900000015], [29.3304371, 61.3526198], [29.2330501, 61.268169], [29.0298879, 61.191815300000016], [28.9583837, 61.1514492], [28.818984, 61.1216471], [28.7136921, 61.0443349], [28.6578963, 60.95109439999999], [28.5246697, 60.9571371], [28.1354613, 60.7408695], [27.873414, 60.604559], [27.7736111, 60.53333330000002], [27.725, 60.3913889], [27.4550934, 60.223534], [27.2938862, 60.2003975], [26.8756332, 60.200342100000015], [26.6110136, 60.161753200000014], [26.2947105, 60.0465237], [26.0173046, 59.97679690000001], [25.1693516, 59.9434386], [24.2815873, 59.79155570000002], [23.4566746, 59.67247360000001], [22.9224144, 59.6384411], [22.6345729, 59.6079549], [22.3965563, 59.5130947], [21.4475658, 59.4772985], [20.7608658, 59.5324815], [20.3839584, 59.4576178], [20.2843364, 59.4660819], [19.083209799999988, 60.19169020000001], [19.2202109, 60.61151010000001], [20.0251664, 60.72755450000001], [20.7714495, 61.12690790000001], [20.903203, 61.6462488], [20.1658123, 63.1648577], [20.4010006, 63.3318822], [20.8175143, 63.5011379], [21.4628083, 63.6552312], [21.8845783, 63.70121190000001], [22.9611467, 64.2200974], [23.835799, 64.66547409999997], [24.1545056, 65.29247769999998], [24.131900100000014, 65.5153846], [24.1776819, 65.6603564], [24.1318042, 65.7716089], [24.152978, 65.862572], [24.0536762, 65.95152940000006], [24.0491701, 65.99502970000003], [23.9394784, 66.07568309999998], [23.9170552, 66.16186640000002], [23.7313763, 66.19408560000002], [23.6489848, 66.30377249999997], [23.6880374, 66.3815611], [23.650965700000015, 66.4557476], [23.8605347, 66.5595503], [23.86853209999999, 66.6568254], [23.9078441, 66.72140390000003], [23.880337, 66.76350940000003], [23.99566289999999, 66.822049], [23.8525565, 66.9573479], [23.677678, 67.0620298], [23.5545444, 67.16789390000002], [23.596079, 67.20820560000003], [23.5637833, 67.2606725], [23.7311639, 67.28763560000003], [23.7172209, 67.38530669999997], [23.7639366, 67.42772120000002], [23.408239899999984, 67.46939490000003], [23.4059159, 67.50091320000003], [23.5452477, 67.5838871], [23.492249099999984, 67.6652745], [23.47871239999999, 67.8419848], [23.5171915, 67.88433529999998], [23.6407972, 67.9151784], [23.6525654, 67.9589433], [23.3937061, 68.0452571], [23.3077618, 68.14837649999997], [23.1656349, 68.13315060000002], [23.152641, 68.2333806], [23.0702517, 68.29970360000003], [22.9181313, 68.3335115], [22.8028778, 68.39328420000002], [22.3437523, 68.45688960000003], [22.2960914, 68.4840408], [22.045040799999988, 68.479329], [21.8898693, 68.5844051], [21.7010887, 68.59686950000003], [21.6061629, 68.6678769], [21.4298688, 68.691352], [21.39042, 68.76478960000003], [20.9988391, 68.89612380000003], [20.8441913, 68.93656440000004], [20.9116456, 68.96882420000003], [20.775042799999987, 69.0326073], [20.5523258, 69.0600767], [20.7173208, 69.1197912], [21.057543, 69.03628970000003], [21.1086742, 69.1039291], [20.9875741, 69.19192740000003], [21.0961691, 69.260912], [21.2788202, 69.3118841], [21.6270859, 69.27658829999997], [22.1757622, 68.95632440000003], [22.1918678, 68.9187737], [22.3407806, 68.82722570000003], [22.3745217, 68.71666660000004], [22.5353893, 68.74451260000004], [22.800824, 68.68754809999997], [23.0459522, 68.6893436], [23.1675822, 68.6285189], [23.4406356, 68.6921635], [23.6735202, 68.70552140000002], [23.7753915, 68.81885129999998], [23.983330799999987, 68.82714340000003], [24.0755916, 68.7799668], [24.30226, 68.71735020000003], [24.6083879, 68.6819016], [24.9170187, 68.60529109999997], [25.1193208, 68.6428308], [25.1212144, 68.7458351], [25.1573697, 68.80006390000003], [25.2931271, 68.8600372], [25.47250939999999, 68.90329120000003], [25.6543285, 68.90577049999997], [25.745596499999987, 69.03984729999998], [25.742717799999987, 69.14430209999998], [25.6939225, 69.1957144], [25.7410164, 69.31839509999998], [25.8462009, 69.3929115], [25.8084981, 69.4259367], [25.8768225, 69.5261298], [25.9760403, 69.610225], [25.8925512, 69.66539549999997], [26.0071395, 69.7228555], [26.1255598, 69.7345401], [26.3835888, 69.8541585], [26.4653759, 69.93980490000003], [26.6834067, 69.96301920000003], [26.8407548, 69.9603025], [27.0316081, 69.9107924], [27.3049484, 69.95762760000004], [27.43070959999999, 70.0194461], [27.5206048, 70.02243659999996], [27.614207, 70.074151], [27.9593778, 70.0921111], [27.9842853, 70.0139707], [28.160713, 69.92099370000003], [28.3452694, 69.88083179999997], [28.4042254, 69.818425], [29.1339095, 69.69534039999996], [29.1705369, 69.6390414], [29.3364956, 69.47832269999998], [29.2193395, 69.39763620000002], [28.831539, 69.2243617], [28.80543, 69.1111558], [28.929451, 69.0519407], [28.4953735, 68.9300403], [28.468076, 68.8855137], [28.66118, 68.8864737], [28.8014499, 68.8693665], [28.7072131, 68.732555], [28.4341202, 68.53979460000002], [28.6478382, 68.19591340000002], [29.3271337, 68.0745162], [29.6593888, 67.80297219999996], [30.0173409, 67.67356889999996], [29.9305102, 67.5228214], [29.8567823, 67.48926540000004], [29.6361151, 67.332861], [29.522709499999987, 67.3099172], [29.48660609999999, 67.26011490000003], [29.0732544, 66.99615390000004], [29.0331239, 66.92547219999996], [29.0607529, 66.85269279999997], [29.3507185, 66.6439171], [29.4726751, 66.5434478], [29.6969469, 66.277347], [29.9239353, 66.1262486], [29.997268, 65.97889249999997], [30.0647878, 65.90105890000002], [30.138463, 65.66868749999998], [30.0170916, 65.6965272], [29.722432799999986, 65.637045], [29.8637508, 65.5604702], [29.7331208, 65.472637], [29.7467636, 65.347391], [29.6018471, 65.2599435], [29.893525, 65.19295509999998], [29.8193446, 65.1444587], [29.896916, 65.1051579], [29.7328054, 65.09129760000003], [29.6255535, 65.06020520000003], [29.5993537, 64.99509809999998], [29.6470353, 64.8674467], [29.739663, 64.7897553], [30.0430007, 64.7928625], [30.0416232, 64.74110840000003], [30.1365729, 64.6488835], [29.9894058, 64.58761530000002], [29.9869609, 64.5338998], [30.0583348, 64.4508749], [30.0448933, 64.4020122], [30.482439699999983, 64.2623385], [30.466399899999985, 64.2044319], [30.5534271, 64.1322443], [30.5280169, 64.0488769], [30.320039, 63.9082685], [30.260416, 63.82200320000001], [29.9718903, 63.7571676], [30.24571609999999, 63.60696830000001], [30.385620199999988, 63.54577980000001], [30.4841978, 63.4670887], [30.789711, 63.4050884], [30.9330443, 63.3559208], [30.9798739, 63.3078177], [31.1483116, 63.26151890000002], [31.2416464, 63.2166421], [31.2658547, 63.1154671], [31.46252279999998, 63.02421930000001], [31.5848296, 62.9070356]]],\n  // Greenland: [[[-57.44887, 82.28507], [-60.15022, 82.05782], [-61.87928, 81.82771], [-62.2191, 81.7294], [-63.42448, 81.28486], [-65.32658, 80.98138], [-66.57577, 80.83605], [-67.38791, 80.54753], [-67.66468, 80.1436], [-68.73755, 79.10919], [-72.47765, 78.62618], [-72.96065, 78.36972], [-73.1359, 78.13036], [-72.78968, 77.34387], [-73.38382, 76.66424], [-72.79822, 76.5702], [-69.80615, 76.29664], [-68.45971, 75.97179], [-66.32252, 75.80508], [-64.89914, 75.80081], [-63.13809, 76.04018], [-62.31741, 75.9034], [-60.47087, 75.78371], [-60.19731, 75.62983], [-58.94919, 75.49305], [-58.81241, 74.92883], [-58.38497, 74.89464], [-58.21399, 74.63817], [-57.47879, 74.17654], [-57.15394, 73.47554], [-55.83743, 71.40673], [-55.23901, 70.48346], [-55.10223, 69.40632], [-53.87121, 68.825], [-54.21316, 66.80748], [-53.75152, 65.52517], [-52.5034, 63.43926], [-47.39122, 59.6265], [-42.68939, 59.38714], [-41.16771, 61.50723], [-30.05428, 67.67946], [-26.83993, 68.124], [-21.04386, 70.27829], [-21.24903, 72.74034], [-16.78656, 74.91174], [-16.39331, 77.2541], [-17.64144, 78.51933], [-16.82075, 79.78455], [-11.02468, 81.34043], [-11.93085, 82.02433], [-19.48798, 82.45177], [-19.71024, 83.01599], [-27.19898, 83.85377], [-39.64602, 83.80248], [-50.82784, 82.9476], [-57.44887, 82.28507]]],\n  Iceland: [[[-25.0, 63.0], [-12.8, 63.0], [-12.8, 66.8], [-25.0, 66.8]]],\n  Norway: [[[30.79367, 69.78758], [30.89032, 69.73729], [30.95448, 69.63243], [30.93257, 69.55989], [30.81756, 69.52877], [30.51593, 69.54042], [30.41768, 69.58992], [30.23373, 69.65016], [30.13777, 69.64353], [30.18838, 69.56846], [30.12305, 69.51749], [30.11721, 69.46989], [30.00876, 69.41591], [29.85802, 69.42374], [29.7244, 69.38965], [29.56938, 69.31756], [29.39594, 69.32384], [29.28845, 69.29618], [29.31313, 69.23752], [29.24224, 69.11306], [29.05666, 69.01528], [28.85456, 69.07664], [28.80541, 69.11116], [28.83152, 69.22436], [29.21932, 69.39764], [29.33647, 69.47832], [29.17052, 69.63904], [29.13389, 69.69534], [28.40421, 69.81842], [28.33046, 69.84919], [28.34506, 69.8808], [28.1607, 69.92099], [27.98428, 70.01397], [27.94828, 70.09187], [27.79768, 70.07731], [27.61245, 70.07456], [27.52598, 70.02346], [27.42855, 70.01921], [27.27471, 69.97591], [27.29177, 69.95225], [27.03749, 69.91039], [26.89776, 69.93245], [26.85129, 69.96013], [26.71807, 69.94499], [26.67869, 69.96477], [26.46435, 69.93939], [26.38594, 69.85535], [26.24129, 69.81453], [26.13562, 69.73861], [26.01418, 69.72334], [25.89149, 69.6655], [25.97672, 69.61067], [25.93749, 69.57253], [25.83994, 69.54298], [25.87704, 69.5222], [25.80934, 69.42639], [25.8461, 69.39325], [25.75938, 69.34038], [25.74753, 69.28679], [25.70204, 69.25366], [25.69302, 69.19674], [25.74351, 69.13879], [25.72429, 69.0796], [25.77744, 69.01828], [25.71241, 68.98063], [25.65423, 68.90587], [25.60033, 68.88487], [25.48119, 68.90507], [25.2677, 68.85099], [25.15713, 68.79989], [25.11152, 68.70252], [25.11924, 68.6428], [24.91692, 68.60525], [24.85717, 68.56221], [24.78342, 68.63623], [24.60839, 68.6819], [24.30226, 68.71735], [24.07559, 68.77997], [23.98333, 68.82714], [23.87146, 68.83652], [23.77539, 68.81885], [23.73106, 68.75075], [23.67352, 68.70552], [23.44064, 68.69216], [23.16758, 68.62852], [23.04595, 68.68934], [22.80082, 68.68755], [22.53539, 68.74451], [22.37452, 68.71667], [22.34078, 68.82723], [22.19187, 68.91877], [22.17576, 68.95632], [21.98361, 69.07289], [21.8464, 69.14416], [21.62709, 69.27659], [21.27882, 69.31188], [21.09617, 69.26091], [21.00331, 69.22234], [20.98758, 69.19193], [21.05563, 69.12209], [21.10868, 69.10393], [21.05754, 69.03629], [20.71732, 69.11979], [20.55233, 69.06008], [20.06005, 69.04576], [20.30659, 68.92618], [20.33587, 68.80231], [20.20284, 68.66592], [20.05225, 68.59107], [19.9375, 68.55794], [20.02589, 68.53081], [20.22654, 68.49081], [19.97796, 68.38816], [19.9214, 68.35601], [18.9838, 68.51696], [18.62122, 68.50696], [18.40569, 68.58188], [18.12592, 68.53652], [18.10109, 68.40605], [18.15135, 68.19879], [17.89976, 67.96937], [17.66475, 68.03838], [17.28152, 68.11881], [17.18051, 68.05046], [16.73812, 67.91421], [16.55628, 67.64719], [16.40757, 67.53403], [16.158, 67.51916], [16.08983, 67.43528], [16.4041, 67.20497], [16.38776, 67.04546], [16.19402, 66.98259], [16.03876, 66.91245], [15.99364, 66.87323], [15.62137, 66.59434], [15.37723, 66.4843], [15.48473, 66.28246], [15.03568, 66.15356], [14.51629, 66.13258], [14.58441, 65.90134], [14.62548, 65.81181], [14.54147, 65.70075], [14.49877, 65.5213], [14.50683, 65.30973], [14.3788, 65.24762], [14.32598, 65.11892], [14.12989, 64.97856], [13.70547, 64.63996], [13.65426, 64.58034], [13.89118, 64.50713], [14.08523, 64.47825], [14.11387, 64.46248], [14.15711, 64.19505], [13.96752, 64.00797], [13.7154, 64.04629], [13.21111, 64.09537], [12.92672, 64.05795], [12.68356, 63.97422], [12.48023, 63.81876], [12.33057, 63.71507], [12.29946, 63.67198], [12.14977, 63.59395], [12.21288, 63.47859], [12.08407, 63.35558], [11.97458, 63.26923], [12.21823, 63.00033], [12.07469, 62.90254], [12.13638, 62.74792], [12.05614, 62.61192], [12.29937, 62.26749], [12.13766, 61.72382], [12.41961, 61.56298], [12.56932, 61.56875], [12.87085, 61.3565], [12.83383, 61.25846], [12.79035, 61.19705], [12.70703, 61.14327], [12.68258, 61.06122], [12.61251, 61.04683], [12.44761, 61.05073], [12.22399, 61.01308], [12.33279, 60.89017], [12.33448, 60.85236], [12.39537, 60.73389], [12.51102, 60.64246], [12.51578, 60.60015], [12.60688, 60.51274], [12.60605, 60.40593], [12.49879, 60.32365], [12.54191, 60.19338], [12.50064, 60.09908], [12.44856, 60.03917], [12.34114, 59.96567], [12.23104, 59.92759], [12.17429, 59.88981], [12.05346, 59.88594], [11.98518, 59.90072], [11.84045, 59.84174], [11.92597, 59.794], [11.93988, 59.69458], [11.88922, 59.69321], [11.85571, 59.64829], [11.72056, 59.62549], [11.69113, 59.58955], [11.75993, 59.45818], [11.77987, 59.38646], [11.81625, 59.34474], [11.82979, 59.24223], [11.78393, 59.20838], [11.77539, 59.08659], [11.71051, 59.03368], [11.68908, 58.95685], [11.59063, 58.89072], [11.45623, 58.89021], [11.45853, 58.99597], [11.34184, 59.12041], [11.20498, 59.08311], [11.17718, 59.09736], [11.1, 59], [11.0203, 58.97], [9.67858, 58.87844], [8.51901, 58.15871], [7.92368, 57.95878], [6.62638, 57.9188], [5.34686, 58.63409], [4.70265, 59.35382], [4.57381, 61.1576], [4.78262, 62.0506], [5.46681, 62.55263], [6.79965, 62.99691], [8.29243, 63.77884], [9.92293, 64.11205], [10.71819, 65.0095], [11.4246, 65.12057], [11.79779, 65.84919], [11.95329, 67.64852], [13.20171, 68.29717], [14.5701, 68.89694], [16.08064, 69.41675], [17.91552, 69.8166], [19.1906, 70.36306], [19.81259, 70.33196], [20.19467, 70.19424], [21.78519, 70.50523], [21.89626, 70.73182], [23.70892, 70.96284], [23.91773, 71.1139], [24.46864, 71.07391], [24.71744, 71.21608], [25.89478, 71.26051], [26.77445, 71.08724], [27.79185, 71.22052], [28.65819, 71.06503], [30.03102, 70.78069], [31.23946, 70.43859], [31.19482, 70.34084], [30.79367, 69.78758]], [[4.2, 80.84], [-11.5, 70.1], [19.2, 73.5], [39.2, 81.4]]],\n  Sweden: [[[15.4538561, 66.34534869999999], [15.3772302, 66.4843117], [15.625833, 66.605833], [15.80794, 66.735271], [16.0387632, 66.9124213], [16.195223, 66.982232], [16.3877, 67.0455], [16.4040109, 67.2049795], [16.09015, 67.435232], [16.1566, 67.519458], [16.407797, 67.533978], [16.555733, 67.647289], [16.7381292, 67.91418620000002], [17.180003, 68.050508], [17.2818957, 68.1188101], [17.6648128, 68.0384733], [17.8998048, 67.9693359], [18.1514126, 68.198755], [18.1010915, 68.406043], [18.1258499, 68.5364954], [18.4056102, 68.5818554], [18.6211478, 68.5069382], [18.9836971, 68.5169473], [19.921397, 68.3560137], [19.9778586, 68.3881535], [20.2264196, 68.4908071], [19.9375039, 68.5579418], [20.0521233, 68.5910515], [20.2027029, 68.6659076], [20.3358646, 68.8023404], [20.3064282, 68.9261735], [20.0600472, 69.0457578], [20.5486422, 69.05996990000001], [20.7750428, 69.0326073], [20.9137291, 68.9603927], [20.8441913, 68.93656440000002], [20.9156942, 68.8971424], [20.9967921, 68.896741], [21.2340165, 68.8140862], [21.3194271, 68.7592708], [21.3893348, 68.76495460000002], [21.4298688, 68.691352], [21.5651505, 68.6752534], [21.7013706, 68.6305605], [21.7016655, 68.5963461], [21.8898693, 68.5844051], [21.9919125, 68.5339794], [22.0182391, 68.495951], [22.1528153, 68.4701805], [22.2945732, 68.4838241], [22.4661749, 68.4413001], [22.6482126, 68.41604160000001], [22.7362404, 68.3852018], [22.8041064, 68.39294], [22.9181313, 68.3335115], [23.0702517, 68.29970360000002], [23.1528179, 68.2310713], [23.1415318, 68.1543005], [23.2783645, 68.15733889999998], [23.3216014, 68.1347101], [23.3966203, 68.044179], [23.5310194, 68.0067455], [23.6632301, 67.94218640000001], [23.6407972, 67.9151784], [23.5098377, 67.87994509999999], [23.4739757, 67.81714420000002], [23.4946531, 67.7903019], [23.493057, 67.6641861], [23.5588847, 67.6192741], [23.5450496, 67.5829545], [23.4081036, 67.50173829999999], [23.4104738, 67.46759370000002], [23.5365192, 67.4599963], [23.7632859, 67.4262029], [23.7179667, 67.384843], [23.7750768, 67.3393805], [23.7311639, 67.28763560000002], [23.5834506, 67.269308], [23.5535126, 67.2468025], [23.5958386, 67.2071971], [23.5569385, 67.16578719999998], [23.6536532, 67.1042345], [23.6739708, 67.0650834], [23.8564714, 66.9558968], [23.8640579, 66.9221303], [23.9330592, 66.8845665], [23.9945079, 66.82348849999998], [23.9782068, 66.78409040000001], [23.8797209, 66.7620511], [23.9078441, 66.72140390000001], [23.8685321, 66.6568254], [23.8846737, 66.61277119999998], [23.8605347, 66.5595503], [23.7853219, 66.5333886], [23.6509657, 66.4557476], [23.6880374, 66.3815611], [23.6489848, 66.3037725], [23.7263744, 66.1968556], [23.9159179, 66.1621612], [23.936749, 66.0794759], [24.0374327, 66.0090364], [24.0421963, 65.9633925], [24.152978, 65.862572], [24.1318042, 65.7716089], [24.1721721, 65.72528229999999], [24.1776819, 65.6603564], [24.1319001, 65.5153846], [24.1444599, 65.3956667], [23.1299456, 65.2854532], [21.8250561, 64.8363612], [22.0872366, 64.43431070000001], [21.5096176, 64.04121570000002], [21.4570471, 63.7528427], [20.20662871333013, 63.274568586669865], [19.4322896, 63.0737152], [18.2961641, 62.4173632], [17.7755886, 61.1718712], [17.8981165, 60.9377595], [17.7095869, 60.7102649], [17.3865202, 60.6893467], [17.3489744, 60.5862714], [17.3024177, 60.508762], [17.29774, 60.4647038], [17.2565412, 60.4243351], [17.1955585, 60.4105852], [17.1986283, 60.3077815], [17.0585097, 60.2727725], [16.908878, 60.281498], [16.9048859, 60.2394077], [16.7046001, 60.1950497], [16.6294785, 60.2384924], [16.6154023, 60.2786235], [16.5166127, 60.3554293], [16.3927146, 60.3794045], [16.2589904, 60.4931441], [16.1947891, 60.5354328], [16.13651, 60.6103267], [16.2382972, 60.6230491], [16.3769218, 60.7434488], [16.386117, 60.7868], [16.2552139, 60.8636119], [16.1310092, 60.9920575], [15.9216155, 61.00763], [15.7619207, 61.0496869], [15.6803816, 61.11321], [15.6573361, 61.2154788], [15.4760187, 61.3149858], [15.3370007, 61.4016369], [15.20475, 61.503826], [15.1531933, 61.5956892], [14.8564014, 61.7835491], [14.7971, 61.798451], [14.6666465, 61.8918775], [14.5296202, 61.783626], [14.4997464, 61.62599], [14.3947754, 61.5637652], [14.3364964, 61.59913920000001], [14.1822587, 61.6175455], [13.9769516, 61.6213397], [13.8902353, 61.6525473], [13.6131488, 61.6726273], [13.564749, 61.656455], [13.5066718, 61.6929666], [13.5145384, 61.7377738], [13.4160916, 61.8280592], [13.2092287, 61.9365972], [13.0799221, 62.0376119], [13.0423631, 62.0182008], [12.9513736, 62.1334555], [12.9026405, 62.1418727], [12.8059683, 62.2205277], [12.6078489, 62.214806], [12.299389, 62.2659814], [12.056144, 62.6119191], [12.1363845, 62.7479169], [12.074689, 62.9025463], [12.218233, 63.0003345], [11.9745822, 63.2692252], [12.0840901, 63.3555796], [12.2128783, 63.4785906], [12.1497625, 63.593946], [12.2975812, 63.6732169], [12.3399662, 63.7269855], [12.4797773, 63.8196667], [12.6860556, 63.9738931], [12.9268369, 64.05783829999999], [13.2109436, 64.0951725], [13.7151219, 64.045304], [13.981667, 64.013056], [14.1579301, 64.1860759], [14.120556, 64.452778], [14.086006, 64.47814109999999], [13.8924406, 64.507004], [13.6540802, 64.579929], [13.7050997, 64.6396655], [14.1081927, 64.96225790000001], [14.3257603, 65.1190618], [14.3790211, 65.24804960000002], [14.5056577, 65.3099238], [14.4967711, 65.5174317], [14.5295213, 65.682227], [14.6240045, 65.81419090000001], [14.584253, 65.9013501], [14.5162846, 66.132567], [15.035653, 66.1535649], [15.4847146, 66.282458], [15.4538561, 66.34534869999999]]],\n  USA: [[[-130.01989, 55.9153], [-130.17038, 55.77749], [-130.13861, 55.55335], [-129.99201, 55.28955], [-130.25933, 54.99635], [-130.66666, 54.71444], [-131.17048, 54.72103], [-132.10046, 54.6269], [-132.86477, 54.63066], [-133.60649, 54.72479], [-134.93933, 56.02375], [-136.80681, 57.75192], [-137.09296, 58.25079], [-139.07716, 59.1017], [-141.32115, 59.76436], [-143.47102, 59.81707], [-146.37014, 59.17701], [-149.21654, 59.54598], [-152.0253, 57.0535], [-155.80544, 55.02035], [-159.93198, 54.32757], [-173.1399, 51.33056], [-179.49537, 50.84863], [-179.28453, 52.29443], [-171.78447, 63.95114], [-169.94709, 63.91437], [-169.09903, 65.86662], [-168.1474, 65.7885], [-164.9772, 66.85025], [-167.15342, 68.37135], [-166.29498, 69.12437], [-161.71663, 70.74335], [-156.23466, 71.55661], [-143.75716, 70.6304], [-141.58847, 70.26895], [-141.56335, 69.73575], [-141.39798, 69.64277], [-141.00304, 69.64616], [-141.00189, 60.6745], [-141.00157, 60.30507], [-140.52034, 60.21906], [-140.44797, 60.30796], [-139.97408, 60.18451], [-139.68007, 60.33572], [-139.05208, 60.35373], [-139.17702, 60.08286], [-138.70578, 59.90624], [-138.60921, 59.76], [-137.60744, 59.24348], [-137.45151, 58.90854], [-136.82468, 59.1598], [-136.58199, 59.16554], [-136.19525, 59.63881], [-135.9476, 59.66343], [-135.47958, 59.7981], [-135.02888, 59.56364], [-135.10063, 59.42776], [-134.95978, 59.28104], [-134.7007, 59.2489], [-134.48273, 59.13097], [-134.258, 58.86087], [-133.84105, 58.72985], [-133.37997, 58.43181], [-133.45987, 58.38848], [-133.17195, 58.15383], [-132.55389, 57.4967], [-132.2478, 57.21112], [-132.36871, 57.09167], [-132.0448, 57.0451], [-132.12311, 56.8739], [-131.87311, 56.80627], [-131.83539, 56.59912], [-131.5813, 56.6123], [-131.08698, 56.40613], [-130.7818, 56.36713], [-130.4682, 56.24329], [-130.42548, 56.14172], [-130.10541, 56.12268], [-130.01989, 55.9153]], [[179.9, 52.2], [172.0, 53.3], [172.0, 52.4], [179.9, 51.0]]]\n};\n/* eslint-enable max-len */\n\nlet usingClockLocations = true;\n\n/**\n * Toggle the use of clock locations on or off\n * @param {bool} useCL whether clock locations should be used.\n */\nconst useClockLocations = function (useCL) {\n  usingClockLocations = useCL;\n};\n\n/**\n * Determine whether a point lies within a polygon.\n * All coordinates are given as [longitude, latitude].\n * @param {array} coords Coordinates of the point\n * @param {array} polygon given by an array of pairs of x and y coordinates\n * @returns {bool} whether the point given by coords is inside the polygon\n */\nconst inPolygon = function (coords, polygon) {\n  const x = coords[0];\n  const y = coords[1];\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; i++) {\n    const xi = polygon[i][0];\n    const yi = polygon[i][1];\n    const xj = polygon[j][0];\n    const yj = polygon[j][1];\n    // Check that a) the segment crosses the y coordinate of the point\n    //            b) at least one of the two vertices is left of the point\n    //            c) at the y coordinate of the point, the segment is left of it\n    if ((((yi < y) !== (yj < y)) && (xi <= x || xj <= x)) &&\n        ((xi + (y - yi) * (xj - xi) / (yj - yi)) < x)) {\n      inside = !inside;\n    }\n    j = i;\n  }\n  return inside;\n};\n\n/**\n * Determine whether coordinates are within a region where fixed times are used\n * as \"sunrise\" and \"sunset\" using polygons. The name of a country being\n * returned doesn't just mean that the coordinates are within that country, but\n * that they are within the region of that country where such a rule applies.\n * @param {number} latitude of the point to be checked\n * @param {number} longitude of the point to be checked\n * @returns {(string|false)} the appropriate region or false\n */\nconst clockLocationFromPolygons = function (latitude, longitude) {\n  if (!usingClockLocations) {\n    return false;\n  }\n  // First exclude as large an area as possible from having to check polygons\n  if (latitude < 51.0) {\n    return false;\n  }\n  if (latitude < 57.0 && longitude > -129.0 && longitude < 172.0) {\n    return false;\n  }\n  // Make a list of plausible areas based on longitude, then only check those\n  const countries = [];\n  const labels = [];\n  if (longitude < -129.9 || longitude > 172.4) {\n    countries.push(clockLocations.USA);\n    labels.push('USA');\n  }\n  if (longitude > -141.1 && longitude < -61.1) {\n    countries.push(clockLocations.Canada);\n    labels.push('Canada');\n  }\n  // Greenland doesn't currently have a rule for this\n  // if (longitude > -73.1 && longitude < -11.3) {\n  //   countries.push(clockLocations.Greenland);\n  //   labels.push('Greenland');\n  // }\n  if (longitude > -25.0 && longitude < -12.8) {\n    countries.push(clockLocations.Iceland);\n    labels.push('Iceland');\n  }\n  if (longitude > -9.2 && longitude < 33.6) {\n    countries.push(clockLocations.Norway);\n    labels.push('Norway');\n  }\n  if (longitude > 10.9 && longitude < 24.2) {\n    countries.push(clockLocations.Sweden);\n    labels.push('Sweden');\n  }\n  if (longitude > 19.1 && longitude < 31.6) {\n    countries.push(clockLocations.Finland);\n    labels.push('Finland');\n  }\n  // Russia currently doesn't have a rule for this\n  // if (longitude > 27.3 || longitude < -169.6) {\n  //  countries.push(clockLocations.Russia);\n  //  labels.push('Russia');\n  // }\n  for (let i = 0; i < countries.length; i++) {\n    for (let j = 0; j < countries[i].length; j++) {\n      if (inPolygon([longitude, latitude], countries[i][j])) {\n        return labels[i];\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * NOTE: This function is currently completely untested. Extensive testing\n * would require a large contingent of Google API requests.\n *\n * Determine whether coordinates are within a region where fixed times are used\n * as \"sunrise\" and \"sunset\" using google reverse geocoding\n * @param {json} revGCJson json result from reverse geocoding query of coords\n * @param {number} latitude of the point to be checked\n * @returns {(string|false)} the appropriate region or false\n */\nconst clockLocationFromReverseGeocode = function (revGCJson, latitude) {\n  if (!usingClockLocations) {\n    return false;\n  }\n  if (revGCJson.status !== 'OK') {\n    return false;\n  }\n  let country = '';\n  let adminLevel1 = '';\n  const addressComps = revGCJson.results[0].address_components;\n  for (let i = 0; i < addressComps.length; i++) {\n    if (addressComps[i].types[0] === 'country') {\n      country = addressComps[i].long_name;\n    } else if (addressComps[i].types[0] === 'administrative_area_level_1') {\n      adminLevel1 = addressComps[i].long_name;\n    }\n  }\n  if (country === '') {\n    return false;\n  } else if (country === 'United States') {\n    if (adminLevel1 === 'Alaska') {\n      return 'USA';\n    }\n  } else if (country === 'Canada') {\n    if (latitude >= 60) {\n      return 'Canada';\n    }\n  } else if (country === 'Iceland' || country === 'Norway' ||\n             country === 'Finland') {\n    return country;\n  } else if (country === 'Sweden') {\n    const counties = ['Norrbottens län', 'Västerbottens län', 'Jämtlands län',\n      'Västernorrlands län', 'Gävleborgs län'];\n    for (let i = 0; i < counties.length; i++) {\n      if (counties[i] === adminLevel1) {\n        return 'Sweden';\n      }\n    }\n  }\n  return false;\n};\n\nexport {clockLocationFromPolygons, clockLocationFromReverseGeocode,\n  useClockLocations};\n","import * as MeeusSunMoon from '../node_modules/meeussunmoon/src/index.js';\nimport {BadiDate,\n  badiDateOptions as defaultLanguageOption} from './badiDate.js';\nimport {clockLocationFromPolygons,\n  useClockLocations} from './clockLocations.js';\n\n/* eslint-disable complexity */\n\n/**\n * Wrapper class for Badí' date which takes care of all the location dependent\n * things: times for start, end, sunrise, and solar noon of the date as well as\n * the times for Holy Day commemorations.\n */\nclass LocalBadiDate {\n  /**\n   * Creates a Badí' date with location dependent information.\n   * @param {(Date|moment|string|Array)} date input date, same formats as for\n   *   badiDate are accepted. For a moment object, the time (before or after\n   *   sunset) is taken into consideration, otherwise only the date.\n   * @param {number} latitude of target location\n   * @param {number} longitude of target location\n   * @param {string} timezoneId as per IANA time zone database\n   */\n  constructor(date, latitude, longitude, timezoneId) {\n    // If a moment object is being passed, we use date and time, not just the\n    // date. For a JS Date object, we can't assume it's in the correct timezone,\n    // so in that case we use the date information only.\n    if (date instanceof moment) {\n      const sunset = MeeusSunMoon.sunset(date, latitude, longitude);\n      if (date.isAfter(sunset)) {\n        date.add(1, 'day');\n      }\n    }\n    this.badiDate = new BadiDate(date);\n    const gregDate = moment.tz(\n      this.badiDate.gregorianDate().format('YYYY-MM-DDTHH:mm:ss'), timezoneId);\n    const clockLocation = clockLocationFromPolygons(latitude, longitude);\n    if (!clockLocation ||\n        (clockLocation === 'Finland' && this.badiDate.badiMonth() === 19)) {\n      this.end = MeeusSunMoon.sunset(gregDate, latitude, longitude);\n      this.solarNoon = MeeusSunMoon.solarNoon(gregDate, longitude);\n      this.sunrise = MeeusSunMoon.sunrise(gregDate, latitude, longitude);\n      this.start = MeeusSunMoon.sunset(\n        gregDate.subtract(1, 'day'), latitude, longitude);\n      // add() and subtract() mutate the object, so we have to undo it\n      gregDate.add(1, 'day');\n    } else {\n      // First we set times to 18:00, 06:00, 12:00, 18:00, modifications are\n      // then made depending on the region.\n      this.end = moment.tz(\n        gregDate.format('YYYY-MM-DDT') + '18:00:00', timezoneId);\n      this.solarNoon = moment.tz(\n        gregDate.format('YYYY-MM-DDT') + '12:00:00', timezoneId);\n      this.sunrise = moment.tz(\n        gregDate.format('YYYY-MM-DDT') + '06:00:00', timezoneId);\n      this.start = moment.tz(gregDate.subtract(\n        1, 'day').format('YYYY-MM-DDT') + '18:00:00', timezoneId);\n      // add() and subtract() mutate the object, so we have to undo it\n      gregDate.add(1, 'day');\n      if (clockLocation === 'Canada') {\n        this.sunrise.add(30, 'minutes');\n      } else if (clockLocation === 'Iceland') {\n        this.solarNoon.add(1, 'hour');\n      } else if (clockLocation === 'Finland' || clockLocation === 'USA') {\n        if (this.end.isDST()) {\n          this.end.add(1, 'hour');\n          this.solarNoon.add(1, 'hour');\n          this.sunrise.add(1, 'hour');\n        }\n        if (this.start.isDST()) {\n          this.start.add(1, 'hour');\n        }\n      }\n    }\n    this.holyDayCommemoration = false;\n    switch (this.badiDate.holyDayNumber()) {\n      case 2:\n        // First Day of Ridvan: 15:00 local standard time\n        this.holyDayCommemoration = gregDate;\n        this.holyDayCommemoration.hour(gregDate.isDST() ? 16 : 15);\n        break;\n      case 5:\n        // Declaration of the Báb: 2 hours 11 minutes after sunset\n        this.holyDayCommemoration = moment.tz(this.start, timezoneId);\n        this.holyDayCommemoration.add(131, 'minutes');\n        break;\n      case 6:\n        // Ascension of Bahá'u'lláh: 03:00 local standard time\n        this.holyDayCommemoration = gregDate;\n        this.holyDayCommemoration.hour(gregDate.isDST() ? 4 : 3);\n        break;\n      case 7:\n        // Martyrdom of the Báb: solar noon\n        this.holyDayCommemoration = this.solarNoon;\n        break;\n      case 11:\n        // Ascension of 'Abdu'l-Bahá: 01:00 local standard time\n        this.holyDayCommemoration = gregDate;\n        this.holyDayCommemoration.hour(gregDate.isDST() ? 2 : 1);\n        break;\n      // skip default\n    }\n  }\n}\n\n/**\n * Sets options (defaultLanguage, useClockLocations) for the\n * module.\n * @param {object} options Options to be set.\n */\nconst badiDateOptions = function (options) {\n  if (typeof options.defaultLanguage === 'string') {\n    defaultLanguageOption({defaultLanguage: options.defaultLanguage});\n  }\n  if (typeof options.useClockLocations === 'boolean') {\n    useClockLocations(options.useClockLocations);\n  }\n};\n\nMeeusSunMoon.options({returnTimeForPNMS: true, roundToNearestMinute: true});\n\nexport {BadiDate, LocalBadiDate, badiDateOptions};\n"],"names":["badiLocale","en","badiYears","BadiDate","date","_gregDate","_badiYear","_badiMonth","_badiDate","_nawRuz","_ayyamiHaLength","_yearTB","_holyDay","_valid","Date","gregDate","moment","utc","getFullYear","getMonth","getDate","year","month","dateArray","this","_parseBadiDateString","_setFromBadiDate","tempDate","_notInValidGregRange","_setInvalid","constructor","Array","length","_setFromGregorianDate","_setHolyDay","formatString","language","isValid","formatTokens","returnString","i","charAt","j","next1","next2","next3","indexOf","_getFormatItem","token","day","monthL","String","_badiDay","_formatItemFallback","substring","replace","isoWeekday","Math","floor","slice","languageCode","split","category","index","_languageFallback","dateString","dateComponents","test","parseInt","datetime","isBefore","isAfter","gregYear","toString","_setOldAyyamiHaLength","_setBadiYearInfo","_setBadiMonthDay","dayOfBadiYear","_dayOfYear","dayOfGregYear","diff","dayOfYear","hour","isLeapYear","fromGregDate","yearData","_extractBadiYearInfo","NR","aHL","TB","components","TB1","TB2","numDays","badiDateOptions","options","defaultLanguage","log","clockLocations","usingClockLocations","inPolygon","coords","polygon","x","y","inside","xi","yi","xj","yj","MeeusSunMoon","returnTimeForPNMS","roundToNearestMinute","latitude","longitude","timezoneId","sunset","add","badiDate","tz","gregorianDate","format","clockLocation","countries","labels","push","clockLocationFromPolygons","badiMonth","end","solarNoon","sunrise","start","subtract","isDST","holyDayCommemoration","holyDayNumber","useCL","useClockLocations"],"mappings":";;;;;;mMAAA,8BACK,SACA,UACA,UACA,YACA,QACA,WACA,YACA,UACA,WACC,YACA,sBACA,UACA,YACA,UACA,aACA,mBACA,YACA,UACA,WACA,wBAID,cACA,UACA,WACA,aACA,UACA,UACA,UACA,eACA,WACC,WACA,UACA,eACA,WACA,YACA,eACA,YACA,iBACA,cACA,eACA,yBAID,YACA,wBACA,wBACA,0BACA,2BACA,6BACA,yBACA,qBACA,0BACC,yBACA,wCAKD,UACA,UACA,UACA,UACA,UACA,aACA,4BAIA,QACA,QACA,QACA,QACA,SACA,QACA,uBAIA,OACA,OACA,OACA,OACA,QACA,OACA,kBAIA,UACA,WACA,eACA,UACA,YACA,YACA,+BAIA,SACA,QACA,OACA,QACA,QACA,QACA,SACA,QACA,UACC,UACA,YACA,WACA,UACA,YACA,WACA,WACA,UACA,UACA,YAGK,kBACU,mBC7GfA,KACNA,EAAA,GAAmBC,EAmBnB,ICnCMC,GACJ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,4VChCZC,wBASQC,qBACLC,UAAY,OACZC,UAAY,OACZC,WAAa,OACbC,UAAY,OACZC,QAAU,OACVC,gBAAkB,OAClBC,gBACAC,UAAW,OACXC,QAAS,EAEVT,aAAgBU,UACbC,SAAWC,OAAOC,KACpBb,EAAKc,cAAed,EAAKe,WAAYf,EAAKgB,UAAW,UACnD,GAAIhB,aAAgBY,YACpBX,UAAYW,OAAOC,KAAKb,EAAKiB,OAAQjB,EAAKkB,QAASlB,EAAKA,OAAQ,UAChE,GAAoB,iBAATA,EAAmB,KAC7BmB,EAAYC,KAAKC,qBAAqBrB,MACxCmB,OACGG,iBAAiBH,OAEjB,KAGCI,EAAW,IAAIb,KAAKV,QACrBC,UAAYW,OAAOC,KAAKU,EAAST,cACpCS,EAASR,WAAYQ,EAASP,UAAW,KAEvCI,KAAKI,qBAAqBJ,KAAKnB,iBAC5BwB,oBAGAzB,EAAK0B,cAAgBC,QACV,IAAhB3B,EAAK4B,QAAgC,IAAhB5B,EAAK4B,YACvBH,mBAEAH,iBAAiBtB,IAGH,IAAnBoB,KAAKlB,gBAEF2B,wBAEHT,KAAKX,aACFqB,uDAgCFC,EAAcC,OACdZ,KAAKa,gBACD,uBAEHC,IACH,MAAO,MAAO,MAAO,MAAO,MAAO,QACnC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAClE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,cACd,IAAbF,QACyB,IAAzBpC,EAAWoC,YAEiB,IAA1BpC,EAAA,QACE,KAEA,gBAGa,IAAjBmC,IACM,kBACV,GAA4B,iBAAjBA,QACT,qCAELI,EAAe,GACbP,EAASG,EAAaH,OACnBQ,EAAI,EAAGA,EAAIR,EAAQQ,OAGK,MAA3BL,EAAaM,OAAOD,IAAcA,EAAIR,EAAS,MAC5C,IAAIU,EAAIF,EAAI,EAAGE,GAAKV,EAAQU,IAAK,IAChCA,IAAMV,QACD,gCAEsB,MAA3BG,EAAaM,OAAOC,GAAY,GAC9BA,WAGUP,EAAaM,OAAOC,OAEjC,KACCC,EAAQR,EAAaM,OAAOD,GAC5BI,EAAQD,EAAQR,EAAaM,OAAOD,EAAI,GACxCK,EAAQD,EAAQT,EAAaM,OAAOD,EAAI,GAG1CF,EAAa,GAAGQ,QAAQD,IAAU,MACpBrB,KAAKuB,eAAeF,EAAOT,MACtC,GACIE,EAAa,GAAGQ,QAAQF,IAAU,MAC3BpB,KAAKuB,eAAeH,EAAOR,MACtC,GACIE,EAAa,GAAGQ,QAAQH,IAAU,KAC3BnB,KAAKuB,eAAeJ,EAAOP,MAE3BO,SAIfJ,yCASMS,EAAOZ,OAEhBa,SAAK3B,SAAO4B,gBACRF,OAED,WACIG,OAAO3B,KAAK4B,cAChB,UAEyB,SADtB5B,KAAK6B,oBAAoBjB,EAAU,QAASZ,KAAK4B,WAC/CE,UAAU,EAAG,IAAsC,MAAxBL,EAAIK,UAAU,EAAG,GAC3CL,EAAIK,UAAU,EAAG,GACS,MAAxBL,EAAIK,UAAU,EAAG,GACnBL,EAAIM,QAAQ,iBAAkB,IAAID,UAAU,EAAG,GAEjDL,EAAIM,QAAQ,iBAAkB,IAAID,UAAU,EAAG,OACnD,WACIH,OAAO3B,KAAKjB,gBAChB,UAG2B,SAFtBiB,KAAK6B,oBACXjB,EAAU,QAASZ,KAAKjB,aAChB+C,UAAU,EAAG,IAAwC,MAA1BhC,EAAMgC,UAAU,EAAG,GAC/ChC,EAAMgC,UAAU,EAAG,GACS,MAA1BhC,EAAMgC,UAAU,EAAG,GACrBhC,EAAMiC,QAAQ,iBAAkB,IAAID,UAAU,EAAG,GAEnDhC,EAAMiC,QAAQ,iBAAkB,IAAID,UAAU,EAAG,OACrD,WACI9B,KAAK6B,oBACVjB,EAAU,iBAAkBZ,KAAKnB,UAAUmD,aAAe,GAAK,EAAI,OAClE,WACIL,OAAO3B,KAAKlB,eAChB,WACI6C,OAAQM,KAAKC,OAAOlC,KAAKlB,UAAY,GAAK,IAAM,GAAM,OAC1D,WACI6C,OAAOM,KAAKC,OAAOlC,KAAKlB,UAAY,GAAK,KAAO,OAEpD,YACK,IAAM6C,OAAO3B,KAAK4B,WAAWO,OAAO,OACzC,YACInC,KAAK6B,oBAAoBjB,EAAU,QAASZ,KAAK4B,cACrD,YACK,IAAMD,OAAO3B,KAAKjB,aAAaoD,OAAO,OAC3C,YACInC,KAAK6B,oBAAoBjB,EAAU,QAASZ,KAAKjB,gBACrD,YACIiB,KAAK6B,oBACVjB,EAAU,gBAAiBZ,KAAKnB,UAAUmD,aAAe,GAAK,EAAI,OACjE,YACIhC,KAAK6B,oBACVjB,EAAU,WAAYZ,KAAKnB,UAAUmD,aAAe,GAAK,EAAI,OAC5D,YACK,KAAOL,OAAO3B,KAAKlB,YAAYqD,OAAO,OAC3C,YACIR,QAAQ3B,KAAKlB,UAAY,GAAK,GAAK,OACvC,YACIkB,KAAK6B,oBACVjB,EAAU,eAAgBZ,KAAKlB,UAAY,GAAK,GAAK,OACpD,YACK,IAAM6C,QAAQM,KAAKC,OACxBlC,KAAKlB,UAAY,GAAK,IAAM,GAAK,GAAK,IAAIqD,OAAO,OACjD,YACK,IAAMR,OAAOM,KAAKC,OACvBlC,KAAKlB,UAAY,GAAK,KAAO,IAAIqD,OAAO,OACxC,YACInC,KAAK6B,oBAAoBjB,EAAU,UAEvC,aACIZ,KAAK6B,oBAAoBjB,EAAU,SAAUZ,KAAK4B,cACtD,aACI5B,KAAK6B,oBAAoBjB,EAAU,QAASZ,KAAK4B,UACtD,KAAO5B,KAAK6B,oBAAoBjB,EAAU,SAAUZ,KAAK4B,UACzD,QACC,aACI5B,KAAK6B,oBAAoBjB,EAAU,SAAUZ,KAAKjB,gBACtD,eACKiB,KAAK6B,oBACXjB,EAAU,QAASZ,KAAKjB,kBACjBiB,KAAK6B,oBACZjB,EAAU,SAAUZ,KAAKjB,aAElBe,EAEFA,EAAQ,KAAO4B,EAAS,QAC5B,aACI1B,KAAK6B,oBACVjB,EAAU,YAAaZ,KAAKnB,UAAUmD,aAAe,GAAK,EAAI,OAC7D,aACK,IAAML,QAAQ3B,KAAKlB,UAAY,GAAK,GAAK,IAAIqD,OAAO,iBAErD,8CAUKC,UACZA,EAAad,QAAQ,MAAQ,EACxBc,EAAaC,MAAM,KAAK,GAEL,YAAjBD,EACF,UAEF,iDAWWxB,EAAU0B,EAAUC,WACjB,IAAVA,EAAuB,WACO,IAAzB/D,EAAWoC,SACwB,IAAnCpC,EAAWoC,GAAU0B,MACtBtC,KAAKwC,kBAAkB5B,UAE7BpC,EAAWoC,GAAU0B,aAES,IAAzB9D,EAAWoC,SACwB,IAAnCpC,EAAWoC,GAAU0B,SACqB,IAA1C9D,EAAWoC,GAAU0B,GAAUC,MAChCvC,KAAKwC,kBAAkB5B,UAE7BpC,EAAWoC,GAAU0B,GAAUC,gDAYnBE,WACbC,EAAiBD,EAAWJ,MAAM,KAE/BrB,EAAI,EAAGA,EAAI0B,EAAelC,OAAQQ,IAAK,KACxC,QAAQ2B,KAAKD,EAAe1B,WACzB,IAEMA,GAAK4B,SAASF,EAAe1B,GAAI,WAIpB,IAA1B0B,EAAelC,OACa,IAA1BkC,EAAelC,QAAgBkC,EAAe,GAAK,GACnDA,EAAe,GAAK,IACfA,IAMPA,EAAe,GAAK,IAAMA,EAAe,GAAK,OAG9CA,EAAe,GAAK,IAAMA,EAAe,GAAK,IAG3CA,gDAQYG,YACfA,EAASC,SAAStD,OAAOC,IAAI,iBAC7BoD,EAASE,QAAQvD,OAAOC,IAAI,mEAU5BO,KAAKI,qBAAqBJ,KAAKnB,gBAC5BwB,uBAGD2C,EAAWhD,KAAKnB,UAAUgB,OAC5BG,KAAKnB,UAAUiE,SAAStD,OAAOC,IAAI,gBAEjCO,KAAKnB,UAAUiE,SAASE,EAAW,gBAChC/D,QAAUO,OAAOC,KAAKuD,EAAW,GAAGC,WAAa,eACjDnE,UAAYkE,EAAW,YAEvB/D,QAAUO,OAAOC,IAAIuD,EAASC,WAAa,eAC3CnE,UAAYkE,EAAW,WAEzBE,6BACA/D,SAAW,GAAI,EAAG,GAAI,UAGtBL,UAAYkE,EAAW,UACvBG,kBAAiB,SAGnBC,mEAOCC,EAAgBrD,KAAKsD,WAAWtD,KAAKnB,WACvCwE,EAAgB,UACbtE,WAAakD,KAAKC,OAAOmB,EAAgB,GAAK,GAAK,QACnDzB,UAAYyB,EAAgB,GAAK,GAAK,GAClCA,EAAgB,IAAMrD,KAAKd,sBAC/BH,WAAa,QACb6C,SAAWyB,EAAgB,WAE3BtE,WAAa,QACb6C,SAAWyB,GAAiB,IAAMrD,KAAKd,2DAU/Ba,WACVjB,UAAY8D,SAAS7C,EAAU,GAAI,IAEpCC,KAAKlB,UAAY,GAAKkB,KAAKlB,UAAY,SACpCuB,sBAEIL,KAAKlB,UAAY,UAErBG,QAAUO,OAAOC,KAAK,KAAOO,KAAKlB,UAAW,EAAG,UAChDoE,6BACA/D,SAAW,GAAI,EAAG,GAAI,SAGtBgE,wBAIqB,IAAjBpD,EAAU,QACdhB,WAAa6D,SAAS7C,EAAU,GAAI,SACpC6B,SAAWgB,SAAS7C,EAAU,GAAI,IACf,KAApBC,KAAKjB,YAAqBiB,KAAK4B,SAAW5B,KAAKd,kBAG7Cc,KAAK4B,SAAW5B,KAAKd,iBAAoB,QACtCH,WAAa,QACb6C,SAAW,QAEXvB,2BAKUuC,SAAS7C,EAAU,GAAI,UAEnC,OAEEhB,WAAa,OACb6C,SAAW,aAEb,OAEE7C,WAAa,OACb6C,SAAW,cAEb,OAEE7C,WAAa,OACb6C,SAAW,aAEb,OAEE7C,WAAa,OACb6C,SAAW,aAEb,OAEE7C,WAAa,OACb6C,SAAW,EACZ5B,KAAKlB,UAAY,WAEd8C,SAAW,cAGf,OAEE7C,WAAa,OACb6C,SAAW,cAEb,OAEE7C,WAAa,OACb6C,SAAW,GACZ5B,KAAKlB,UAAY,WAEd8C,SAAW,eAGf,OAEE7C,WAAaiB,KAAKb,QAAQ,QAC1ByC,SAAW5B,KAAKb,QAAQ,cAE1B,OAEEJ,WAAaiB,KAAKb,QAAQ,QAC1ByC,SAAW5B,KAAKb,QAAQ,cAE1B,QAEEJ,WAAa,QACb6C,SAAW,aAEb,QAEE7C,WAAa,QACb6C,SAAW,iCAGXvB,kBAKLkD,EAAgBvD,KAAKf,QAAQuE,KACjChE,OAAOC,KAAKO,KAAKlB,UAAY,OAAQ,QACrCkB,KAAKsD,YAAYtD,KAAKlB,UAAWkB,KAAKjB,WAAYiB,KAAK4B,gBACpD/C,UAAYW,OAAOC,KAAKO,KAAKlB,UAAY,YAEzCD,UAAU4E,UAAUF,QACpB1E,UAAU6E,KAAK,qDAOhBlE,QAAQQ,KAAKf,QAAQY,OAAS,IAAI8D,kBAC/BzE,gBAAkB,OAElBA,gBAAkB,2CASV0E,OACXC,EAAW7D,KAAK8D,wBACC,IAAjBF,GACA5D,KAAKnB,UAAUiE,SAAStD,OAAOC,IAAIoE,EAASE,YACzCjF,WAAa,IACPkB,KAAK8D,6BAEb7E,QAAUO,OAAOC,IAAIoE,EAASE,SAC9B7E,gBAAkB2E,EAASG,SAC3B7E,QAAU0E,EAASI,sDAUpBJ,QAEiB,SAAjBnF,EAAU,GAAe,KACrBwF,EAAaxF,EAAUsB,KAAKlB,UAAY,KAAKuD,MAAM,MAChD0B,GAAKpC,OAAO3B,KAAKlB,UAAY,IAAM,MAAQ,OACtC6C,OAAOiB,SAASsB,EAAW,GAAI,OACpCF,IAAMpB,SAASsB,EAAW,GAAI,QACjCC,GAAOvB,SAASsB,EAAW,GAAI,IAAKtB,SAASsB,EAAW,GAAI,KAC5DE,EAAMD,EAAI,GAAK,IAAMA,EAAI,GAAIA,EAAI,GAAK,IAAMA,EAAI,GAAK,EAAG,KACrDF,IAAME,EAAI,GAAIA,EAAI,GAAIC,EAAI,GAAIA,EAAI,WAEhC1F,EAAUsB,KAAKlB,kBAErB+E,qCAUEjF,OACLyF,EAAU,SACVzF,EAAK0B,cAAgBC,MAEnB3B,EAAK,GAAK,KACF,IAAMA,EAAK,GAAK,GAAKA,EAAK,GACf,KAAZA,EAAK,KACJ,IAAMA,EAAK,GACA,KAAZA,EAAK,OACJ,IAAMoB,KAAKd,gBAAkBN,EAAK,MAGpCA,EAAK4E,KAAKxD,KAAKf,QAAS,QAAU,EAEvCoF,6CAOFxF,UAAYW,OAAOC,IAAI,mBACvBX,WAAa,OACbC,YAAc,OACd6C,UAAY,OACZ1C,iBAAmB,OACnBD,QAAUO,OAAOC,IAAI,mBACrBJ,QAAS,wCAQU,IAApBW,KAAKjB,YAAsC,IAAlBiB,KAAK4B,cAE3BxC,SAAW,EACa,IAApBY,KAAKjB,YAAsC,KAAlBiB,KAAK4B,cAElCxC,SAAW,EACa,IAApBY,KAAKjB,YAAsC,IAAlBiB,KAAK4B,cAElCxC,SAAW,EACa,IAApBY,KAAKjB,YAAsC,IAAlBiB,KAAK4B,cAElCxC,SAAW,EACa,IAApBY,KAAKjB,YAAsC,KAAlBiB,KAAK4B,cAElCxC,SAAW,EACa,KAApBY,KAAKjB,YAAuC,IAAlBiB,KAAK4B,cAEnCxC,SAAW,GACa,KAApBY,KAAKjB,YAAuC,IAAlBiB,KAAK4B,gBAEnCxC,SAAW,IAIdY,KAAKjB,aAAeiB,KAAKb,QAAQ,IACjCa,KAAK4B,WAAa5B,KAAKb,QAAQ,QAE5BC,SAAW,EACPY,KAAKjB,aAAeiB,KAAKb,QAAQ,IACjCa,KAAK4B,WAAa5B,KAAKb,QAAQ,UAEnCC,SAAW,GAGdY,KAAKlB,UAAY,IACK,IAApBkB,KAAKjB,YAAsC,IAAlBiB,KAAK4B,cAE3BxC,SAAW,EACa,IAApBY,KAAKjB,YAAsC,KAAlBiB,KAAK4B,gBAElCxC,SAAW,GAEW,IAApBY,KAAKjB,YAAsC,IAAlBiB,KAAK4B,cAElCxC,SAAW,EACa,IAApBY,KAAKjB,YAAsC,KAAlBiB,KAAK4B,gBAElCxC,SAAW,mCAYZwB,WACDZ,KAAKZ,UAGHY,KAAK6B,oBAAoBjB,EAAU,UAAWZ,KAAKZ,mDAQnDY,KAAKX,gDAQLW,KAAK4B,oDASL5B,KAAKjB,qDAQLiB,KAAKlB,uDASJkB,KAAKnB,UAAUmD,aAAe,GAAK,EAAI,+CAQvChC,KAAKlB,UAAY,GAAK,GAAK,yCAQ3BmD,KAAKC,OAAOlC,KAAKlB,UAAY,GAAK,IAAM,GAAM,6CAQ/CmD,KAAKC,OAAOlC,KAAKlB,UAAY,GAAK,KAAO,iDAQzCkB,KAAKnB,0DAQLmB,KAAKd,+DAQLc,KAAKZ,kBASVkF,EAAkB,SAAUC,GFrtBP,IAAU3D,EEstBI,iBAA5B2D,EAAQC,kBFttBgB5D,EEutBd2D,EAAQC,qBFttBO,IAAzBhG,EAAWoC,WAEZ6D,IAAI,kEAEZ,QAAwBjG,EAAWoC,KGvCjC8D,MACQ,SAAU,MAAO,SAAU,MAAO,SAAU,YAAa,SAAU,YAAa,SAAU,YAAa,SAAU,YAAa,UAAW,YAAa,UAAW,YAAa,SAAU,YAAa,UAAW,WAAY,UAAW,YAAa,UAAW,YAAa,UAAW,YAAa,UAAW,YAAa,UAAW,YAAa,UAAW,YAAa,UAAW,YAAa,SAAU,WAAY,QAAS,YAAa,QAAS,YAAa,SAAU,YAAa,SAAU,YAAa,QAAS,WAAY,SAAU,YAAa,SAAU,WAAY,SAAU,YAAa,SAAU,YAAa,SAAU,YAAa,SAAU,YAAa,SAAU,YAAa,SAAU,YAAa,SAAU,WAAY,QAAS,YAAa,SAAU,YAAa,SAAU,YAAa,SAAU,YAAa,QAAS,YAAa,SAAU,YAAa,SAAU,YAAa,SAAU,YADv4BA,KAEQ,WAAY,aAAc,WAAY,YAAa,WAAY,oBAAqB,WAAY,oBAAqB,UAAW,aAAc,UAAW,oBAAqB,WAAY,aAAc,UAAW,oBAAqB,WAAY,oBAAqB,WAAY,YAAa,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,kBAAmB,aAAc,WAAY,qBAAsB,WAAY,aAAc,WAAY,YAAa,WAAY,qBAAsB,WAAY,aAAc,UAAW,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,UAAW,YAAa,WAAY,oBAAqB,OAAQ,aAAc,WAAY,YAAa,WAAY,aAAc,WAAY,qBAAsB,WAAY,qBAAsB,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,mBAAoB,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,UAAW,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,UAAW,oBAAqB,WAAY,oBAAqB,mBAAoB,aAAc,WAAY,aAAc,WAAY,aAAc,UAAW,YAAa,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,mBAAoB,aAAc,WAAY,aAAc,kBAAmB,aAAc,WAAY,oBAAqB,UAAW,oBAAqB,kBAAmB,YAAa,WAAY,aAAc,UAAW,aAAc,WAAY,oBAAqB,UAAW,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,mBAAoB,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,mBAAoB,aAAc,kBAAmB,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,UAAW,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,mBAAoB,YAAa,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,YAAa,SAAU,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,mBAAoB,aAAc,WAAY,aAAc,WAAY,aAAc,UAAW,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,YAAa,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,UAAW,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,mBAAoB,oBAAqB,WAAY,aAAc,SAAU,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,kBAAmB,oBAAqB,WAAY,oBAAqB,mBAAoB,oBAAqB,mBAAoB,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,YAAa,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,kBAAmB,aAAc,WAAY,oBAAqB,UAAW,YAAa,WAAY,aAAc,WAAY,aAAc,UAAW,oBAAqB,WAAY,oBAAqB,WAAY,YAAa,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,UAAW,aAAc,SAAU,aAAc,UAAW,aAAc,WAAY,aAAc,UAAW,aAAc,SAAU,aAAc,WAAY,aAAc,WAAY,YAAa,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,YAAa,mBAAoB,aAAc,kBAAmB,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,YAAa,WAAY,aAAc,UAAW,oBAAqB,WAAY,oBAAqB,UAAW,oBAAqB,WAAY,aAAc,mBAAoB,YAAa,WAAY,aAAc,WAAY,YAAa,WAAY,YAAa,WAAY,aAAc,UAAW,oBAAqB,WAAY,aAAc,UAAW,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,UAAW,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,mBAAoB,aAAc,mBAAoB,aAAc,WAAY,aAAc,WAAY,aAAc,UAAW,aAAc,UAAW,oBAAqB,WAAY,aAAc,kBAAmB,oBAAqB,mBAAoB,oBAAqB,WAAY,aAAc,UAAW,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,kBAAmB,oBAAqB,WAAY,cAFrxNA,MAIS,GAAM,MAAS,KAAM,MAAS,KAAM,QAAS,GAAM,QAJ5DA,KAKO,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,UAAW,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,UAAW,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,UAAW,SAAU,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,UAAW,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,UAAW,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,UAAW,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,QAAS,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,OAAQ,WAAY,SAAU,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,UAAW,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,UAAW,SAAU,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,UAAW,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,SAAU,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,KAAM,KAAM,QAAS,QAAS,QAAS,WAAY,QAAS,WAAY,QAAS,WAAY,QAAS,UAAW,QAAS,WAAY,QAAS,WAAY,QAAS,UAAW,QAAS,UAAW,QAAS,WAAY,QAAS,WAAY,QAAS,WAAY,QAAS,WAAY,SAAU,UAAW,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,UAAW,QAAS,WAAY,SAAU,WAAY,SAAU,WAAY,SAAU,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"}