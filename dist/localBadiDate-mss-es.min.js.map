{"version":3,"file":"localBadiDate-mss-es.min.js","sources":["../node_modules/meeussunmoon/src/auxMath.js","../node_modules/meeussunmoon/src/timeConversions.js","../node_modules/meeussunmoon/src/moonPhases.js","../node_modules/meeussunmoon/src/constants.js","../node_modules/meeussunmoon/src/sunTimes.js","../node_modules/meeussunmoon/src/index.js","../src/locale/en.js","../src/badiLocale.js","../src/badiYears.js","../src/badiDate.js","../src/clockLocations.js","../src/localBadiDate.js"],"sourcesContent":["/**\n * Converts angles in degrees to radians.\n * @param {number} deg Angle in degrees.\n * @returns {number} Angle in radians.\n */\nconst deg2rad = function (deg) {\n  return deg * 0.017453292519943295;\n};\n\n/**\n * Converts angles in radians to degrees.\n * @param {number} rad Angle in radians.\n * @returns {number} Angle in degrees.\n */\nconst rad2deg = function (rad) {\n  return rad * 57.29577951308232;\n};\n\n/**\n * Calculates the sine of an angle given in degrees.\n * @param {number} deg Angle in degrees.\n * @returns {number} Sine of the angle.\n */\nconst sind = function (deg) {\n  return Math.sin(deg2rad(deg));\n};\n\n/**\n * Calculates the cosine of an angle given in degrees.\n * @param {number} deg Angle in degrees.\n * @returns {number} Cosine of the angle.\n */\nconst cosd = function (deg) {\n  return Math.cos(deg2rad(deg));\n};\n\n/**\n * Reduces an angle to the interval 0-360°.\n * @param {number} angle Angle in degrees.\n * @returns {number} Reduced angle in degrees.\n */\nconst reduceAngle = function (angle) {\n  return angle - (360 * Math.floor(angle / 360));\n};\n\n/**\n * Takes the modulo of a number using floored division.\n * @param {number} a Original number.\n * @param {number} n divisor.\n * @returns {number} a mod n.\n */\nconst modulo = function (a, n) {\n  return a - n * (Math.floor(a / n));\n};\n\n/**\n * Evaluates a polynomial in the form A + Bx + Cx^2...\n * @param {number} variable Value of x in the polynomial.\n * @param {array} coeffs Array of coefficients [A, B, C...].\n * @returns {number} Sum of the polynomial.\n */\nconst polynomial = function (variable, coeffs) {\n  let varPower = 1;\n  let sum = 0.0;\n  const numCoeffs = coeffs.length;\n  for (let i = 0; i < numCoeffs; i++) {\n    sum += varPower * coeffs[i];\n    varPower *= variable;\n  }\n  return sum;\n};\n\n/**\n * Interpolates a value from 3 known values (see AA p24 Eq3.3).\n * @param {number} y1 Start value of the interval.\n * @param {number} y2 Middle value of the interval.\n * @param {number} y3 End value of the interval.\n * @param {number} n Location (-0.5 >= n >= 0.5) of result in the interval.\n * @param {bool} normalize Whether the final result should be normalized.\n * @returns {number} Interpolated result.\n */\nconst interpolateFromThree = function (y1, y2, y3, n, normalize) {\n  let a = y2 - y1;\n  let b = y3 - y2;\n  if (typeof normalize !== 'undefined' && normalize) {\n    if (a < 0) { a += 360; }\n    if (b < 0) { b += 360; }\n  }\n  const c = b - a;\n  const y = y2 + (n / 2) * (a + b + n * c);\n  return y;\n};\n\nexport {deg2rad, rad2deg, sind, cosd, reduceAngle, modulo, polynomial,\n  interpolateFromThree};\n","/**\n * Converts a datetime in UTC to the corresponding Julian Date (see AA p60f).\n * @param {moment} datetime Datetime to be converted.\n * @returns {number} Julian date (fractional number of days since 1 January\n *     4713BC according to the proleptic Julian calendar.\n */\nconst datetimeToJD = function (datetime) {\n  let Y = datetime.year();\n  // Months are zero-indexed\n  let M = datetime.month() + 1;\n  const D = datetime.date() + (datetime.hour() + (datetime.minute() +\n                               datetime.second() / 60) / 60) / 24;\n  if (M < 3) {\n    Y -= 1;\n    M += 12;\n  }\n  const A = Math.floor(Y / 100);\n  // Need a different B if we are before introduction of the Gregorian Calendar\n  const gregorianCutoff = moment('1582-10-15T12:00:00Z');\n  let B = 0;\n  if (datetime.isAfter(gregorianCutoff)) {\n    B = 2 - A + Math.floor(A / 4);\n  }\n  const JD = Math.floor(365.25 * (Y + 4716)) +\n             Math.floor(30.6001 * (M + 1)) + D + B - 1524.5;\n  return JD;\n};\n\n/**\n * Converts a Julian Date to the corresponding datetime in UTC (see AA p63).\n * @param {number} JD Julian date to be converted\n * @returns {moment} Datetime corresponding to the given Julian date.\n */\nconst JDToDatetime = function (JD) {\n  JD += 0.5;\n  const Z = Math.floor(JD);\n  const F = JD - Z;\n  let A = Z;\n  if (Z >= 2299161) {\n    const alpha = Math.floor((Z - 1867216.25) / 36524.25);\n    A += 1 + alpha - Math.floor(alpha / 4);\n  }\n  const B = A + 1524;\n  const C = Math.floor((B - 122.1) / 365.25);\n  const D = Math.floor(365.25 * C);\n  const E = Math.floor((B - D) / 30.6001);\n  const fracDay = B - D - Math.floor(30.6001 * E) + F;\n  const day = Math.floor(fracDay);\n  const hours = Math.floor((fracDay - day) * 24);\n  const minutes = Math.floor(((fracDay - day) * 24 - hours) * 60);\n  const seconds =\n    Math.floor((((fracDay - day) * 24 - hours) * 60 - minutes) * 60);\n  let month = E - 1;\n  if (E > 13) {\n    month -= 12;\n  }\n  let year = C - 4715;\n  if (month > 2) {\n    year -= 1;\n  }\n  const datetime = moment.tz('2000-01-01T12:00:00', 'UTC');\n  datetime.year(year);\n  // Months are zero-indexed\n  datetime.month(month - 1);\n  datetime.date(day);\n  datetime.hour(hours);\n  datetime.minute(minutes);\n  datetime.second(seconds);\n  return datetime;\n};\n\n/**\n * Converts a Julian date to the number of Julian centuries since\n * 2000-01-01T12:00:00Z (see AA p87 Eq12.1).\n * @param {number} JD Julian date.\n * @returns {number} T.\n */\nconst JDToT = function (JD) {\n  return (JD - 2451545) / 36525;\n};\n\n/**\n * Converts a datetime in UTC to the number of Julian centuries since\n * 2000-01-01T12:00:00Z.\n * @param {moment} datetime Datetime to be converted.\n * @returns {number} T.\n */\nconst datetimeToT = function (datetime) {\n  return JDToT(datetimeToJD(datetime));\n};\n\n/* eslint-disable complexity */\n/**\n * Calculates the value of ΔT=TT−UT (see\n * http://eclipse.gsfc.nasa.gov/SEcat5/deltatpoly.htm).\n * @param {moment} datetime Datetime for which ΔT should be calculated.\n * @returns {number} ΔT.\n */\nconst DeltaT = function (datetime) {\n  let y = datetime.year();\n  // Months are zero-indexed\n  y += (datetime.month() + 0.5) / 12;\n  let u;\n  let t;\n  let DeltaT;\n  switch (true) {\n    case y < -1999:\n      DeltaT = false;\n      break;\n    case y < -500:\n      u = (y - 1820) / 100;\n      DeltaT = -20 + 32 * u * u;\n      break;\n    case y < 500:\n      u = y / 100;\n      DeltaT = 10583.6 - 1014.41 * u + 33.78311 * u * u - 5.952053 * u * u * u -\n               0.1798452 * u * u * u * u + 0.022174192 * u * u * u * u * u +\n               0.0090316521 * u * u * u * u * u * u;\n      break;\n    case y < 1600:\n      u = (y - 1000) / 100;\n      DeltaT = 1574.2 - 556.01 * u + 71.23472 * u * u + 0.319781 * u * u * u -\n               0.8503463 * u * u * u * u - 0.005050998 * u * u * u * u * u +\n               0.0083572073 * u * u * u * u * u * u;\n      break;\n    case y < 1700:\n      t = y - 1600;\n      DeltaT = 120 - 0.9808 * t - 0.01532 * t * t + t * t * t / 7129;\n      break;\n    case y < 1800:\n      t = y - 1700;\n      DeltaT = 8.83 + 0.1603 * t - 0.0059285 * t * t + 0.00013336 * t * t * t -\n               t * t * t * t / 1174000;\n      break;\n    case y < 1860:\n      t = y - 1800;\n      DeltaT = 13.72 - 0.332447 * t + 0.0068612 * t * t +\n               0.0041116 * t * t * t - 0.00037436 * t * t * t * t +\n               0.0000121272 * t * t * t * t * t -\n               0.0000001699 * t * t * t * t * t * t +\n               0.000000000875 * t * t * t * t * t * t * t;\n      break;\n    case y < 1900:\n      t = y - 1860;\n      DeltaT = 7.62 + 0.5737 * t - 0.251754 * t * t + 0.01680668 * t * t * t -\n               0.0004473624 * t * t * t * t + t * t * t * t * t / 233174;\n      break;\n    case y < 1920:\n      t = y - 1900;\n      DeltaT = -2.79 + 1.494119 * t - 0.0598939 * t * t +\n                0.0061966 * t * t * t - 0.000197 * t * t * t * t;\n      break;\n    case y < 1941:\n      t = y - 1920;\n      DeltaT = 21.20 + 0.84493 * t - 0.076100 * t * t + 0.0020936 * t * t * t;\n      break;\n    case y < 1961:\n      t = y - 1950;\n      DeltaT = 29.07 + 0.407 * t - t * t / 233 + t * t * t / 2547;\n      break;\n    case y < 1986:\n      t = y - 1975;\n      DeltaT = 45.45 + 1.067 * t - t * t / 260 - t * t * t / 718;\n      break;\n    case y < 2005:\n      t = y - 2000;\n      DeltaT = 63.86 + 0.3345 * t - 0.060374 * t * t + 0.0017275 * t * t * t +\n               0.000651814 * t * t * t * t + 0.00002373599 * t * t * t * t * t;\n      break;\n    case y < 2050:\n      t = y - 2000;\n      DeltaT = 62.92 + 0.32217 * t + 0.005589 * t * t;\n      break;\n    case y < 2150:\n      DeltaT = -20 + 32 * ((y - 1820) / 100) * ((y - 1820) / 100) -\n        0.5628 * (2150 - y);\n      break;\n    default:\n      u = (y - 1820) / 100;\n      DeltaT = -20 + 32 * u * u;\n  }\n  return DeltaT;\n};\n/* eslint-enable complexity */\n\n/**\n * Calculates an approximate value for k (the fractional number of new moons\n * since 2000-01-06).\n * @param {moment} datetime Datetime for which k is calculated.\n * @returns {number} k.\n */\nconst approxK = function (datetime) {\n  const year = datetime.year() + (datetime.month() + 1) / 12 +\n    datetime.date() / 365.25;\n  return (year - 2000) * 12.3685;\n};\n\n/**\n * Calculates T from k.\n * @param {number} k Fractional number of new moons since 2000-01-06.\n * @returns {number} T Fractional num. of centuries since 2000-01-01:12:00:00Z.\n */\nconst kToT = function (k) {\n  return k / 1236.85;\n};\n\nexport {datetimeToJD, JDToDatetime, JDToT, datetimeToT, DeltaT, approxK, kToT};\n","import * as auxMath from './auxMath.js';\nimport * as timeConversions from './timeConversions.js';\n\n/**\n * Calculates the Julian date in ephemeris time of the moon near the date\n * corresponding to k (see AA p350ff).\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Julian date in ephemeris time of the moon of given phase.\n */\nconst truePhase = function (k, phase) {\n  k += phase / 4;\n  const T = timeConversions.kToT(k);\n  const E = eccentricityCorrection(T);\n  let JDE = meanPhase(T, k);\n  const M = sunMeanAnomaly(T, k);\n  const MPrime = moonMeanAnomaly(T, k);\n  const F = moonArgumentOfLatitude(T, k);\n  const Omega = moonAscendingNodeLongitude(T, k);\n  const A = planetaryArguments(T, k);\n  let DeltaJDE = 0;\n  if (phase === 0 || phase === 2) {\n    DeltaJDE += newMoonFullMoonCorrections(E, M, MPrime, F, Omega, phase);\n  } else if (phase === 1 || phase === 3) {\n    DeltaJDE += quarterCorrections(E, M, MPrime, F, Omega, phase);\n  }\n  DeltaJDE += commonCorrections(A);\n  JDE += DeltaJDE;\n  return JDE;\n};\n\n/**\n * Calculates the mean phase of the moon as Julian date in ephemeris time (see\n * AA p349 Eq49.1).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Julian date in ephemeris time of the moon of given mean\n *     phase.\n */\nconst meanPhase = function (T, k) {\n  const JDE = 2451550.09766 + 29.530588861 * k + 0.00015437 * T * T -\n              0.000000150 * T * T * T + 0.00000000073 * T * T * T * T;\n  return JDE;\n};\n\n/**\n * Calculates the mean anomaly of the sun (see AA p350 Eq49.4).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Mean anomaly of the sun at the given time.\n */\nconst sunMeanAnomaly = function (T, k) {\n  const M = 2.5534 + 29.10535670 * k - 0.0000014 * T * T -\n            0.00000011 * T * T * T;\n  return M;\n};\n\n/**\n * Calculates the mean anomaly of the moon (see AA p350 Eq49.5).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Mean anomaly of the moon at the given time.\n */\nconst moonMeanAnomaly = function (T, k) {\n  const MPrime = 201.5643 + 385.81693528 * k + 0.0107582 * T * T +\n                 0.00001238 * T * T * T - 0.000000058 * T * T * T * T;\n  return MPrime;\n};\n\n/**\n * Calculates the argument of latitude of the moon (see AA p350 Eq49.6).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Argument of latitude of the moon at the given time.\n */\nconst moonArgumentOfLatitude = function (T, k) {\n  const F = 160.7108 + 390.67050284 * k - 0.0016118 * T * T -\n            0.00000227 * T * T * T + 0.000000011 * T * T * T * T;\n  return F;\n};\n\n/**\n * Calculates the longitude of the ascending node of the lunar orbit (see AA\n * p350 Eq49.7).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Longitude of the ascending node of the lunar orbit at the\n *     given time.\n */\nconst moonAscendingNodeLongitude = function (T, k) {\n  const Omega = 124.7746 - 1.56375588 * k + 0.0020672 * T * T +\n                0.00000215 * T * T * T;\n  return Omega;\n};\n\n/**\n * Calculates the correction for the eccentricity of the earth's orbit.\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Eccentricity correction.\n */\nconst eccentricityCorrection = function (T) {\n  const E = 1 - 0.002516 * T - 0.0000074 * T * T;\n  return E;\n};\n\n/**\n * Calculates the planetary arguments for the moon phases (see AA p351).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {array} Planetary arguments for the moon phases.\n */\nconst planetaryArguments = function (T, k) {\n  const A = [];\n  /* eslint-disable no-multi-spaces */\n  // Want to follow the numbering conventions from AA\n  A[0]  = 0;\n  A[1]  = 299.77 +  0.107408 * k - 0.009173 * T * T;\n  A[2]  = 251.88 +  0.016321 * k;\n  A[3]  = 251.83 + 26.651886 * k;\n  A[4]  = 349.42 + 36.412478 * k;\n  A[5]  =  84.66 + 18.206239 * k;\n  A[6]  = 141.74 + 53.303771 * k;\n  A[7]  = 207.14 +  2.453732 * k;\n  A[8]  = 154.84 +  7.306860 * k;\n  A[9]  =  34.52 + 27.261239 * k;\n  A[10] = 207.19 +  0.121824 * k;\n  A[11] = 291.34 +  1.844379 * k;\n  A[12] = 161.72 + 24.198154 * k;\n  A[13] = 239.56 + 25.513099 * k;\n  A[14] = 331.55 +  3.592518 * k;\n  /* eslint-enable no-multi-spaces */\n  return A;\n};\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * that are common to all phases (see AA p352).\n * @param {array} A Array of planetary arguments\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst commonCorrections = function (A) {\n  const DeltaJDE = 0.000325 * auxMath.sind(A[1]) +\n                   0.000165 * auxMath.sind(A[2]) +\n                   0.000164 * auxMath.sind(A[3]) +\n                   0.000126 * auxMath.sind(A[4]) +\n                   0.000110 * auxMath.sind(A[5]) +\n                   0.000062 * auxMath.sind(A[6]) +\n                   0.000060 * auxMath.sind(A[7]) +\n                   0.000056 * auxMath.sind(A[8]) +\n                   0.000047 * auxMath.sind(A[9]) +\n                   0.000042 * auxMath.sind(A[10]) +\n                   0.000040 * auxMath.sind(A[11]) +\n                   0.000037 * auxMath.sind(A[12]) +\n                   0.000035 * auxMath.sind(A[13]) +\n                   0.000023 * auxMath.sind(A[14]);\n  return DeltaJDE;\n};\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * for full and new moons (see AA p351).\n * @param {number} E Correction for the eccentricity of the earth's orbit.\n * @param {number} M Mean anomaly of the sun.\n * @param {number} MPrime Mean anomaly of the moon.\n * @param {number} F Argument of latitude of the moon.\n * @param {number} Omega Longitude of the ascending node of the lunar orbit.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst newMoonFullMoonCorrections = function (E, M, MPrime, F, Omega, phase) {\n  let DeltaJDE = -0.00111 * auxMath.sind(MPrime - 2 * F) -\n                  0.00057 * auxMath.sind(MPrime + 2 * F) +\n                  0.00056 * E * auxMath.sind(2 * MPrime + M) -\n                  0.00042 * auxMath.sind(3 * MPrime) +\n                  0.00042 * E * auxMath.sind(M + 2 * F) +\n                  0.00038 * E * auxMath.sind(M - 2 * F) -\n                  0.00024 * E * auxMath.sind(2 * MPrime - M) -\n                  0.00017 * auxMath.sind(Omega) -\n                  0.00007 * auxMath.sind(MPrime + 2 * M) +\n                  0.00004 * auxMath.sind(2 * MPrime - 2 * F) +\n                  0.00004 * auxMath.sind(3 * M) +\n                  0.00003 * auxMath.sind(MPrime + M - 2 * F) +\n                  0.00003 * auxMath.sind(2 * MPrime + 2 * F) -\n                  0.00003 * auxMath.sind(MPrime + M + 2 * F) +\n                  0.00003 * auxMath.sind(MPrime - M + 2 * F) -\n                  0.00002 * auxMath.sind(MPrime - M - 2 * F) -\n                  0.00002 * auxMath.sind(3 * MPrime + M) +\n                  0.00002 * auxMath.sind(4 * MPrime);\n  if (phase === 0) {\n    DeltaJDE += -0.40720 * auxMath.sind(MPrime) +\n                 0.17241 * E * auxMath.sind(M) +\n                 0.01608 * auxMath.sind(2 * MPrime) +\n                 0.01039 * auxMath.sind(2 * F) +\n                 0.00739 * E * auxMath.sind(MPrime - M) -\n                 0.00514 * E * auxMath.sind(MPrime + M) +\n                 0.00208 * E * E * auxMath.sind(2 * M);\n  } else if (phase === 2) {\n    DeltaJDE += -0.40614 * auxMath.sind(MPrime) +\n                 0.17302 * E * auxMath.sind(M) +\n                 0.01614 * auxMath.sind(2 * MPrime) +\n                 0.01043 * auxMath.sind(2 * F) +\n                 0.00734 * E * auxMath.sind(MPrime - M) -\n                 0.00515 * E * auxMath.sind(MPrime + M) +\n                 0.00209 * E * E * auxMath.sind(2 * M);\n  }\n  return DeltaJDE;\n};\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * for first and last quarters (see AA p352).\n * @param {number} E Correction for the eccentricity of the earth's orbit.\n * @param {number} M Mean anomaly of the sun.\n * @param {number} MPrime Mean anomaly of the moon.\n * @param {number} F Argument of latitude of the moon.\n * @param {number} Omega Longitude of the ascending node of the lunar orbit.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst quarterCorrections = function (E, M, MPrime, F, Omega, phase) {\n  let DeltaJDE = -0.62801 * auxMath.sind(MPrime) +\n                  0.17172 * E * auxMath.sind(M) -\n                  0.01183 * E * auxMath.sind(MPrime + M) +\n                  0.00862 * auxMath.sind(2 * MPrime) +\n                  0.00804 * auxMath.sind(2 * F) +\n                  0.00454 * E * auxMath.sind(MPrime - M) +\n                  0.00204 * E * E * auxMath.sind(2 * M) -\n                  0.00180 * auxMath.sind(MPrime - 2 * F) -\n                  0.00070 * auxMath.sind(MPrime + 2 * F) -\n                  0.00040 * auxMath.sind(3 * MPrime) -\n                  0.00034 * E * auxMath.sind(2 * MPrime - M) +\n                  0.00032 * E * auxMath.sind(M + 2 * F) +\n                  0.00032 * E * auxMath.sind(M - 2 * F) -\n                  0.00028 * E * E * auxMath.sind(MPrime + 2 * M) +\n                  0.00027 * E * auxMath.sind(2 * MPrime + M) -\n                  0.00017 * auxMath.sind(Omega) -\n                  0.00005 * auxMath.sind(MPrime - M - 2 * F) +\n                  0.00004 * auxMath.sind(2 * MPrime + 2 * F) -\n                  0.00004 * auxMath.sind(MPrime + M + 2 * F) +\n                  0.00004 * auxMath.sind(MPrime - 2 * M) +\n                  0.00003 * auxMath.sind(MPrime + M - 2 * F) +\n                  0.00003 * auxMath.sind(3 * M) +\n                  0.00002 * auxMath.sind(2 * MPrime - 2 * F) +\n                  0.00002 * auxMath.sind(MPrime - M + 2 * F) -\n                  0.00002 * auxMath.sind(3 * MPrime + M);\n  const W = 0.00306 -\n            0.00038 * E * auxMath.cosd(M) +\n            0.00026 * auxMath.cosd(MPrime) -\n            0.00002 * auxMath.cosd(MPrime - M) +\n            0.00002 * auxMath.cosd(MPrime + M) +\n            0.00002 * auxMath.cosd(2 * F);\n  if (phase === 1) {\n    DeltaJDE += W;\n  } else if (phase === 3) {\n    DeltaJDE -= W;\n  }\n  return DeltaJDE;\n};\n\nexport {truePhase};\n","/* eslint array-bracket-spacing: \"off\", indent: \"off\", no-multi-spaces: \"off\", standard/array-bracket-even-spacing: \"off\" */\n\n/** See AA p144 */\nconst sunMeanAnomaly = [357.52772, 35999.050340, -0.0001603, -1 / 300000];\n\n/** See AA p163 Eq 25.2 */\nconst sunMeanLongitude = [280.46646, 36000.76983, 0.0003032];\n\n/** See AA p147 Eq22.3 */\nconst meanObliquityOfEcliptic =\n  [84381.448 / 3600, -4680.93 / 3600, -1.55 / 3600, 1999.25 / 3600,\n   -51.38 / 3600, -249.67 / 3600, -39.05 / 3600, 7.12 / 3600, 27.87 / 3600,\n   5.79 / 3600, 2.45 / 3600];\n\n/** See AA p144 */\nconst moonArgumentOfLatitude =\n  [93.27191, 483202.017538, -0.0036825, 1 / 327270];\n\n/** See AA p144 */\nconst moonAscendingNodeLongitude =\n  [125.04452, -1934.136261, 0.0020708, 1 / 450000];\n\n/** See AA p144 */\nconst moonMeanAnomaly = [134.96298, 477198.867398, 0.0086972, 1 / 56250];\n\n/** See AA p144 */\nconst moonMeanElongation = [297.85036, 445267.111480, -0.0019142, 1 / 189474];\n\n/**\n * Nutations in longitude and obliquity\n * See AA p145f\n */\nconst nutations =\n  [[ 0,  0,  0,  0, 1, -171996, -174.2, 92025,  8.9],\n   [-2,  0,  0,  2, 2,  -13187,   -1.6,  5736, -3.1],\n   [ 0,  0,  0,  2, 2,   -2274,   -0.2,   977, -0.5],\n   [ 0,  0,  0,  0, 2,    2062,    0.2,  -895,  0.5],\n   [ 0,  1,  0,  0, 0,    1426,   -3.4,    54, -0.1],\n   [ 0,  0,  1,  0, 0,     712,    0.1,    -7,    0],\n   [-2,  1,  0,  2, 2,    -517,    1.2,   224, -0.6],\n   [ 0,  0,  0,  2, 1,    -386,   -0.4,   200,    0],\n   [ 0,  0,  1,  2, 2,    -301,      0,   129, -0.1],\n   [-2, -1,  0,  2, 2,     217,   -0.5,   -95,  0.3],\n   [-2,  0,  1,  0, 0,    -158,      0,     0,    0],\n   [-2,  0,  0,  2, 1,     129,    0.1,   -70,    0],\n   [ 0,  0, -1,  2, 2,     123,      0,   -53,    0],\n   [ 2,  0,  0,  0, 0,      63,      0,     0,    0],\n   [ 0,  0,  1,  0, 1,      63,    0.1,   -33,    0],\n   [ 2,  0, -1,  2, 2,     -59,      0,    26,    0],\n   [ 0,  0, -1,  0, 1,     -58,   -0.1,    32,    0],\n   [ 0,  0,  1,  2, 1,     -51,      0,    27,    0],\n   [-2,  0,  2,  0, 0,      48,      0,     0,    0],\n   [ 0,  0, -2,  2, 1,      46,      0,   -24,    0],\n   [ 2,  0,  0,  2, 2,     -38,      0,    16,    0],\n   [ 0,  0,  2,  2, 2,     -31,      0,    13,    0],\n   [ 0,  0,  2,  0, 0,      29,      0,     0,    0],\n   [-2,  0,  1,  2, 2,      29,      0,   -12,    0],\n   [ 0,  0,  0,  2, 0,      26,      0,     0,    0],\n   [-2,  0,  0,  2, 0,     -22,      0,     0,    0],\n   [ 0,  0, -1,  2, 1,      21,      0,   -10,    0],\n   [ 0,  2,  0,  0, 0,      17,   -0.1,     0,    0],\n   [ 2,  0, -1,  0, 1,      16,      0,    -8,    0],\n   [-2,  2,  0,  2, 2,     -16,    0.1,     7,    0],\n   [ 0,  1,  0,  0, 1,     -15,      0,     9,    0],\n   [-2,  0,  1,  0, 1,     -13,      0,     7,    0],\n   [ 0, -1,  0,  0, 1,     -12,      0,     6,    0],\n   [ 0,  0,  2, -2, 0,      11,      0,     0,    0],\n   [ 2,  0, -1,  2, 1,     -10,      0,     5,    0],\n   [ 2,  0,  1,  2, 2,     -8,       0,     3,    0],\n   [ 0,  1,  0,  2, 2,      7,       0,    -3,    0],\n   [-2,  1,  1,  0, 0,     -7,       0,     0,    0],\n   [ 0, -1,  0,  2, 2,     -7,       0,     3,    0],\n   [ 2,  0,  0,  2, 1,     -7,       0,     3,    0],\n   [ 2,  0,  1,  0, 0,      6,       0,     0,    0],\n   [-2,  0,  2,  2, 2,      6,       0,    -3,    0],\n   [-2,  0,  1,  2, 1,      6,       0,    -3,    0],\n   [ 2,  0, -2,  0, 1,     -6,       0,     3,    0],\n   [ 2,  0,  0,  0, 1,     -6,       0,     3,    0],\n   [ 0, -1,  1,  0, 0,      5,       0,     0,    0],\n   [-2, -1,  0,  2, 1,     -5,       0,     3,    0],\n   [-2,  0,  0,  0, 1,     -5,       0,     3,    0],\n   [ 0,  0,  2,  2, 1,     -5,       0,     3,    0],\n   [-2,  0,  2,  0, 1,      4,       0,     0,    0],\n   [-2,  1,  0,  2, 1,      4,       0,     0,    0],\n   [ 0,  0,  1, -2, 0,      4,       0,     0,    0],\n   [-1,  0,  1,  0, 0,     -4,       0,     0,    0],\n   [-2,  1,  0,  0, 0,     -4,       0,     0,    0],\n   [ 1,  0,  0,  0, 0,     -4,       0,     0,    0],\n   [ 0,  0,  1,  2, 0,      3,       0,     0,    0],\n   [ 0,  0, -2,  2, 2,     -3,       0,     0,    0],\n   [-1, -1,  1,  0, 0,     -3,       0,     0,    0],\n   [ 0,  1,  1,  0, 0,     -3,       0,     0,    0],\n   [ 0, -1,  1,  2, 2,     -3,       0,     0,    0],\n   [ 2, -1, -1,  2, 2,     -3,       0,     0,    0],\n   [ 0,  0,  3,  2, 2,      3,       0,     0,    0],\n   [ 2, -1,  0,  2, 2,     -3,       0,     0,    0]];\n\nexport {sunMeanAnomaly, sunMeanLongitude, meanObliquityOfEcliptic,\n  moonArgumentOfLatitude, moonAscendingNodeLongitude, moonMeanAnomaly,\n  moonMeanElongation, nutations};\n","import * as auxMath from './auxMath.js';\nimport * as constants from './constants.js';\nimport * as timeConversions from './timeConversions.js';\nimport {returnTimeForPNMS, roundToNearestMinute} from './index.js';\n\n/**\n * Calculates the solar transit time on a date at a given longitude (see AA\n * p102f).\n * @param {moment} datetime Date for which transit is calculated.\n * @param {number} L Longitude.\n * @returns {moment} Solar transit time.\n */\nconst sunTransit = function (datetime, L) {\n  const timezone = datetime.tz();\n  const transit = moment.tz(\n    [datetime.year(), datetime.month(), datetime.date(), 0, 0, 0], 'UTC');\n  const DeltaT = timeConversions.DeltaT(transit);\n  const T = timeConversions.datetimeToT(transit);\n  const Theta0 = apparentSiderealTimeGreenwhich(T);\n  // Want 0h TD for this, not UT\n  const TD = T - (DeltaT / (3600 * 24 * 36525));\n  const alpha = sunApparentRightAscension(TD);\n  // Sign flip for longitude from AA as we take East as positive\n  let m = (alpha - L - Theta0) / 360;\n  m = normalizeM(m, datetime.utcOffset());\n  const DeltaM = sunTransitCorrection(T, Theta0, DeltaT, L, m);\n  m += DeltaM;\n  transit.add(Math.floor(m * 3600 * 24 + 0.5), 'seconds');\n  if (roundToNearestMinute) {\n    transit.add(30, 'seconds');\n    transit.second(0);\n  }\n  transit.tz(timezone);\n  return transit;\n};\n\n/**\n * Calculates the sunrise or sunset time on a date at a given latitude and\n * longitude (see AA p102f).\n * @param {moment} datetime Date for which sunrise or sunset is calculated.\n * @param {number} phi Latitude.\n * @param {number} L Longitude.\n * @param {string} flag 'RISE' or 'SET' depending on which event should be\n *     calculated.\n * @returns {moment} Sunrise or sunset time.\n */\nconst sunRiseSet = function (datetime, phi, L, flag) {\n  const timezone = datetime.tz();\n  const suntime = moment.tz(\n    [datetime.year(), datetime.month(), datetime.date(), 0, 0, 0], 'UTC');\n  const DeltaT = timeConversions.DeltaT(suntime);\n  const T = timeConversions.datetimeToT(suntime);\n  const Theta0 = apparentSiderealTimeGreenwhich(T);\n  // Want 0h TD for this, not UT\n  const TD = T - (DeltaT / (3600 * 24 * 36525));\n  const alpha = sunApparentRightAscension(TD);\n  const delta = sunApparentDeclination(TD);\n  const H0 = approxLocalHourAngle(phi, delta);\n  // Sign flip for longitude from AA as we take East as positive\n  let m0 = (alpha - L - Theta0) / 360;\n  m0 = normalizeM(m0, datetime.utcOffset());\n  let m;\n  if (flag === 'RISE') {\n    m = m0 - H0 / 360;\n  } else if (flag === 'SET') {\n    m = m0 + H0 / 360;\n  } else {\n    return false;\n  }\n  let counter = 0;\n  let DeltaM = 1;\n  // Repeat if correction is larger than ~9s\n  while ((Math.abs(DeltaM) > 0.0001) && (counter < 3)) {\n    DeltaM = sunRiseSetCorrection(T, Theta0, DeltaT, phi, L, m);\n    m += DeltaM;\n    counter++;\n  }\n  if (m > 0) {\n    suntime.add(Math.floor(m * 3600 * 24 + 0.5), 'seconds');\n  } else {\n    suntime.subtract(Math.floor(Math.abs(m) * 3600 * 24 + 0.5), 'seconds');\n  }\n  if (roundToNearestMinute) {\n    suntime.add(30, 'seconds');\n    suntime.second(0);\n  }\n  suntime.tz(timezone);\n  return suntime;\n};\n\n/**\n * Returns 06:00/18:00 (07:00/19:00 during DST) if there is no sunrise or sunset\n * on the date. If returnTimeForPNMS is true, otherwise return whether there is\n * Polar Night or Midnight Sun.\n * @param {moment} returnDate The calculated time for sunrise or sunset.\n * @param {moment} date The original date from which the event was calculated.\n * @param {int} hour Hour to which the returned datetime should be set.\n * @returns {(moment|string)} Time given by parameter 'hour' (+ correction for\n *     DST if applicable) or a string indicating that the location experiences\n *     midnight sun ('MS') or polar night ('PN') on that date.\n */\nconst returnPNMS = function (returnDate, date, hour) {\n  if (returnTimeForPNMS) {\n    if (date.isDST()) {\n      hour += 1;\n    }\n    returnDate.tz(date.tz())\n      .year(date.year())\n      .month(date.month())\n      .date(date.date())\n      .hour(hour)\n      .minute(0)\n      .second(0);\n  }\n  return returnDate;\n};\n\n/**\n * Calculates the approximate local hour angle of the sun at sunrise or sunset.\n * @param {number} phi Latitude (see AA p102 Eq15.1).\n * @param {number} delta Apparent declination of the sun.\n * @returns {number} Approximate local hour angle.\n */\nconst approxLocalHourAngle = function (phi, delta) {\n  const cosH0 = (auxMath.sind(-50 / 60) -\n                auxMath.sind(phi) * auxMath.sind(delta)) /\n                (auxMath.cosd(phi) * auxMath.cosd(delta));\n  if (cosH0 < -1) {\n    if (returnTimeForPNMS) {\n      throw moment.tz('**2000-01-01 12:00:00', 'YYYY-MM-DD HH:mm:ss',\n        'Europe/London');\n    } else {\n      throw 'MS';\n    }\n  } else if (cosH0 > 1) {\n    if (returnTimeForPNMS) {\n      throw moment.tz('--2000-01-01 12:00:00', 'YYYY-MM-DD HH:mm:ss',\n        'Europe/London');\n    } else {\n      throw 'PN';\n    }\n  }\n  const H0 = auxMath.rad2deg(Math.acos(cosH0));\n  return H0;\n};\n\n/**\n * Normalizes a fractional time of day to be on the correct date.\n * @param {number} m Fractional time of day\n * @param {int} utcOffset Offset in minutes from UTC.\n * @returns {number} m Normalized m.\n */\nconst normalizeM = function (m, utcOffset) {\n  const localM = m + utcOffset / 1440;\n  if (localM < 0) {\n    return m + 1;\n  } else if (localM > 1) {\n    return m - 1;\n  }\n  return m;\n};\n\n/**\n * Calculates the correction for the solar transit time (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} Theta0 Apparent sidereal time at Greenwhich.\n * @param {number} DeltaT ΔT = TT − UT.\n * @param {number} L Longitude.\n * @param {number} m Fractional time of day of the event.\n * @returns {number} Currection for the solar transit time.\n */\nconst sunTransitCorrection = function (T, Theta0, DeltaT, L, m) {\n  const theta0 = Theta0 + 360.985647 * m;\n  const n = m + DeltaT / 864000;\n  const alpha = interpolatedRa(T, n);\n  const H = localHourAngle(theta0, L, alpha);\n  const DeltaM = -H / 360;\n  return DeltaM;\n};\n\n/**\n * Calculates the correction for the sunrise/sunset time (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} Theta0 Apparent sidereal time at Greenwhich.\n * @param {number} DeltaT ΔT = TT − UT.\n * @param {number} phi Latitude.\n * @param {number} L Longitude.\n * @param {number} m Fractional time of day of the event.\n * @returns {number} Currection for the sunrise/sunset time.\n */\nconst sunRiseSetCorrection = function (T, Theta0, DeltaT, phi, L, m) {\n  const theta0 = Theta0 + 360.985647 * m;\n  const n = m + DeltaT / 864000;\n  const alpha = interpolatedRa(T, n);\n  const delta = interpolatedDec(T, n);\n  const H = localHourAngle(theta0, L, alpha);\n  const h = altitude(phi, delta, H);\n  const DeltaM = (h + 50 / 60) /\n    (360 * auxMath.cosd(delta) * auxMath.cosd(phi) * auxMath.sind(H));\n  return DeltaM;\n};\n\n/**\n * Calculates the local hour angle of the sun (see AA p103).\n * @param {number} theta0 Sidereal time at Greenwhich in degrees.\n * @param {number} L Longitude.\n * @param {number} alpha Apparent right ascension of the sun.\n * @returns {number} Local hour angle of the sun.\n */\nconst localHourAngle = function (theta0, L, alpha) {\n  // Signflip for longitude\n  let H = auxMath.reduceAngle(theta0 + L - alpha);\n  if (H > 180) { H -= 360; }\n  return H;\n};\n\n/**\n * Calculates the altitude of the sun above the horizon (see AA P93 Eq13.6).\n * @param {number} phi Latitude.\n * @param {number} delta Apparent declination of the sun.\n * @param {number} H Local hour angle of the sun.\n * @returns {number} Altitude of the sun above the horizon.\n */\nconst altitude = function (phi, delta, H) {\n  const h = auxMath.rad2deg(Math.asin(\n    auxMath.sind(phi) * auxMath.sind(delta) +\n    auxMath.cosd(phi) * auxMath.cosd(delta) * auxMath.cosd(H)));\n  return h;\n};\n\n/**\n * Interpolates the sun's right ascension (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} n Fractional time of day of the event corrected by ΔT.\n * @returns {number} Interpolated right ascension.\n */\nconst interpolatedRa = function (T, n) {\n  const alpha1 = sunApparentRightAscension(T - (1 / 36525));\n  const alpha2 = sunApparentRightAscension(T);\n  const alpha3 = sunApparentRightAscension(T + (1 / 36525));\n  // I don't understand why the RA has to be interpolated with normalization\n  // but the Dec without, but the returned values are wrong otherwise...\n  const alpha = auxMath.interpolateFromThree(alpha1, alpha2, alpha3, n, true);\n  return auxMath.reduceAngle(alpha);\n};\n\n/**\n * Interpolates the sun's declination (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} n Fractional time of day of the event corrected by ΔT.\n * @returns {number} Interpolated declination.\n */\nconst interpolatedDec = function (T, n) {\n  const delta1 = sunApparentDeclination(T - (1 / 36525));\n  const delta2 = sunApparentDeclination(T);\n  const delta3 = sunApparentDeclination(T + (1 / 36525));\n  const delta = auxMath.interpolateFromThree(delta1, delta2, delta3, n);\n  return auxMath.reduceAngle(delta);\n};\n\n/**\n * Calculates the apparent right ascension of the sun (see AA p165 Eq25.6).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent right ascension of the sun.\n */\nconst sunApparentRightAscension = function (T) {\n  const Omega = moonAscendingNodeLongitude(T);\n  const epsilon = trueObliquityOfEcliptic(T) +\n                  0.00256 * auxMath.cosd(Omega);\n  const lambda = sunApparentLongitude(T);\n  const alpha = auxMath.rad2deg(Math.atan2(\n    auxMath.cosd(epsilon) * auxMath.sind(lambda), auxMath.cosd(lambda)));\n  return auxMath.reduceAngle(alpha);\n};\n\n/**\n * Calculates the apparent declination of the sun (see AA p165 Eq25.7).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent declination of the sun.\n */\nconst sunApparentDeclination = function (T) {\n  const Omega = moonAscendingNodeLongitude(T);\n  const epsilon = trueObliquityOfEcliptic(T) +\n                  0.00256 * auxMath.cosd(Omega);\n  const lambda = sunApparentLongitude(T);\n  const delta = auxMath.rad2deg(Math.asin(\n    auxMath.sind(epsilon) * auxMath.sind(lambda)));\n  return delta;\n};\n\n/**\n * Calculates the apparent sidereal time at Greenwhich (see AA p88).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent sidereal time at Greenwhich\n */\nconst apparentSiderealTimeGreenwhich = function (T) {\n  const theta0 = meanSiderealTimeGreenwhich(T);\n  const epsilon = trueObliquityOfEcliptic(T);\n  const DeltaPsi = nutationInLongitude(T);\n  const theta = theta0 + DeltaPsi * auxMath.cosd(epsilon);\n  return auxMath.reduceAngle(theta);\n};\n\n/**\n * Calculates the mean sidereal time at Greenwhich (see AA p88 Eq12.4).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean sidereal time at Greenwhich\n */\nconst meanSiderealTimeGreenwhich = function (T) {\n  const JD2000 = T * 36525;\n  const theta0 = 280.46061837 + 360.98564736629 * JD2000 + 0.000387933 * T * T -\n                 T * T * T / 38710000;\n  return theta0;\n};\n\n/**\n * Calculates the true obliquity of the ecliptic (see AA p147).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} True obliquity of the ecliptic.\n */\nconst trueObliquityOfEcliptic = function (T) {\n  const epsilon0 = meanObliquityOfEcliptic(T);\n  const DeltaEpsilon = nutationInObliquity(T);\n  const epsilon = epsilon0 + DeltaEpsilon;\n  return epsilon;\n};\n\n/**\n * Calculates the mean obliquity of the ecliptic (see AA p147 Eq 22.3).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean obliquity of the ecliptic.\n */\nconst meanObliquityOfEcliptic = function (T) {\n  const U = T / 100;\n  const epsilon0 = auxMath.polynomial(U, constants.meanObliquityOfEcliptic);\n  return epsilon0;\n};\n\n/**\n * Calculates the apparent longitude of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent longitude of the sun.\n */\nconst sunApparentLongitude = function (T) {\n  const Sol = sunTrueLongitude(T);\n  const Omega = moonAscendingNodeLongitude(T);\n  const lambda = Sol - 0.00569 - 0.00478 * auxMath.sind(Omega);\n  return lambda;\n};\n\n/**\n * Calculates the true longitude of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} True longitude of the sun.\n */\nconst sunTrueLongitude = function (T) {\n  const L0 = sunMeanLongitude(T);\n  const C = sunEquationOfCenter(T);\n  const Sol = L0 + C;\n  return Sol;\n};\n\n/**\n * Calculates the equation of center of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Equation of center of the sun.\n */\nconst sunEquationOfCenter = function (T) {\n  const M = sunMeanAnomaly(T);\n  const C = (1.914602 - 0.004817 * T - 0.000014 * T * T) * auxMath.sind(M) +\n            (0.019993 - 0.000101 * T) * auxMath.sind(2 * M) +\n            0.000290 * auxMath.sind(3 * M);\n  return C;\n};\n\n/**\n * Calculates the nutation in longitude of the sun (see AA p144ff).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Nutation in longitude of the sun.\n */\nconst nutationInLongitude = function (T) {\n  const D = moonMeanElongation(T);\n  const M = sunMeanAnomaly(T);\n  const MPrime = moonMeanAnomaly(T);\n  const F = moonArgumentOfLatitude(T);\n  const Omega = moonAscendingNodeLongitude(T);\n  let DeltaPsi = 0;\n  let sineArg;\n  for (let i = 0; i < 63; i++) {\n    sineArg = constants.nutations[i][0] * D +\n              constants.nutations[i][1] * M +\n              constants.nutations[i][2] * MPrime +\n              constants.nutations[i][3] * F +\n              constants.nutations[i][4] * Omega;\n    DeltaPsi += (constants.nutations[i][5] +\n                 constants.nutations[i][6] * T) * auxMath.sind(sineArg);\n  }\n  DeltaPsi /= 36000000;\n  return DeltaPsi;\n};\n\n/**\n * Calculates the nutation in obliquity of the sun (see AA p144ff).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Nutation in obliquity of the sun.\n */\nconst nutationInObliquity = function (T) {\n  const D = moonMeanElongation(T);\n  const M = sunMeanAnomaly(T);\n  const MPrime = moonMeanAnomaly(T);\n  const F = moonArgumentOfLatitude(T);\n  const Omega = moonAscendingNodeLongitude(T);\n  let DeltaEpsilon = 0;\n  let cosArg;\n  for (let i = 0; i < 63; i++) {\n    cosArg = constants.nutations[i][0] * D +\n             constants.nutations[i][1] * M +\n             constants.nutations[i][2] * MPrime +\n             constants.nutations[i][3] * F +\n             constants.nutations[i][4] * Omega;\n    DeltaEpsilon += (constants.nutations[i][7] +\n                     constants.nutations[i][8] * T) * auxMath.cosd(cosArg);\n  }\n  DeltaEpsilon /= 36000000;\n  return DeltaEpsilon;\n};\n\n/**\n * Calculates the argument of latitude of the moon (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Argument of latitude of the moon.\n */\nconst moonArgumentOfLatitude = function (T) {\n  const F = auxMath.polynomial(T, constants.moonArgumentOfLatitude);\n  return auxMath.reduceAngle(F);\n};\n\n/**\n * Calculates the longitude of the ascending node of the Moon's mean orbit on\n * the ecliptic, measured from the mean equinox of the datea (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Longitude of the asc. node of the moon's mean orbit.\n */\nconst moonAscendingNodeLongitude = function (T) {\n  const Omega = auxMath.polynomial(T, constants.moonAscendingNodeLongitude);\n  return auxMath.reduceAngle(Omega);\n};\n\n/**\n * Calculates the mean anomaly of the moon (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean anomaly of the moon.\n */\nconst moonMeanAnomaly = function (T) {\n  const MPrime = auxMath.polynomial(T, constants.moonMeanAnomaly);\n  return auxMath.reduceAngle(MPrime);\n};\n\n/**\n * Calculates the mean elongation of the moon from the sun (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean elongation of the moon from the sun.\n */\nconst moonMeanElongation = function (T) {\n  const D = auxMath.polynomial(T, constants.moonMeanElongation);\n  return auxMath.reduceAngle(D);\n};\n\n/**\n * Calculates the mean anomaly of the sun (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean anomaly of the sun.\n */\nconst sunMeanAnomaly = function (T) {\n  const M = auxMath.polynomial(T, constants.sunMeanAnomaly);\n  return auxMath.reduceAngle(M);\n};\n\n/**\n * Calculates the mean longitude of the sun referred to the mean equinox of the\n * date (see AA p163).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean longitude of the sun referred to the mean equinox of\n *     the date.\n */\nconst sunMeanLongitude = function (T) {\n  const L0 = auxMath.polynomial(T, constants.sunMeanLongitude);\n  return auxMath.reduceAngle(L0);\n};\n\nexport {sunRiseSet, sunTransit, returnPNMS};\n","import * as moonPhases from './moonPhases.js';\nimport * as sunTimes from './sunTimes.js';\nimport * as timeConversions from './timeConversions.js';\n\nlet roundToNearestMinute = false;\nlet returnTimeForPNMS = false;\nlet dateFormatKeys = {'**': '‡', '--': '†'};\n\n/**\n * Sets options (roundToNearestMinute, returnTimeForPNMS, dateFormatKey) for the\n * module.\n * @param {object} options Options to be set.\n */\nconst options = function (options) {\n  if (typeof options.roundToNearestMinute === 'boolean') {\n    roundToNearestMinute = options.roundToNearestMinute;\n  }\n  if (typeof options.returnTimeForPNMS === 'boolean') {\n    returnTimeForPNMS = options.returnTimeForPNMS;\n  }\n  if (typeof options.dateFormatKeys === 'object') {\n    dateFormatKeys = options.dateFormatKeys;\n  }\n};\n\n/**\n * Uses the extra information encoded into the moment object for dates without\n * a sunrise or sunset if returnTimeForPNMS is true to mark the output string.\n * @param {moment} datetime Input datetime.\n * @param {string} formatString Valid moment format string.\n * @returns {string} Formatted string with marker appended.\n */\nconst formatCI = function (datetime, formatString) {\n  const customKey = datetime.creationData().input.slice(0, 2);\n  let datestring = datetime.format(formatString);\n  if (dateFormatKeys[customKey]) {\n    datestring += dateFormatKeys[customKey];\n  }\n  return datestring;\n};\n\n/**\n * Calculates sunrise on the provided date.\n * @param {moment} datetime Datetime for which sunrise is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(moment|string)} Time of sunrise or a string indicating that the\n *     location experiences midnight sun ('MS') or polar night ('PN') on that\n *     date (unless returnTimeForPNMS is true).\n */\nconst sunrise = function (datetime, phi, L) {\n  let sunrise;\n  try {\n    sunrise = sunTimes.sunRiseSet(datetime, phi, L, 'RISE');\n  } catch (err) {\n    return sunTimes.returnPNMS(err, datetime, 6);\n  }\n  return sunrise;\n};\n\n/**\n * Calculates sunset on the provided date.\n * @param {moment} datetime Datetime for which sunset is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(moment|string)} Time of sunset or a string indicating that the\n *     location experiences midnight sun ('MS') or polar night ('PN') on that\n *     date (unless returnTimeForPNMS is true).\n */\nconst sunset = function (datetime, phi, L) {\n  let sunset;\n  try {\n    sunset = sunTimes.sunRiseSet(datetime, phi, L, 'SET');\n  } catch (err) {\n    return sunTimes.returnPNMS(err, datetime, 18);\n  }\n  return sunset;\n};\n\n/**\n * Calculates solar noon on the provided date.\n * @param {moment} datetime Datetime for which solar noon is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} L longitude of target location.\n * @returns {moment} Time of solar noon at the given longitude.\n */\nconst solarNoon = function (datetime, L) {\n  const transit = sunTimes.sunTransit(datetime, L);\n  return transit;\n};\n\n/**\n * Calculates all moons of the given phase that occur within the given\n * Gregorian calendar year.\n * @param {int} year Year for which moon phases should be calculated.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @param {string} timezone Optional: IANA timezone string.\n * @returns {array} Array of moment objects for moons of the given phase.\n */\nconst yearMoonPhases = function (year, phase, timezone) {\n  const yearBegin = moment([year]);\n  const yearEnd = moment([year + 1]);\n  // this will give us k for the first new moon of the year or earlier\n  let k = Math.floor(timeConversions.approxK(yearBegin)) - 1;\n  // taking 15 events will make sure we catch every event in the year\n  const phaseTimes = [];\n  let JDE;\n  let moonDatetime;\n  let DeltaT;\n  for (let i = 0; i < 15; i++) {\n    JDE = moonPhases.truePhase(k, phase);\n    // we pretend it's JD and not JDE\n    moonDatetime = timeConversions.JDToDatetime(JDE);\n    // now use that to calculate deltaT\n    DeltaT = timeConversions.DeltaT(moonDatetime);\n    if (DeltaT > 0) {\n      moonDatetime.subtract(Math.abs(DeltaT), 'seconds');\n    } else {\n      moonDatetime.add(Math.abs(DeltaT), 'seconds');\n    }\n    if (roundToNearestMinute) {\n      moonDatetime.add(30, 'seconds');\n      moonDatetime.second(0);\n    }\n    if (typeof timezone === 'undefined') {\n      timezone = 'UTC';\n    }\n    moonDatetime.tz(timezone);\n    if ((moonDatetime.isAfter(yearBegin)) && (moonDatetime.isBefore(yearEnd))) {\n      phaseTimes.push(moonDatetime);\n    }\n    k++;\n  }\n  return phaseTimes;\n};\n\nexport {options, formatCI, sunrise, sunset, solarNoon, yearMoonPhases,\n  roundToNearestMinute, returnTimeForPNMS};\n","const month = {\n  1: 'Bahá',\n  2: 'Jalál',\n  3: 'Jamál',\n  4: '‘Aẓamat',\n  5: 'Núr',\n  6: 'Raḥmat',\n  7: 'Kalimát',\n  8: 'Kamál',\n  9: 'Asmá’',\n  10: '‘Izzat',\n  11: 'Ma<u>sh</u>íyyat',\n  12: '‘Ilm',\n  13: 'Qudrat',\n  14: 'Qawl',\n  15: 'Masá’il',\n  16: '<u>Sh</u>araf',\n  17: 'Sulṭán',\n  18: 'Mulk',\n  19: '‘Alá’',\n  20: 'Ayyám-i-Há'\n};\n\nconst monthL = {\n  1: 'Splendour',\n  2: 'Glory',\n  3: 'Beauty',\n  4: 'Grandeur',\n  5: 'Light',\n  6: 'Mercy',\n  7: 'Words',\n  8: 'Perfection',\n  9: 'Names',\n  10: 'Might',\n  11: 'Will',\n  12: 'Knowledge',\n  13: 'Power',\n  14: 'Speech',\n  15: 'Questions',\n  16: 'Honour',\n  17: 'Sovereignty',\n  18: 'Dominion',\n  19: 'Loftiness',\n  20: 'Ayyám-i-Há'\n};\n\nconst holyDay = {\n  1: 'Naw-Rúz',\n  2: 'First day of Riḍván',\n  3: 'Ninth day of Riḍván',\n  4: 'Twelfth day of Riḍván',\n  5: 'Declaration of the Báb',\n  6: 'Ascension of Bahá’u’lláh',\n  7: 'Martyrdom of the Báb',\n  8: 'Birth of the Báb',\n  9: 'Birth of Bahá’u’lláh',\n  10: 'Day of the Covenant',\n  11: 'Ascension of ‘Abdu’l-Bahá'\n};\n\n// CAREFUL: Numbering corresponds to Badí' week, i.e. 1 is Jalál (-> Saturday)\nconst weekday = {\n  1: 'Jalál',\n  2: 'Jamál',\n  3: 'Kamál',\n  4: 'Fiḍál',\n  5: '‘Idál',\n  6: 'Istijlál',\n  7: 'Istiqlál'\n};\n\nconst weekdayAbbr3 = {\n  1: 'Jal',\n  2: 'Jam',\n  3: 'Kam',\n  4: 'Fiḍ',\n  5: '‘Idá',\n  6: 'Isj',\n  7: 'Isq'\n};\n\nconst weekdayAbbr2 = {\n  1: 'Jl',\n  2: 'Jm',\n  3: 'Ka',\n  4: 'Fi',\n  5: '‘Id',\n  6: 'Ij',\n  7: 'Iq'\n};\n\nconst weekdayL = {\n  1: 'Glory',\n  2: 'Beauty',\n  3: 'Perfection',\n  4: 'Grace',\n  5: 'Justice',\n  6: 'Majesty',\n  7: 'Independence'\n};\n\nconst yearInVahid = {\n  1: 'Alif',\n  2: 'Bá’',\n  3: 'Ab',\n  4: 'Dál',\n  5: 'Báb',\n  6: 'Váv',\n  7: 'Abad',\n  8: 'Jád',\n  9: 'Bahá',\n  10: 'Ḥubb',\n  11: 'Bahháj',\n  12: 'Javáb',\n  13: 'Aḥad',\n  14: 'Vahháb',\n  15: 'Vidád',\n  16: 'Badí‘',\n  17: 'Bahí',\n  18: 'Abhá',\n  19: 'Váḥid'\n};\n\nconst BE = 'BE';\nconst badiCalendar = 'Badí‘ Calendar';\n\nexport {month, monthL, holyDay, weekday, weekdayAbbr3, weekdayAbbr2, weekdayL,\n  yearInVahid, BE, badiCalendar};\n","/* eslint-disable dot-notation, line-comment-position, camelcase, sort-imports */\nimport * as en from './locale/en.js';\nimport * as ar from './locale/ar.js';\nimport * as de from './locale/de.js';\nimport * as es from './locale/es.js';\nimport * as fa from './locale/fa.js';\nimport * as fr from './locale/fr.js';\nimport * as lv from './locale/lv.js';\nimport * as nl from './locale/nl.js';\nimport * as pt from './locale/pt.js';\nimport * as ru from './locale/ru.js';\nimport * as sv from './locale/sv.js';\nimport * as zh from './locale/zh.js';\nimport * as en_us from './locale/en-us.js';\n\nconst badiLocale = {};\nbadiLocale['en'] = en;\nbadiLocale['ar'] = ar;\nbadiLocale['de'] = de;\nbadiLocale['es'] = es;\nbadiLocale['fa'] = fa;\nbadiLocale['fr'] = fr;\nbadiLocale['lv'] = lv;\nbadiLocale['nl'] = nl;\nbadiLocale['pt'] = pt;\nbadiLocale['ru'] = ru;\nbadiLocale['sv'] = sv;\nbadiLocale['zh'] = zh;\nbadiLocale['en-us'] = en_us;\n\n/**\n * Set default language for localization. If the language doesn't exist,\n * nothing is changed.\n * @param {string} language that should be set as default\n */\nconst setDefaultLanguage = function (language) {\n  if (typeof badiLocale[language] === 'undefined') {\n    // eslint-disable-next-line no-console\n    console.log('Chosen language does not exist. Setting has not been changed');\n  } else {\n    badiLocale['default'] = badiLocale[language];\n  }\n};\n\nexport {badiLocale, setDefaultLanguage};\n","const badiYears = [\n  'l4da', 'k4ci', 'k5c7', 'l4d6', 'l4ce', 'k4c4', 'k5d4', 'l4cb', 'l4c1',\n  'k4cj', 'k5c8', 'l4d7', 'l4cf', 'k4c5', 'k4d5', 'k5ce', 'l4c2', 'k4d2',\n  'k4ca', 'k5da', 'l4ch', 'k4c6', 'k4d6', 'k5cf', 'l4c4', 'k4d4', 'k4cc',\n  'k5c1', 'l4cj', 'k4c8', 'k4d8', 'k5cg', 'l4c5', 'k4d5', 'k4ce', 'k5c3',\n  'l4d2', 'k4ca', 'k4d9', 'k5ci', 'l4c6', 'k4d6', 'k4cf', 'k4c4', 'k5d4',\n  'k4cb', 'k4bj', 'k4cj', 'k5c9', 'k4d8', 'k4cg', 'k4c6', 'k5d6', 'k4cd',\n  'k4c2', 'k4d2', 'k5ca', 'k4d9', 'k4ci', 'k4c7', 'k5d7', 'k4cf', 'k4c4',\n  'k4d4', 'k5cc', 'k4bj', 'k4cj', 'k4c9', 'k5d9', 'k4cg', 'k4c6', 'k4d5',\n  'k5cd', 'k4c2', 'k4d1', 'k4ca', 'k4da', 'j5cj', 'k4c7', 'k4d7', 'k4cf',\n  'j5c4', 'k4d3', 'k4cb', 'k4c1', 'k5d1', 'l4c9', 'l4d9', 'l4ch', 'k5c6',\n  'l4d5', 'l4cd', 'l4c2', 'k5d2', 'l4ca', 'l4da', 'l4cj', 'k5c8', 'l4d7',\n  'l4cf', 'l4c4', 'k5d4', 'l4cb', 'l4c1', 'l4d1', 'k5c9', 'l4d8', 'l4cg',\n  'l4c5', 'k4d5', 'k5ce', 'l4c2', 'l4d2', 'k4cb', 'k5db', 'l4ci', 'l4c7',\n  'k4d7', 'k5cf', 'l4c4', 'l4d4', 'k4cc', 'k5c2', 'l4d1', 'l4c9', 'k4d9',\n  'k5ch', 'l4c5', 'l4d5', 'k4ce', 'k5c3', 'l4d2', 'l4cb', 'k4da', 'k5ci',\n  'l4c6', 'l4d6', 'k4cf', 'k5c5', 'l4d4', 'l4cc', 'k4c1', 'k4d1', 'k5c9',\n  'l4d8', 'k4cg', 'k4c6', 'k5d6', 'l4ce', 'k4c3', 'k4d3', 'k5cb', 'l4da',\n  'k4ci', 'k4c7', 'k5d7', 'l4cf', 'k4c5', 'k4d5', 'k5cd', 'l4c1', 'k4cj',\n  'k4c9', 'k5d9', 'l4cg', 'k4c6', 'k4d6', 'k5ce', 'l4c3', 'k4d2', 'k4ca',\n  'k5bj', 'l4ci', 'k4c7', 'k4d7', 'k4cg', 'k5c5', 'k4d4', 'k4cc', 'k4c1',\n  'k5d1', 'k4c9', 'k4d9', 'k4ch', 'k5c7', 'l4d6', 'l4ce', 'l4c3', 'l5d3',\n  'l4ca', 'l4da', 'l4cj', 'l5c8', 'l4d7', 'l4cg', 'l4c5', 'l5d4', 'l4cb',\n  'l4c1', 'l4d1', 'l5ca', 'l4d9', 'l4ch', 'l4c6', 'l5d6', 'l4cd', 'l4c2',\n  'l4d2', 'l4cb', 'k5c1', 'l4cj', 'l4c8', 'l4d8', 'k5cg', 'l4c4', 'l4d4',\n  'l4cc', 'k5c2', 'l4d1', 'l4ca', 'l4da', 'k5ci', 'l4c6', 'l4d5', 'l4ce',\n  'k5c3', 'l4d2', 'l4cb', 'l4db', 'k5cj', 'l4c8', 'l4d7', 'l4cf', 'k5c5',\n  'l4d4', 'l4cc', 'l4c2', 'k5d2', 'l4c9', 'l4d9', 'l4ch', 'k4c6', 'k5d6',\n  'l4ce', 'l4c3', 'k4d3', 'k5cc', 'l4db', 'l4cj', 'k4c8', 'k5d8', 'l4cf',\n  'l4c4', 'k4d5', 'k5cd', 'l4c2', 'l4d2', 'k4ca', 'k5d9', 'l4cg', 'l4c6',\n  'k4d6', 'k5cf', 'l4c3', 'l4d3', 'k4cb', 'k5bj', 'l4ci', 'l4c7', 'k4d7',\n  'k5cg', 'l4c5', 'l4d5', 'k4cd', 'k4c2', 'k5d2', 'l4c9', 'k4d9', 'k4ch',\n  'k5c7', 'l4d6', 'k4cf', 'k4c4', 'k5d4', 'l4cb', 'l4bj', 'l4cj', 'l5c8',\n  'm4d7', 'l4cg', 'l4c5', 'l5d5', 'm4cc', 'l4c1', 'l4d1', 'l5ca', 'm4d9',\n  'l4ch', 'l4c7', 'l5d7', 'm4ce', 'l4c3', 'l4d3', 'l5cb', 'm4bi', 'l4ci',\n  'l4c8', 'l4d8', 'l5ch', 'l4c5', 'l4d5', 'l4cd', 'l5c2', 'l4d1', 'l4c9',\n  'l4da', 'l5ci', 'l4c7', 'l4d7', 'l4cf', 'l5c4', 'l4d2', 'l4cb', 'l4bj',\n  'l5d1', 'l4c8', 'l4d8', 'l4cg', 'l5c5', 'l4d4', 'l4cc', 'l4c2', 'l5d2',\n  'l4c9', 'l4da', 'l4ci'];\n\nexport {badiYears};\n","import {badiLocale, setDefaultLanguage} from './badiLocale.js';\nimport {badiYears} from './badiYears.js';\n\n/**\n * A date in the Badí' calendar.\n */\nclass BadiDate {\n  /**\n   * Accepts a number of different sets of arguments for instantiation: JS Date\n   * object, moment object, ISO 8601 date string, Badí' date string in the\n   * format 'year-month-day' or 'year-holyDayNumber' and array in the format\n   * [year, month, day] or [year, holyDayNumber] where holyDayNumber is a number\n   * between 1 (Naw-Rúz) and 11 (Ascension of 'Abdu'l-Bahá).\n   * @param {(Date|moment|string|Array)} date input date\n   */\n  constructor(date) { // eslint-disable-line complexity\n    this._gregDate = 0;\n    this._badiYear = 0;\n    this._badiMonth = 0;\n    this._badiDate = 0;\n    this._nawRuz = 0;\n    this._ayyamiHaLength = 0;\n    this._yearTB = [];\n    this._holyDay = false;\n    this._valid = true;\n\n    if (date instanceof Date) {\n      this.gregDate = moment.utc(\n        [date.getFullYear(), date.getMonth(), date.getDate(), 12]);\n    } else if (date instanceof moment) {\n      this._gregDate = moment.utc([date.year(), date.month(), date.date(), 12]);\n    } else if (typeof date === 'string') {\n      const dateArray = this._parseBadiDateString(date);\n      if (dateArray) {\n        this._setFromBadiDate(dateArray);\n      // Looks like the input was a Gregorian datestring\n      } else {\n        // Attempt to handle a malformed string which moment complains about but\n        // Date makes a best guess at.\n        const tempDate = new Date(date);\n        this._gregDate = moment.utc([tempDate.getFullYear(),\n          tempDate.getMonth(), tempDate.getDate(), 12]);\n        // Check if it's before 1 BE or after 356 BE (which we can't handle)\n        if (this._notInValidGregRange(this._gregDate)) {\n          this._setInvalid();\n        }\n      }\n    } else if (date.constructor === Array) {\n      if (date.length !== 3 && date.length !== 2) {\n        this._setInvalid();\n      } else {\n        this._setFromBadiDate(date);\n      }\n    }\n    if (this._badiYear === 0) {\n      // We haven't set the Badí' date yet\n      this._setFromGregorianDate();\n    }\n    if (this._valid) {\n      this._setHolyDay();\n    }\n  }\n\n  /**\n   * Formats the output as defined by the given format string\n   * The following tokens are accepted:\n   * d - day of month without leading zeroes\n   * dd - day of month with leading zeroes\n   * D - day of month as 3-letter (+ apostrophes) abbreviation of translit.\n   * DD - full day of month transliteration\n   * DDL - full day of month translation\n   * DD+ - full day of month transliteration (translation)\n   * m, mm, M, MM, MML, MM+ - same as days\n   * ww - day of week, two letter abbreviation (Jl, Jm, Ka, Fi, 'Id, Ij, Iq)\n   * W - day of week, 3 letter abbreviation (Jal, Jam, Kam, Fiḍ, 'Idá, Isj, Isq)\n   * WW - day of week, full name\n   * WWL - day of week, full name translation\n   * yv - year in vahid without leading zeroes\n   * yyv - year in vahid with leading zeroes\n   * YV - year in vahid full transliteration\n   * v - vahid without leading zeroes\n   * vv - vahid with leading zeroes\n   * k - Kull-i-Shay without leading zeroes\n   * kk - Kull-i-Shay with leading zeroes\n   * y - year without leading zeroes\n   * yy - 3 digit year with leading zeroes\n   * Anything in between {} will be printed as is.\n   * @param {string} formatString gives the output format (see reference above)\n   * @param {string} language output language (subject to fallbacks)\n   * @returns {string} date formatted according to inputs\n   */\n  format(formatString, language) { // eslint-disable-line complexity\n    if (!this.isValid()) {\n      return 'Not a valid date';\n    }\n    const formatTokens = [\n      ['DDL', 'DD+', 'MML', 'MM+', 'WWL', 'yyv'],\n      ['dd', 'DD', 'mm', 'MM', 'ww', 'WW', 'yv', 'YV', 'vv', 'kk', 'yy', 'BE'],\n      ['d', 'D', 'm', 'M', 'W', 'v', 'k', 'y']];\n    if (typeof language === 'undefined' ||\n        typeof badiLocale[language] === 'undefined') {\n      // eslint-disable-next-line dot-notation\n      if (typeof badiLocale['default'] === 'undefined') {\n        language = 'en';\n      } else {\n        language = 'default';\n      }\n    }\n    if (typeof formatString === 'undefined') {\n      formatString = 'd MM+ y BE';\n    } else if (typeof formatString !== 'string') {\n      return 'Invalid formatting string.';\n    }\n    let returnString = '';\n    const length = formatString.length;\n    for (let i = 0; i < length; i++) {\n      // Text wrapped in {} is output as-is. A '{' without a matching '}'\n      // results in invalid input\n      if (formatString.charAt(i) === '{' && i < length - 1) {\n        for (let j = i + 1; j <= length; j++) {\n          if (j === length) {\n            return 'Invalid formatting string.';\n          }\n          if (formatString.charAt(j) === '}') {\n            i = j;\n            break;\n          }\n          returnString += formatString.charAt(j);\n        }\n      } else {\n        const next1 = formatString.charAt(i);\n        const next2 = next1 + formatString.charAt(i + 1);\n        const next3 = next2 + formatString.charAt(i + 2);\n        // First check for match to 3-symbol token, then 2, then 1\n        // (Tokens are not uniquely decodable)\n        if (formatTokens[0].indexOf(next3) > -1) {\n          returnString += this._getFormatItem(next3, language);\n          i += 2;\n        } else if (formatTokens[1].indexOf(next2) > -1) {\n          returnString += this._getFormatItem(next2, language);\n          i += 1;\n        } else if (formatTokens[2].indexOf(next1) > -1) {\n          returnString += this._getFormatItem(next1, language);\n        } else {\n          returnString += next1;\n        }\n      }\n    }\n    return returnString;\n  }\n\n  /**\n   * Retrieve the appropriate output for a given formatting token and language.\n   * @param {string} token identifying the date component for output\n   * @param {string} language output language\n   * @returns {string} localized output string in desired language (or fallback)\n   */\n  _getFormatItem(token, language) { // eslint-disable-line complexity\n    // ES6 is a bit funny with the scope of let in a switch\n    let day, month, monthL;\n    switch (token) {\n      // Single character tokens\n      case 'd':\n        return String(this._badiDay);\n      case 'D':\n        day = this._formatItemFallback(language, 'month', this._badiDay);\n        if (day.substring(4, 5) === '’' && day.substring(0, 1) === '‘') {\n          return day.substring(0, 5);\n        } else if (day.substring(0, 1) === '‘') {\n          return day.replace(/<(?:.|\\n)*?>/gm, '').substring(0, 4);\n        }\n        return day.replace(/<(?:.|\\n)*?>/gm, '').substring(0, 3);\n      case 'm':\n        return String(this._badiMonth);\n      case 'M':\n        month = this._formatItemFallback(\n          language, 'month', this._badiMonth);\n        if (month.substring(4, 5) === '’' && month.substring(0, 1) === '‘') {\n          return month.substring(0, 5);\n        } else if (month.substring(0, 1) === '‘') {\n          return month.replace(/<(?:.|\\n)*?>/gm, '').substring(0, 4);\n        }\n        return month.replace(/<(?:.|\\n)*?>/gm, '').substring(0, 3);\n      case 'W':\n        return this._formatItemFallback(\n          language, 'weekdayAbbbr3', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'y':\n        return String(this._badiYear);\n      case 'v':\n        return String((Math.floor((this._badiYear - 1) / 19) % 19) + 1);\n      case 'k':\n        return String(Math.floor((this._badiYear - 1) / 361) + 1);\n      // Two character tokens\n      case 'dd':\n        return ('0' + String(this._badiDay)).slice(-2);\n      case 'DD':\n        return this._formatItemFallback(language, 'month', this._badiDay);\n      case 'mm':\n        return ('0' + String(this._badiMonth)).slice(-2);\n      case 'MM':\n        return this._formatItemFallback(language, 'month', this._badiMonth);\n      case 'ww':\n        return this._formatItemFallback(\n          language, 'weekdayAbbr2', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'WW':\n        return this._formatItemFallback(\n          language, 'weekday', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'yy':\n        return ('00' + String(this._badiYear)).slice(-3);\n      case 'yv':\n        return String((this._badiYear - 1) % 19 + 1);\n      case 'YV':\n        return this._formatItemFallback(\n          language, 'yearInVahid', (this._badiYear - 1) % 19 + 1);\n      case 'vv':\n        return ('0' + String((Math.floor(\n          (this._badiYear - 1) / 19) + 2) % 19 - 1)).slice(-2);\n      case 'kk':\n        return ('0' + String(Math.floor(\n          (this._badiYear - 1) / 361) + 1)).slice(-2);\n      case 'BE':\n        return this._formatItemFallback(language, 'BE');\n      // Three character tokens\n      case 'DDL':\n        return this._formatItemFallback(language, 'monthL', this._badiDay);\n      case 'DD+':\n        return this._formatItemFallback(language, 'month', this._badiDay) +\n          ' (' + this._formatItemFallback(language, 'monthL', this._badiDay) +\n          ')';\n      case 'MML':\n        return this._formatItemFallback(language, 'monthL', this._badiMonth);\n      case 'MM+':\n        month = this._formatItemFallback(\n          language, 'month', this._badiMonth);\n        monthL = this._formatItemFallback(\n          language, 'monthL', this._badiMonth);\n        if (month === monthL) {\n          return month;\n        }\n        return month + ' (' + monthL + ')';\n      case 'WWL':\n        return this._formatItemFallback(\n          language, 'weekdayL', (this._gregDate.isoWeekday() + 1) % 7 + 1);\n      case 'yyv':\n        return ('0' + String((this._badiYear - 1) % 19 + 1)).slice(-2);\n      default:\n        return '';\n    }\n  }\n\n  /**\n   * Determine the next language in the fallback order:\n   * regional variant -> primary language -> default language -> English\n   * @param {string} languageCode of the language for which fallback is needed\n   * @returns {string} next item in fallback order\n   */\n  _languageFallback(languageCode) {\n    if (languageCode.indexOf('-') > -1) {\n      return languageCode.split('-')[0];\n    // eslint-disable-next-line no-negated-condition\n    } else if (languageCode !== 'default') {\n      return 'default';\n    }\n    return 'en';\n  }\n\n  /**\n   * Retrieve element from localization with fallback\n   * @param {string} language output language (subject to fallbacks)\n   * @param {string} category group of localization elements (e.g. 'holyDay')\n   *                 or label for single items such as 'BE'\n   * @param {int} index of desired item in category, always 1-indexed\n   * @returns {string} localized output string\n   */\n  _formatItemFallback(language, category, index) {\n    if (typeof index === 'undefined') {\n      while (typeof badiLocale[language] === 'undefined' ||\n             typeof badiLocale[language][category] === 'undefined') {\n        language = this._languageFallback(language);\n      }\n      return badiLocale[language][category];\n    }\n    while (typeof badiLocale[language] === 'undefined' ||\n           typeof badiLocale[language][category] === 'undefined' ||\n           typeof badiLocale[language][category][index] === 'undefined') {\n      language = this._languageFallback(language);\n    }\n    return badiLocale[language][category][index];\n  }\n\n  /**\n   * Check whether a string supplied to the constructor describes a valid Badí'\n   * date, either as year-month-day or year-holyDay and if yes, return an array\n   * of date components.\n   * @param {string} dateString Badí' date in string format\n   * @returns {(array|false)} array consisting of the Badí' date components\n   *                          (either [year, month, day] or\n   *                          [year, holyDayNumber]) or false\n   */\n  _parseBadiDateString(dateString) { // eslint-disable-line complexity\n    const dateComponents = dateString.split('-');\n    // Are all components numerical\n    for (let i = 0; i < dateComponents.length; i++) {\n      if (!(/^\\d+$/.test(dateComponents[i]))) {\n        return false;\n      }\n      dateComponents[i] = parseInt(dateComponents[i], 10);\n    }\n    // If only two numbers are supplied, the second designates a Holy Day and\n    // must be between 1 and 11\n    if (dateComponents.length !== 3) {\n      if (dateComponents.length === 2 && dateComponents[1] > 0 &&\n          dateComponents[1] < 12) {\n        return dateComponents;\n      }\n      return false;\n    }\n    // Are the month and day numbers in sensible ranges?\n    // We call Ayyám-i-Há month 20\n    if (dateComponents[1] > 20 || dateComponents[1] < 1) {\n      return false;\n    }\n    if (dateComponents[2] > 19 || dateComponents[2] < 1) {\n      return false;\n    }\n    return dateComponents;\n  }\n\n  /**\n   * Check whether a moment object is within the valid range of dates.\n   * @param {moment} datetime date to be checked\n   * @returns {bool} whether the provided datetime is within the valid range\n   */\n  _notInValidGregRange(datetime) {\n    if (datetime.isBefore(moment.utc('1844-03-21')) ||\n        datetime.isAfter(moment.utc('2351-03-20'))) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Generate date from input corresponding to a Gregorian date.\n   */\n  _setFromGregorianDate() {\n    if (this._notInValidGregRange(this._gregDate)) {\n      this._setInvalid();\n      return;\n    }\n    const gregYear = this._gregDate.year();\n    if (this._gregDate.isBefore(moment.utc('2015-03-21'))) {\n      // Old implementation for day before Naw-Rúz 172\n      if (this._gregDate.isBefore(gregYear + '-03-21')) {\n        this._nawRuz = moment.utc((gregYear - 1).toString() + '-03-21');\n        this._badiYear = gregYear - 1844;\n      } else {\n        this._nawRuz = moment.utc(gregYear.toString() + '-03-21');\n        this._badiYear = gregYear - 1843;\n      }\n      this._setOldAyyamiHaLength();\n      this._yearTB = [12, 5, 13, 9];\n    } else {\n      // New implementation\n      this._badiYear = gregYear - 1843;\n      this._setBadiYearInfo(true);\n    }\n    // Now need to set Badí' month and date from the gregorian date\n    this._setBadiMonthDay();\n  }\n\n  /**\n   * Set Badí' month and day from Gregorian date\n   */\n  _setBadiMonthDay() {\n    const dayOfBadiYear = this._dayOfYear(this._gregDate);\n    if (dayOfBadiYear < 343) {\n      this._badiMonth = Math.floor((dayOfBadiYear - 1) / 19 + 1);\n      this._badiDay = (dayOfBadiYear - 1) % 19 + 1;\n    } else if (dayOfBadiYear < 343 + this._ayyamiHaLength) {\n      this._badiMonth = 20;\n      this._badiDay = dayOfBadiYear - 342;\n    } else {\n      this._badiMonth = 19;\n      this._badiDay = dayOfBadiYear - (342 + this._ayyamiHaLength);\n    }\n  }\n\n  /**\n   * Generate date from input that supplied the Badí' year and either Badí'\n   * month and day or a Holy Day number.\n   * @param {array} dateArray Badí' date either given in the form\n   *                          [year, month, day] or [year, holyDayNumber]\n   */\n  _setFromBadiDate(dateArray) { // eslint-disable-line complexity\n    this._badiYear = parseInt(dateArray[0], 10);\n    // Are we in the valid range?\n    if (this._badiYear < 1 || this._badiYear > 507) {\n      this._setInvalid();\n      return;\n    } else if (this._badiYear < 172) {\n      // Old implementation for dates before Naw-Rúz 172\n      this._nawRuz = moment.utc([1843 + this._badiYear, 2, 21]);\n      this._setOldAyyamiHaLength();\n      this._yearTB = [12, 5, 13, 9];\n    } else {\n      // New implementation\n      this._setBadiYearInfo();\n    }\n    // If all three components exist, we have a year, month, and day\n    // eslint-disable-next-line no-negated-condition\n    if (typeof dateArray[2] !== 'undefined') {\n      this._badiMonth = parseInt(dateArray[1], 10);\n      this._badiDay = parseInt(dateArray[2], 10);\n      if (this._badiMonth === 20 && this._badiDay > this._ayyamiHaLength) {\n        // If only off by one day, we'll bubble up so that 5th Ayyám-i-Há in a\n        // year with only 4 days of Ayyám-i-Há can be salvaged\n        if (this._badiDay - this._ayyamiHaLength === 1) {\n          this._badiMonth = 19;\n          this._badiDay = 1;\n        } else {\n          this._setInvalid();\n        }\n      }\n    // Otherwise input designated a Holy Day\n    } else {\n      const holyDayNum = parseInt(dateArray[1], 10);\n      switch (holyDayNum) {\n        case 1:\n          // Naw-Rúz\n          this._badiMonth = 1;\n          this._badiDay = 1;\n          break;\n        case 2:\n          // First Day of Ridván\n          this._badiMonth = 2;\n          this._badiDay = 13;\n          break;\n        case 3:\n          // Ninth Day of Ridván\n          this._badiMonth = 3;\n          this._badiDay = 2;\n          break;\n        case 4:\n          // Twelfth Day of Ridván\n          this._badiMonth = 3;\n          this._badiDay = 5;\n          break;\n        case 5:\n          // Declaration of the Báb\n          this._badiMonth = 4;\n          this._badiDay = 8;\n          if (this._badiYear < 172) {\n            // Date was different in old implementation\n            this._badiDay = 7;\n          }\n          break;\n        case 6:\n          // Ascension of Bahá'u'lláh\n          this._badiMonth = 4;\n          this._badiDay = 13;\n          break;\n        case 7:\n          // Martyrdom of the Báb\n          this._badiMonth = 6;\n          this._badiDay = 17;\n          if (this._badiYear < 172) {\n            // Date was different in old implementation\n            this._badiDay = 16;\n          }\n          break;\n        case 8:\n          // Birth of the Báb\n          this._badiMonth = this._yearTB[0];\n          this._badiDay = this._yearTB[1];\n          break;\n        case 9:\n          // Birth of Bahá'u'lláh\n          this._badiMonth = this._yearTB[2];\n          this._badiDay = this._yearTB[3];\n          break;\n        case 10:\n          // Day of the Covenant\n          this._badiMonth = 14;\n          this._badiDay = 4;\n          break;\n        case 11:\n          // Ascension of 'Abdu'l-Bahá\n          this._badiMonth = 14;\n          this._badiDay = 6;\n          break;\n        default:\n          this._setInvalid();\n          return;\n      }\n    }\n    // Finally we set the Gregorian date for this Badí' date\n    const dayOfGregYear = this._nawRuz.diff(\n      moment.utc([this._badiYear + 1843]), 'days') +\n      this._dayOfYear([this._badiYear, this._badiMonth, this._badiDay]);\n    this._gregDate = moment.utc([this._badiYear + 1843]);\n    // Bubbles up to next year if necessary\n    this._gregDate.dayOfYear(dayOfGregYear);\n    this._gregDate.hour(12);\n  }\n\n  /**\n   * Set the length of Ayyám-i-Há for dates before the new implementation.\n   */\n  _setOldAyyamiHaLength() {\n    if (moment([this._nawRuz.year() + 1]).isLeapYear()) {\n      this._ayyamiHaLength = 5;\n    } else {\n      this._ayyamiHaLength = 4;\n    }\n  }\n\n  /**\n   * Set year parameters for the given year.\n   * @param {bool} fromGregDate whether we are generating the date object from\n   *                            a Gregorian date\n   */\n  _setBadiYearInfo(fromGregDate) {\n    let yearData = this._extractBadiYearInfo();\n    if (fromGregDate === true &&\n        this._gregDate.isBefore(moment.utc(yearData.NR))) {\n      this._badiYear -= 1;\n      yearData = this._extractBadiYearInfo();\n    }\n    this._nawRuz = moment.utc(yearData.NR);\n    this._ayyamiHaLength = yearData.aHL;\n    this._yearTB = yearData.TB;\n  }\n\n  /**\n   * Unpack the info for the Badí' year from the base36 encoded version.\n   * @returns {object} Object containing the date of Naw-Rúz, the length of\n   *                   Ayyám-i-Há, and an array containing month, day, month,\n   *                   day of the Twin Holy Days\n   */\n  _extractBadiYearInfo() {\n    let yearData = {};\n    // Check whether data needs to be unpacked or exists in the verbose version\n    if (badiYears[0] === 'l4da') {\n      const components = badiYears[this._badiYear - 172].split('');\n      yearData.NR = String(this._badiYear - 172 + 2015) + '-03-' +\n                    String(parseInt(components[0], 36));\n      yearData.aHL = parseInt(components[1], 36);\n      const TB1 = [parseInt(components[2], 36), parseInt(components[3], 36)];\n      const TB2 = TB1[1] < 19 ? [TB1[0], TB1[1] + 1] : [TB1[0] + 1, 1];\n      yearData.TB = [TB1[0], TB1[1], TB2[0], TB2[1]];\n    } else {\n      yearData = badiYears[this._badiYear];\n    }\n    return yearData;\n  }\n\n  /**\n   * Get the days since Naw-Rúz (NR itself is '1') of the Badí' or Gregorian\n   * date provided.\n   * @param {(array|moment)} date Badí' date in the form [year, month, day]\n   *                         or moment\n   * @returns {int} 1-indexed number of the day in the Badí' year\n   */\n  _dayOfYear(date) {\n    let numDays = 0;\n    if (date.constructor === Array) {\n      // We have a Badí' date\n      if (date[1] < 19) {\n        numDays = 19 * (date[1] - 1) + date[2];\n      } else if (date[1] === 20) {\n        numDays = 342 + date[2];\n      } else if (date[1] === 19) {\n        numDays = 342 + this._ayyamiHaLength + date[2];\n      }\n    } else {\n      numDays = date.diff(this._nawRuz, 'days') + 1;\n    }\n    return numDays;\n  }\n\n  /**\n   * Set the member variables to invalid values.\n   */\n  _setInvalid() {\n    this._gregDate = moment.utc('0000-00-00');\n    this._badiYear = -1;\n    this._badiMonth = -1;\n    this._badiDay = -1;\n    this._ayyamiHaLength = -1;\n    this._nawRuz = moment.utc('0000-00-00');\n    this._valid = false;\n  }\n\n  /**\n   * If the date is a Holy Day, assign it\n   */\n  _setHolyDay() { // eslint-disable-line complexity\n    // First the dates that haven't changed with the new implementation\n    if (this._badiMonth === 1 && this._badiDay === 1) {\n      // Naw-Rúz\n      this._holyDay = 1;\n    } else if (this._badiMonth === 2 && this._badiDay === 13) {\n      // First Day of Ridván\n      this._holyDay = 2;\n    } else if (this._badiMonth === 3 && this._badiDay === 2) {\n      // Ninth Day of Ridván\n      this._holyDay = 3;\n    } else if (this._badiMonth === 3 && this._badiDay === 5) {\n      // Twelfth Day of Ridván\n      this._holyDay = 4;\n    } else if (this._badiMonth === 4 && this._badiDay === 13) {\n      // Ascension of Bahá'u'lláh\n      this._holyDay = 6;\n    } else if (this._badiMonth === 14 && this._badiDay === 4) {\n      // Day of the Covenant\n      this._holyDay = 10;\n    } else if (this._badiMonth === 14 && this._badiDay === 6) {\n      // Ascension of 'Abdu'l-Bahá\n      this._holyDay = 11;\n    }\n    // Twin birthdays are set in the instance at this point regardless of\n    // implementation\n    if (this._badiMonth === this._yearTB[0] &&\n        this._badiDay === this._yearTB[1]) {\n      // Birth of the Báb\n      this._holyDay = 8;\n    } else if (this._badiMonth === this._yearTB[2] &&\n               this._badiDay === this._yearTB[3]) {\n      // Birth of Bahá'u'lláh\n      this._holyDay = 9;\n    }\n    // Finally the two dates that have changed by one day\n    if (this._badiYear < 172) {\n      if (this._badiMonth === 4 && this._badiDay === 7) {\n        // Declaration of the Báb\n        this._holyDay = 5;\n      } else if (this._badiMonth === 6 && this._badiDay === 16) {\n        // Martyrdom of the Báb\n        this._holyDay = 7;\n      }\n    } else if (this._badiMonth === 4 && this._badiDay === 8) {\n      // Declaration of the Báb\n      this._holyDay = 5;\n    } else if (this._badiMonth === 6 && this._badiDay === 17) {\n      // Martyrdom of the Báb\n      this._holyDay = 7;\n    }\n  }\n\n  /**\n   * Get the name of the Holy Day (if any) in the given language (using\n   * localization fallbacks as necessary).\n   * @param {string} language Optional language for the return string\n   *                 (subject to language fallback)\n   * @returns {(string|false)} Name of the Holy Day in the given (or fallback)\n   *                           language, or false.\n   */\n  holyDay(language) {\n    if (!this._holyDay) {\n      return false;\n    }\n    return this._formatItemFallback(language, 'holyDay', this._holyDay);\n  }\n\n  /**\n   * Check whether this is a valid date (i.e. created from valid input).\n   * @returns {bool} whether this is a valid date.\n   */\n  isValid() {\n    return this._valid;\n  }\n\n  /**\n   * Get the Badí' day as a number.\n   * @returns {int} number of the day in the Badí' month (between 1 and 19)\n   */\n  badiDay() {\n    return this._badiDay;\n  }\n\n  /**\n   * Get the Badí' month as a number.\n   * @returns {int} number of the Badí' month (between 1 and 20 where 20 is\n   *                Ayyám-i-Há\n   */\n  badiMonth() {\n    return this._badiMonth;\n  }\n\n  /**\n   * Get the Badí' year.\n   * @returns {int} number of the Badí' year.\n   */\n  badiYear() {\n    return this._badiYear;\n  }\n\n  /**\n   * Get number of the Badí' weekday between 1 (Jalál ~> Saturday) and\n   * 7 (Istiqlál ~> Friday).\n   * @returns {int} number of Badí' weekday\n   */\n  badiWeekday() {\n    return (this._gregDate.isoWeekday() + 1) % 7 + 1;\n  }\n\n  /**\n   * Get number of the year in the Váḥid the current date is in.\n   * @returns {int} number of year in Váḥid (between 1 and 19)\n   */\n  yearInVahid() {\n    return (this._badiYear - 1) % 19 + 1;\n  }\n\n  /**\n   * Get number of the Váḥid (19 year period) the current date is in.\n   * @returns {int} number of Váḥid (between 1 and 19)\n   */\n  vahid() {\n    return (Math.floor((this._badiYear - 1) / 19) % 19) + 1;\n  }\n\n  /**\n   * Get number of the Kull-i-Shay' (361 year period) the current date is in.\n   * @returns {int} number of Kull-i-Shay' (1 for most supported dates)\n   */\n  kullIShay() {\n    return Math.floor((this._badiYear - 1) / 361) + 1;\n  }\n\n  /**\n   * Get the Gregorian date on whose sunset the Badí' date ends.\n   * @returns {moment} Gregorian date, with time set to 12:00:00\n   */\n  gregorianDate() {\n    return this._gregDate;\n  }\n\n  /**\n   * Get the length of Ayyám-i-Há for the year this date is in.\n   * @returns {int} Number of days of Ayyám-i-Há\n   */\n  ayyamiHaLength() {\n    return this._ayyamiHaLength;\n  }\n\n  /**\n   * Get the number (between 1 and 11) of the Holy Day.\n   * @returns {(int|false)} number of Holy Day or false if none.\n   */\n  holyDayNumber() {\n    return this._holyDay;\n  }\n}\n\n/**\n * Sets option (defaultLanguage) for the\n * module.\n * @param {object} options Options to be set.\n */\nconst badiDateOptions = function (options) {\n  if (typeof options.defaultLanguage === 'string') {\n    setDefaultLanguage(options.defaultLanguage);\n  }\n};\n\nexport {BadiDate, badiDateOptions};\n","/* eslint-disable max-len, complexity */\nconst clockLocations = {\n  Canada: [[[-63.29333, 60], [-138.9386, 60], [-139.1889, 60.08888], [-139.0681, 60.35222], [-139.6767, 60.34055], [-139.9794, 60.18777], [-140.45081, 60.30972], [-140.52139, 60.22221], [-140.9955, 60.30721], [-140.99686, 61.8948], [-141.00005, 65.84028], [-141.00206, 68.42821], [-141.00296, 69.58786], [-141.00477, 69.58884], [-140.99813, 70.12335], [-124.80692, 77.04204], [-117.95462, 78.95431], [-99.46935, 82.3539], [-75.0348, 84.79736], [-59.3117, 83.84122], [-60.98493, 82.07503], [-69.57686, 80.21588], [-71.1173, 79.6183], [-74.13178, 79.24647], [-73.93259, 78.5692], [-75.69878, 77.78571], [-77.43842, 77.49355], [-77.55793, 76.52414], [-78.54063, 76.17887], [-79.31085, 74.25332], [-75.79174, 73.25735], [-73.13581, 72.0489], [-69.1652, 71.09276], [-66.31007, 69.91087], [-66.05776, 68.70243], [-60.73262, 66.89639], [-62.3129, 65.07708], [-63.60102, 64.69197], [-64.19861, 60.84087], [-63.29333, 60.00012]]],\n  Finland: [[[31.5848296, 62.9070356], [31.4390606, 62.785375], [31.3454013, 62.64032620000001], [31.2218346, 62.49829550000001], [31.138311, 62.4420838], [30.720412, 62.20890580000002], [30.6564061, 62.2085877], [30.602068, 62.14134890000001], [30.4231749, 62.02237140000001], [30.3061104, 61.964546], [30.1556605, 61.8579888], [30.0752371, 61.8183646], [30.0387281, 61.76500110000001], [29.8185491, 61.6549278], [29.74029919999999, 61.5737044], [29.5030724, 61.461338900000015], [29.3304371, 61.3526198], [29.2330501, 61.268169], [29.0298879, 61.191815300000016], [28.9583837, 61.1514492], [28.818984, 61.1216471], [28.7136921, 61.0443349], [28.6578963, 60.95109439999999], [28.5246697, 60.9571371], [28.1354613, 60.7408695], [27.873414, 60.604559], [27.7736111, 60.53333330000002], [27.725, 60.3913889], [27.4550934, 60.223534], [27.2938862, 60.2003975], [26.8756332, 60.200342100000015], [26.6110136, 60.161753200000014], [26.2947105, 60.0465237], [26.0173046, 59.97679690000001], [25.1693516, 59.9434386], [24.2815873, 59.79155570000002], [23.4566746, 59.67247360000001], [22.9224144, 59.6384411], [22.6345729, 59.6079549], [22.3965563, 59.5130947], [21.4475658, 59.4772985], [20.7608658, 59.5324815], [20.3839584, 59.4576178], [20.2843364, 59.4660819], [19.083209799999988, 60.19169020000001], [19.2202109, 60.61151010000001], [20.0251664, 60.72755450000001], [20.7714495, 61.12690790000001], [20.903203, 61.6462488], [20.1658123, 63.1648577], [20.4010006, 63.3318822], [20.8175143, 63.5011379], [21.4628083, 63.6552312], [21.8845783, 63.70121190000001], [22.9611467, 64.2200974], [23.835799, 64.66547409999997], [24.1545056, 65.29247769999998], [24.131900100000014, 65.5153846], [24.1776819, 65.6603564], [24.1318042, 65.7716089], [24.152978, 65.862572], [24.0536762, 65.95152940000006], [24.0491701, 65.99502970000003], [23.9394784, 66.07568309999998], [23.9170552, 66.16186640000002], [23.7313763, 66.19408560000002], [23.6489848, 66.30377249999997], [23.6880374, 66.3815611], [23.650965700000015, 66.4557476], [23.8605347, 66.5595503], [23.86853209999999, 66.6568254], [23.9078441, 66.72140390000003], [23.880337, 66.76350940000003], [23.99566289999999, 66.822049], [23.8525565, 66.9573479], [23.677678, 67.0620298], [23.5545444, 67.16789390000002], [23.596079, 67.20820560000003], [23.5637833, 67.2606725], [23.7311639, 67.28763560000003], [23.7172209, 67.38530669999997], [23.7639366, 67.42772120000002], [23.408239899999984, 67.46939490000003], [23.4059159, 67.50091320000003], [23.5452477, 67.5838871], [23.492249099999984, 67.6652745], [23.47871239999999, 67.8419848], [23.5171915, 67.88433529999998], [23.6407972, 67.9151784], [23.6525654, 67.9589433], [23.3937061, 68.0452571], [23.3077618, 68.14837649999997], [23.1656349, 68.13315060000002], [23.152641, 68.2333806], [23.0702517, 68.29970360000003], [22.9181313, 68.3335115], [22.8028778, 68.39328420000002], [22.3437523, 68.45688960000003], [22.2960914, 68.4840408], [22.045040799999988, 68.479329], [21.8898693, 68.5844051], [21.7010887, 68.59686950000003], [21.6061629, 68.6678769], [21.4298688, 68.691352], [21.39042, 68.76478960000003], [20.9988391, 68.89612380000003], [20.8441913, 68.93656440000004], [20.9116456, 68.96882420000003], [20.775042799999987, 69.0326073], [20.5523258, 69.0600767], [20.7173208, 69.1197912], [21.057543, 69.03628970000003], [21.1086742, 69.1039291], [20.9875741, 69.19192740000003], [21.0961691, 69.260912], [21.2788202, 69.3118841], [21.6270859, 69.27658829999997], [22.1757622, 68.95632440000003], [22.1918678, 68.9187737], [22.3407806, 68.82722570000003], [22.3745217, 68.71666660000004], [22.5353893, 68.74451260000004], [22.800824, 68.68754809999997], [23.0459522, 68.6893436], [23.1675822, 68.6285189], [23.4406356, 68.6921635], [23.6735202, 68.70552140000002], [23.7753915, 68.81885129999998], [23.983330799999987, 68.82714340000003], [24.0755916, 68.7799668], [24.30226, 68.71735020000003], [24.6083879, 68.6819016], [24.9170187, 68.60529109999997], [25.1193208, 68.6428308], [25.1212144, 68.7458351], [25.1573697, 68.80006390000003], [25.2931271, 68.8600372], [25.47250939999999, 68.90329120000003], [25.6543285, 68.90577049999997], [25.745596499999987, 69.03984729999998], [25.742717799999987, 69.14430209999998], [25.6939225, 69.1957144], [25.7410164, 69.31839509999998], [25.8462009, 69.3929115], [25.8084981, 69.4259367], [25.8768225, 69.5261298], [25.9760403, 69.610225], [25.8925512, 69.66539549999997], [26.0071395, 69.7228555], [26.1255598, 69.7345401], [26.3835888, 69.8541585], [26.4653759, 69.93980490000003], [26.6834067, 69.96301920000003], [26.8407548, 69.9603025], [27.0316081, 69.9107924], [27.3049484, 69.95762760000004], [27.43070959999999, 70.0194461], [27.5206048, 70.02243659999996], [27.614207, 70.074151], [27.9593778, 70.0921111], [27.9842853, 70.0139707], [28.160713, 69.92099370000003], [28.3452694, 69.88083179999997], [28.4042254, 69.818425], [29.1339095, 69.69534039999996], [29.1705369, 69.6390414], [29.3364956, 69.47832269999998], [29.2193395, 69.39763620000002], [28.831539, 69.2243617], [28.80543, 69.1111558], [28.929451, 69.0519407], [28.4953735, 68.9300403], [28.468076, 68.8855137], [28.66118, 68.8864737], [28.8014499, 68.8693665], [28.7072131, 68.732555], [28.4341202, 68.53979460000002], [28.6478382, 68.19591340000002], [29.3271337, 68.0745162], [29.6593888, 67.80297219999996], [30.0173409, 67.67356889999996], [29.9305102, 67.5228214], [29.8567823, 67.48926540000004], [29.6361151, 67.332861], [29.522709499999987, 67.3099172], [29.48660609999999, 67.26011490000003], [29.0732544, 66.99615390000004], [29.0331239, 66.92547219999996], [29.0607529, 66.85269279999997], [29.3507185, 66.6439171], [29.4726751, 66.5434478], [29.6969469, 66.277347], [29.9239353, 66.1262486], [29.997268, 65.97889249999997], [30.0647878, 65.90105890000002], [30.138463, 65.66868749999998], [30.0170916, 65.6965272], [29.722432799999986, 65.637045], [29.8637508, 65.5604702], [29.7331208, 65.472637], [29.7467636, 65.347391], [29.6018471, 65.2599435], [29.893525, 65.19295509999998], [29.8193446, 65.1444587], [29.896916, 65.1051579], [29.7328054, 65.09129760000003], [29.6255535, 65.06020520000003], [29.5993537, 64.99509809999998], [29.6470353, 64.8674467], [29.739663, 64.7897553], [30.0430007, 64.7928625], [30.0416232, 64.74110840000003], [30.1365729, 64.6488835], [29.9894058, 64.58761530000002], [29.9869609, 64.5338998], [30.0583348, 64.4508749], [30.0448933, 64.4020122], [30.482439699999983, 64.2623385], [30.466399899999985, 64.2044319], [30.5534271, 64.1322443], [30.5280169, 64.0488769], [30.320039, 63.9082685], [30.260416, 63.82200320000001], [29.9718903, 63.7571676], [30.24571609999999, 63.60696830000001], [30.385620199999988, 63.54577980000001], [30.4841978, 63.4670887], [30.789711, 63.4050884], [30.9330443, 63.3559208], [30.9798739, 63.3078177], [31.1483116, 63.26151890000002], [31.2416464, 63.2166421], [31.2658547, 63.1154671], [31.46252279999998, 63.02421930000001], [31.5848296, 62.9070356]]],\n  // Greenland: [[[-57.44887, 82.28507], [-60.15022, 82.05782], [-61.87928, 81.82771], [-62.2191, 81.7294], [-63.42448, 81.28486], [-65.32658, 80.98138], [-66.57577, 80.83605], [-67.38791, 80.54753], [-67.66468, 80.1436], [-68.73755, 79.10919], [-72.47765, 78.62618], [-72.96065, 78.36972], [-73.1359, 78.13036], [-72.78968, 77.34387], [-73.38382, 76.66424], [-72.79822, 76.5702], [-69.80615, 76.29664], [-68.45971, 75.97179], [-66.32252, 75.80508], [-64.89914, 75.80081], [-63.13809, 76.04018], [-62.31741, 75.9034], [-60.47087, 75.78371], [-60.19731, 75.62983], [-58.94919, 75.49305], [-58.81241, 74.92883], [-58.38497, 74.89464], [-58.21399, 74.63817], [-57.47879, 74.17654], [-57.15394, 73.47554], [-55.83743, 71.40673], [-55.23901, 70.48346], [-55.10223, 69.40632], [-53.87121, 68.825], [-54.21316, 66.80748], [-53.75152, 65.52517], [-52.5034, 63.43926], [-47.39122, 59.6265], [-42.68939, 59.38714], [-41.16771, 61.50723], [-30.05428, 67.67946], [-26.83993, 68.124], [-21.04386, 70.27829], [-21.24903, 72.74034], [-16.78656, 74.91174], [-16.39331, 77.2541], [-17.64144, 78.51933], [-16.82075, 79.78455], [-11.02468, 81.34043], [-11.93085, 82.02433], [-19.48798, 82.45177], [-19.71024, 83.01599], [-27.19898, 83.85377], [-39.64602, 83.80248], [-50.82784, 82.9476], [-57.44887, 82.28507]]],\n  Iceland: [[[-25.0, 63.0], [-12.8, 63.0], [-12.8, 66.8], [-25.0, 66.8]]],\n  Norway: [[[30.79367, 69.78758], [30.89032, 69.73729], [30.95448, 69.63243], [30.93257, 69.55989], [30.81756, 69.52877], [30.51593, 69.54042], [30.41768, 69.58992], [30.23373, 69.65016], [30.13777, 69.64353], [30.18838, 69.56846], [30.12305, 69.51749], [30.11721, 69.46989], [30.00876, 69.41591], [29.85802, 69.42374], [29.7244, 69.38965], [29.56938, 69.31756], [29.39594, 69.32384], [29.28845, 69.29618], [29.31313, 69.23752], [29.24224, 69.11306], [29.05666, 69.01528], [28.85456, 69.07664], [28.80541, 69.11116], [28.83152, 69.22436], [29.21932, 69.39764], [29.33647, 69.47832], [29.17052, 69.63904], [29.13389, 69.69534], [28.40421, 69.81842], [28.33046, 69.84919], [28.34506, 69.8808], [28.1607, 69.92099], [27.98428, 70.01397], [27.94828, 70.09187], [27.79768, 70.07731], [27.61245, 70.07456], [27.52598, 70.02346], [27.42855, 70.01921], [27.27471, 69.97591], [27.29177, 69.95225], [27.03749, 69.91039], [26.89776, 69.93245], [26.85129, 69.96013], [26.71807, 69.94499], [26.67869, 69.96477], [26.46435, 69.93939], [26.38594, 69.85535], [26.24129, 69.81453], [26.13562, 69.73861], [26.01418, 69.72334], [25.89149, 69.6655], [25.97672, 69.61067], [25.93749, 69.57253], [25.83994, 69.54298], [25.87704, 69.5222], [25.80934, 69.42639], [25.8461, 69.39325], [25.75938, 69.34038], [25.74753, 69.28679], [25.70204, 69.25366], [25.69302, 69.19674], [25.74351, 69.13879], [25.72429, 69.0796], [25.77744, 69.01828], [25.71241, 68.98063], [25.65423, 68.90587], [25.60033, 68.88487], [25.48119, 68.90507], [25.2677, 68.85099], [25.15713, 68.79989], [25.11152, 68.70252], [25.11924, 68.6428], [24.91692, 68.60525], [24.85717, 68.56221], [24.78342, 68.63623], [24.60839, 68.6819], [24.30226, 68.71735], [24.07559, 68.77997], [23.98333, 68.82714], [23.87146, 68.83652], [23.77539, 68.81885], [23.73106, 68.75075], [23.67352, 68.70552], [23.44064, 68.69216], [23.16758, 68.62852], [23.04595, 68.68934], [22.80082, 68.68755], [22.53539, 68.74451], [22.37452, 68.71667], [22.34078, 68.82723], [22.19187, 68.91877], [22.17576, 68.95632], [21.98361, 69.07289], [21.8464, 69.14416], [21.62709, 69.27659], [21.27882, 69.31188], [21.09617, 69.26091], [21.00331, 69.22234], [20.98758, 69.19193], [21.05563, 69.12209], [21.10868, 69.10393], [21.05754, 69.03629], [20.71732, 69.11979], [20.55233, 69.06008], [20.06005, 69.04576], [20.30659, 68.92618], [20.33587, 68.80231], [20.20284, 68.66592], [20.05225, 68.59107], [19.9375, 68.55794], [20.02589, 68.53081], [20.22654, 68.49081], [19.97796, 68.38816], [19.9214, 68.35601], [18.9838, 68.51696], [18.62122, 68.50696], [18.40569, 68.58188], [18.12592, 68.53652], [18.10109, 68.40605], [18.15135, 68.19879], [17.89976, 67.96937], [17.66475, 68.03838], [17.28152, 68.11881], [17.18051, 68.05046], [16.73812, 67.91421], [16.55628, 67.64719], [16.40757, 67.53403], [16.158, 67.51916], [16.08983, 67.43528], [16.4041, 67.20497], [16.38776, 67.04546], [16.19402, 66.98259], [16.03876, 66.91245], [15.99364, 66.87323], [15.62137, 66.59434], [15.37723, 66.4843], [15.48473, 66.28246], [15.03568, 66.15356], [14.51629, 66.13258], [14.58441, 65.90134], [14.62548, 65.81181], [14.54147, 65.70075], [14.49877, 65.5213], [14.50683, 65.30973], [14.3788, 65.24762], [14.32598, 65.11892], [14.12989, 64.97856], [13.70547, 64.63996], [13.65426, 64.58034], [13.89118, 64.50713], [14.08523, 64.47825], [14.11387, 64.46248], [14.15711, 64.19505], [13.96752, 64.00797], [13.7154, 64.04629], [13.21111, 64.09537], [12.92672, 64.05795], [12.68356, 63.97422], [12.48023, 63.81876], [12.33057, 63.71507], [12.29946, 63.67198], [12.14977, 63.59395], [12.21288, 63.47859], [12.08407, 63.35558], [11.97458, 63.26923], [12.21823, 63.00033], [12.07469, 62.90254], [12.13638, 62.74792], [12.05614, 62.61192], [12.29937, 62.26749], [12.13766, 61.72382], [12.41961, 61.56298], [12.56932, 61.56875], [12.87085, 61.3565], [12.83383, 61.25846], [12.79035, 61.19705], [12.70703, 61.14327], [12.68258, 61.06122], [12.61251, 61.04683], [12.44761, 61.05073], [12.22399, 61.01308], [12.33279, 60.89017], [12.33448, 60.85236], [12.39537, 60.73389], [12.51102, 60.64246], [12.51578, 60.60015], [12.60688, 60.51274], [12.60605, 60.40593], [12.49879, 60.32365], [12.54191, 60.19338], [12.50064, 60.09908], [12.44856, 60.03917], [12.34114, 59.96567], [12.23104, 59.92759], [12.17429, 59.88981], [12.05346, 59.88594], [11.98518, 59.90072], [11.84045, 59.84174], [11.92597, 59.794], [11.93988, 59.69458], [11.88922, 59.69321], [11.85571, 59.64829], [11.72056, 59.62549], [11.69113, 59.58955], [11.75993, 59.45818], [11.77987, 59.38646], [11.81625, 59.34474], [11.82979, 59.24223], [11.78393, 59.20838], [11.77539, 59.08659], [11.71051, 59.03368], [11.68908, 58.95685], [11.59063, 58.89072], [11.45623, 58.89021], [11.45853, 58.99597], [11.34184, 59.12041], [11.20498, 59.08311], [11.17718, 59.09736], [11.1, 59], [11.0203, 58.97], [9.67858, 58.87844], [8.51901, 58.15871], [7.92368, 57.95878], [6.62638, 57.9188], [5.34686, 58.63409], [4.70265, 59.35382], [4.57381, 61.1576], [4.78262, 62.0506], [5.46681, 62.55263], [6.79965, 62.99691], [8.29243, 63.77884], [9.92293, 64.11205], [10.71819, 65.0095], [11.4246, 65.12057], [11.79779, 65.84919], [11.95329, 67.64852], [13.20171, 68.29717], [14.5701, 68.89694], [16.08064, 69.41675], [17.91552, 69.8166], [19.1906, 70.36306], [19.81259, 70.33196], [20.19467, 70.19424], [21.78519, 70.50523], [21.89626, 70.73182], [23.70892, 70.96284], [23.91773, 71.1139], [24.46864, 71.07391], [24.71744, 71.21608], [25.89478, 71.26051], [26.77445, 71.08724], [27.79185, 71.22052], [28.65819, 71.06503], [30.03102, 70.78069], [31.23946, 70.43859], [31.19482, 70.34084], [30.79367, 69.78758]], [[4.2, 80.84], [-11.5, 70.1], [19.2, 73.5], [39.2, 81.4]]],\n  Sweden: [[[15.4538561, 66.34534869999999], [15.3772302, 66.4843117], [15.625833, 66.605833], [15.80794, 66.735271], [16.0387632, 66.9124213], [16.195223, 66.982232], [16.3877, 67.0455], [16.4040109, 67.2049795], [16.09015, 67.435232], [16.1566, 67.519458], [16.407797, 67.533978], [16.555733, 67.647289], [16.7381292, 67.91418620000002], [17.180003, 68.050508], [17.2818957, 68.1188101], [17.6648128, 68.0384733], [17.8998048, 67.9693359], [18.1514126, 68.198755], [18.1010915, 68.406043], [18.1258499, 68.5364954], [18.4056102, 68.5818554], [18.6211478, 68.5069382], [18.9836971, 68.5169473], [19.921397, 68.3560137], [19.9778586, 68.3881535], [20.2264196, 68.4908071], [19.9375039, 68.5579418], [20.0521233, 68.5910515], [20.2027029, 68.6659076], [20.3358646, 68.8023404], [20.3064282, 68.9261735], [20.0600472, 69.0457578], [20.5486422, 69.05996990000001], [20.7750428, 69.0326073], [20.9137291, 68.9603927], [20.8441913, 68.93656440000002], [20.9156942, 68.8971424], [20.9967921, 68.896741], [21.2340165, 68.8140862], [21.3194271, 68.7592708], [21.3893348, 68.76495460000002], [21.4298688, 68.691352], [21.5651505, 68.6752534], [21.7013706, 68.6305605], [21.7016655, 68.5963461], [21.8898693, 68.5844051], [21.9919125, 68.5339794], [22.0182391, 68.495951], [22.1528153, 68.4701805], [22.2945732, 68.4838241], [22.4661749, 68.4413001], [22.6482126, 68.41604160000001], [22.7362404, 68.3852018], [22.8041064, 68.39294], [22.9181313, 68.3335115], [23.0702517, 68.29970360000002], [23.1528179, 68.2310713], [23.1415318, 68.1543005], [23.2783645, 68.15733889999998], [23.3216014, 68.1347101], [23.3966203, 68.044179], [23.5310194, 68.0067455], [23.6632301, 67.94218640000001], [23.6407972, 67.9151784], [23.5098377, 67.87994509999999], [23.4739757, 67.81714420000002], [23.4946531, 67.7903019], [23.493057, 67.6641861], [23.5588847, 67.6192741], [23.5450496, 67.5829545], [23.4081036, 67.50173829999999], [23.4104738, 67.46759370000002], [23.5365192, 67.4599963], [23.7632859, 67.4262029], [23.7179667, 67.384843], [23.7750768, 67.3393805], [23.7311639, 67.28763560000002], [23.5834506, 67.269308], [23.5535126, 67.2468025], [23.5958386, 67.2071971], [23.5569385, 67.16578719999998], [23.6536532, 67.1042345], [23.6739708, 67.0650834], [23.8564714, 66.9558968], [23.8640579, 66.9221303], [23.9330592, 66.8845665], [23.9945079, 66.82348849999998], [23.9782068, 66.78409040000001], [23.8797209, 66.7620511], [23.9078441, 66.72140390000001], [23.8685321, 66.6568254], [23.8846737, 66.61277119999998], [23.8605347, 66.5595503], [23.7853219, 66.5333886], [23.6509657, 66.4557476], [23.6880374, 66.3815611], [23.6489848, 66.3037725], [23.7263744, 66.1968556], [23.9159179, 66.1621612], [23.936749, 66.0794759], [24.0374327, 66.0090364], [24.0421963, 65.9633925], [24.152978, 65.862572], [24.1318042, 65.7716089], [24.1721721, 65.72528229999999], [24.1776819, 65.6603564], [24.1319001, 65.5153846], [24.1444599, 65.3956667], [23.1299456, 65.2854532], [21.8250561, 64.8363612], [22.0872366, 64.43431070000001], [21.5096176, 64.04121570000002], [21.4570471, 63.7528427], [20.20662871333013, 63.274568586669865], [19.4322896, 63.0737152], [18.2961641, 62.4173632], [17.7755886, 61.1718712], [17.8981165, 60.9377595], [17.7095869, 60.7102649], [17.3865202, 60.6893467], [17.3489744, 60.5862714], [17.3024177, 60.508762], [17.29774, 60.4647038], [17.2565412, 60.4243351], [17.1955585, 60.4105852], [17.1986283, 60.3077815], [17.0585097, 60.2727725], [16.908878, 60.281498], [16.9048859, 60.2394077], [16.7046001, 60.1950497], [16.6294785, 60.2384924], [16.6154023, 60.2786235], [16.5166127, 60.3554293], [16.3927146, 60.3794045], [16.2589904, 60.4931441], [16.1947891, 60.5354328], [16.13651, 60.6103267], [16.2382972, 60.6230491], [16.3769218, 60.7434488], [16.386117, 60.7868], [16.2552139, 60.8636119], [16.1310092, 60.9920575], [15.9216155, 61.00763], [15.7619207, 61.0496869], [15.6803816, 61.11321], [15.6573361, 61.2154788], [15.4760187, 61.3149858], [15.3370007, 61.4016369], [15.20475, 61.503826], [15.1531933, 61.5956892], [14.8564014, 61.7835491], [14.7971, 61.798451], [14.6666465, 61.8918775], [14.5296202, 61.783626], [14.4997464, 61.62599], [14.3947754, 61.5637652], [14.3364964, 61.59913920000001], [14.1822587, 61.6175455], [13.9769516, 61.6213397], [13.8902353, 61.6525473], [13.6131488, 61.6726273], [13.564749, 61.656455], [13.5066718, 61.6929666], [13.5145384, 61.7377738], [13.4160916, 61.8280592], [13.2092287, 61.9365972], [13.0799221, 62.0376119], [13.0423631, 62.0182008], [12.9513736, 62.1334555], [12.9026405, 62.1418727], [12.8059683, 62.2205277], [12.6078489, 62.214806], [12.299389, 62.2659814], [12.056144, 62.6119191], [12.1363845, 62.7479169], [12.074689, 62.9025463], [12.218233, 63.0003345], [11.9745822, 63.2692252], [12.0840901, 63.3555796], [12.2128783, 63.4785906], [12.1497625, 63.593946], [12.2975812, 63.6732169], [12.3399662, 63.7269855], [12.4797773, 63.8196667], [12.6860556, 63.9738931], [12.9268369, 64.05783829999999], [13.2109436, 64.0951725], [13.7151219, 64.045304], [13.981667, 64.013056], [14.1579301, 64.1860759], [14.120556, 64.452778], [14.086006, 64.47814109999999], [13.8924406, 64.507004], [13.6540802, 64.579929], [13.7050997, 64.6396655], [14.1081927, 64.96225790000001], [14.3257603, 65.1190618], [14.3790211, 65.24804960000002], [14.5056577, 65.3099238], [14.4967711, 65.5174317], [14.5295213, 65.682227], [14.6240045, 65.81419090000001], [14.584253, 65.9013501], [14.5162846, 66.132567], [15.035653, 66.1535649], [15.4847146, 66.282458], [15.4538561, 66.34534869999999]]],\n  USA: [[[-130.01989, 55.9153], [-130.17038, 55.77749], [-130.13861, 55.55335], [-129.99201, 55.28955], [-130.25933, 54.99635], [-130.66666, 54.71444], [-131.17048, 54.72103], [-132.10046, 54.6269], [-132.86477, 54.63066], [-133.60649, 54.72479], [-134.93933, 56.02375], [-136.80681, 57.75192], [-137.09296, 58.25079], [-139.07716, 59.1017], [-141.32115, 59.76436], [-143.47102, 59.81707], [-146.37014, 59.17701], [-149.21654, 59.54598], [-152.0253, 57.0535], [-155.80544, 55.02035], [-159.93198, 54.32757], [-173.1399, 51.33056], [-179.49537, 50.84863], [-179.28453, 52.29443], [-171.78447, 63.95114], [-169.94709, 63.91437], [-169.09903, 65.86662], [-168.1474, 65.7885], [-164.9772, 66.85025], [-167.15342, 68.37135], [-166.29498, 69.12437], [-161.71663, 70.74335], [-156.23466, 71.55661], [-143.75716, 70.6304], [-141.58847, 70.26895], [-141.56335, 69.73575], [-141.39798, 69.64277], [-141.00304, 69.64616], [-141.00189, 60.6745], [-141.00157, 60.30507], [-140.52034, 60.21906], [-140.44797, 60.30796], [-139.97408, 60.18451], [-139.68007, 60.33572], [-139.05208, 60.35373], [-139.17702, 60.08286], [-138.70578, 59.90624], [-138.60921, 59.76], [-137.60744, 59.24348], [-137.45151, 58.90854], [-136.82468, 59.1598], [-136.58199, 59.16554], [-136.19525, 59.63881], [-135.9476, 59.66343], [-135.47958, 59.7981], [-135.02888, 59.56364], [-135.10063, 59.42776], [-134.95978, 59.28104], [-134.7007, 59.2489], [-134.48273, 59.13097], [-134.258, 58.86087], [-133.84105, 58.72985], [-133.37997, 58.43181], [-133.45987, 58.38848], [-133.17195, 58.15383], [-132.55389, 57.4967], [-132.2478, 57.21112], [-132.36871, 57.09167], [-132.0448, 57.0451], [-132.12311, 56.8739], [-131.87311, 56.80627], [-131.83539, 56.59912], [-131.5813, 56.6123], [-131.08698, 56.40613], [-130.7818, 56.36713], [-130.4682, 56.24329], [-130.42548, 56.14172], [-130.10541, 56.12268], [-130.01989, 55.9153]], [[179.9, 52.2], [172.0, 53.3], [172.0, 52.4], [179.9, 51.0]]]\n};\n/* eslint-enable max-len */\n\nlet usingClockLocations = true;\n\n/**\n * Toggle the use of clock locations on or off\n * @param {bool} useCL whether clock locations should be used.\n */\nconst useClockLocations = function (useCL) {\n  usingClockLocations = useCL;\n};\n\n/**\n * Determine whether a point lies within a polygon.\n * All coordinates are given as [longitude, latitude].\n * @param {array} coords Coordinates of the point\n * @param {array} polygon given by an array of pairs of x and y coordinates\n * @returns {bool} whether the point given by coords is inside the polygon\n */\nconst inPolygon = function (coords, polygon) {\n  const x = coords[0];\n  const y = coords[1];\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; i++) {\n    const xi = polygon[i][0];\n    const yi = polygon[i][1];\n    const xj = polygon[j][0];\n    const yj = polygon[j][1];\n    // Check that a) the segment crosses the y coordinate of the point\n    //            b) at least one of the two vertices is left of the point\n    //            c) at the y coordinate of the point, the segment is left of it\n    if ((((yi < y) !== (yj < y)) && (xi <= x || xj <= x)) &&\n        ((xi + (y - yi) * (xj - xi) / (yj - yi)) < x)) {\n      inside = !inside;\n    }\n    j = i;\n  }\n  return inside;\n};\n\n/**\n * Determine whether coordinates are within a region where fixed times are used\n * as \"sunrise\" and \"sunset\" using polygons. The name of a country being\n * returned doesn't just mean that the coordinates are within that country, but\n * that they are within the region of that country where such a rule applies.\n * @param {number} latitude of the point to be checked\n * @param {number} longitude of the point to be checked\n * @returns {(string|false)} the appropriate region or false\n */\nconst clockLocationFromPolygons = function (latitude, longitude) {\n  if (!usingClockLocations) {\n    return false;\n  }\n  // First exclude as large an area as possible from having to check polygons\n  if (latitude < 51.0) {\n    return false;\n  }\n  if (latitude < 57.0 && longitude > -129.0 && longitude < 172.0) {\n    return false;\n  }\n  // Make a list of plausible areas based on longitude, then only check those\n  const countries = [];\n  const labels = [];\n  if (longitude < -129.9 || longitude > 172.4) {\n    countries.push(clockLocations.USA);\n    labels.push('USA');\n  }\n  if (longitude > -141.1 && longitude < -61.1) {\n    countries.push(clockLocations.Canada);\n    labels.push('Canada');\n  }\n  // Greenland doesn't currently have a rule for this\n  // if (longitude > -73.1 && longitude < -11.3) {\n  //   countries.push(clockLocations.Greenland);\n  //   labels.push('Greenland');\n  // }\n  if (longitude > -25.0 && longitude < -12.8) {\n    countries.push(clockLocations.Iceland);\n    labels.push('Iceland');\n  }\n  if (longitude > -9.2 && longitude < 33.6) {\n    countries.push(clockLocations.Norway);\n    labels.push('Norway');\n  }\n  if (longitude > 10.9 && longitude < 24.2) {\n    countries.push(clockLocations.Sweden);\n    labels.push('Sweden');\n  }\n  if (longitude > 19.1 && longitude < 31.6) {\n    countries.push(clockLocations.Finland);\n    labels.push('Finland');\n  }\n  // Russia currently doesn't have a rule for this\n  // if (longitude > 27.3 || longitude < -169.6) {\n  //  countries.push(clockLocations.Russia);\n  //  labels.push('Russia');\n  // }\n  for (let i = 0; i < countries.length; i++) {\n    for (let j = 0; j < countries[i].length; j++) {\n      if (inPolygon([longitude, latitude], countries[i][j])) {\n        return labels[i];\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * NOTE: This function is currently completely untested. Extensive testing\n * would require a large contingent of Google API requests.\n *\n * Determine whether coordinates are within a region where fixed times are used\n * as \"sunrise\" and \"sunset\" using google reverse geocoding\n * @param {json} revGCJson json result from reverse geocoding query of coords\n * @param {number} latitude of the point to be checked\n * @returns {(string|false)} the appropriate region or false\n */\nconst clockLocationFromReverseGeocode = function (revGCJson, latitude) {\n  if (!usingClockLocations) {\n    return false;\n  }\n  if (revGCJson.status !== 'OK') {\n    return false;\n  }\n  let country = '';\n  let adminLevel1 = '';\n  const addressComps = revGCJson.results[0].address_components;\n  for (let i = 0; i < addressComps.length; i++) {\n    if (addressComps[i].types[0] === 'country') {\n      country = addressComps[i].long_name;\n    } else if (addressComps[i].types[0] === 'administrative_area_level_1') {\n      adminLevel1 = addressComps[i].long_name;\n    }\n  }\n  if (country === '') {\n    return false;\n  } else if (country === 'United States') {\n    if (adminLevel1 === 'Alaska') {\n      return 'USA';\n    }\n  } else if (country === 'Canada') {\n    if (latitude >= 60) {\n      return 'Canada';\n    }\n  } else if (country === 'Iceland' || country === 'Norway' ||\n             country === 'Finland') {\n    return country;\n  } else if (country === 'Sweden') {\n    const counties = ['Norrbottens län', 'Västerbottens län', 'Jämtlands län',\n      'Västernorrlands län', 'Gävleborgs län'];\n    for (let i = 0; i < counties.length; i++) {\n      if (counties[i] === adminLevel1) {\n        return 'Sweden';\n      }\n    }\n  }\n  return false;\n};\n\nexport {clockLocationFromPolygons, clockLocationFromReverseGeocode,\n  useClockLocations};\n","import * as MeeusSunMoon from '../node_modules/meeussunmoon/src/index.js';\nimport {BadiDate,\n  badiDateOptions as defaultLanguageOption} from './badiDate.js';\nimport {clockLocationFromPolygons,\n  useClockLocations} from './clockLocations.js';\n\n/* eslint-disable complexity */\n\n/**\n * Wrapper class for Badí' date which takes care of all the location dependent\n * things: times for start, end, sunrise, and solar noon of the date as well as\n * the times for Holy Day commemorations.\n */\nclass LocalBadiDate {\n  /**\n   * Creates a Badí' date with location dependent information.\n   * @param {(Date|moment|string|Array)} date input date, same formats as for\n   *   badiDate are accepted. For a moment object, the time (before or after\n   *   sunset) is taken into consideration, otherwise only the date.\n   * @param {number} latitude of target location\n   * @param {number} longitude of target location\n   * @param {string} timezoneId as per IANA time zone database\n   */\n  constructor(date, latitude, longitude, timezoneId) {\n    // If a moment object is being passed, we use date and time, not just the\n    // date. For a JS Date object, we can't assume it's in the correct timezone,\n    // so in that case we use the date information only.\n    if (date instanceof moment) {\n      const sunset = MeeusSunMoon.sunset(date, latitude, longitude);\n      if (date.isAfter(sunset)) {\n        date.add(1, 'day');\n      }\n    }\n    this.badiDate = new BadiDate(date);\n    const gregDate = moment.tz(\n      this.badiDate.gregorianDate().format('YYYY-MM-DDTHH:mm:ss'), timezoneId);\n    const clockLocation = clockLocationFromPolygons(latitude, longitude);\n    if (!clockLocation ||\n        (clockLocation === 'Finland' && this.badiDate.badiMonth() === 19)) {\n      this.end = MeeusSunMoon.sunset(gregDate, latitude, longitude);\n      this.solarNoon = MeeusSunMoon.solarNoon(gregDate, longitude);\n      this.sunrise = MeeusSunMoon.sunrise(gregDate, latitude, longitude);\n      this.start = MeeusSunMoon.sunset(\n        gregDate.subtract(1, 'day'), latitude, longitude);\n      // add() and subtract() mutate the object, so we have to undo it\n      gregDate.add(1, 'day');\n    } else {\n      // First we set times to 18:00, 06:00, 12:00, 18:00, modifications are\n      // then made depending on the region.\n      this.end = moment.tz(\n        gregDate.format('YYYY-MM-DDT') + '18:00:00', timezoneId);\n      this.solarNoon = moment.tz(\n        gregDate.format('YYYY-MM-DDT') + '12:00:00', timezoneId);\n      this.sunrise = moment.tz(\n        gregDate.format('YYYY-MM-DDT') + '06:00:00', timezoneId);\n      this.start = moment.tz(gregDate.subtract(\n        1, 'day').format('YYYY-MM-DDT') + '18:00:00', timezoneId);\n      // add() and subtract() mutate the object, so we have to undo it\n      gregDate.add(1, 'day');\n      if (clockLocation === 'Canada') {\n        this.sunrise.add(30, 'minutes');\n      } else if (clockLocation === 'Iceland') {\n        this.solarNoon.add(1, 'hour');\n      } else if (clockLocation === 'Finland' || clockLocation === 'USA') {\n        if (this.end.isDST()) {\n          this.end.add(1, 'hour');\n          this.solarNoon.add(1, 'hour');\n          this.sunrise.add(1, 'hour');\n        }\n        if (this.start.isDST()) {\n          this.start.add(1, 'hour');\n        }\n      }\n    }\n    this.holyDayCommemoration = false;\n    switch (this.badiDate.holyDayNumber()) {\n      case 2:\n        // First Day of Ridvan: 15:00 local standard time\n        this.holyDayCommemoration = gregDate;\n        this.holyDayCommemoration.hour(gregDate.isDST() ? 16 : 15);\n        break;\n      case 5:\n        // Declaration of the Báb: 2 hours 11 minutes after sunset\n        this.holyDayCommemoration = moment.tz(this.start, timezoneId);\n        this.holyDayCommemoration.add(131, 'minutes');\n        break;\n      case 6:\n        // Ascension of Bahá'u'lláh: 03:00 local standard time\n        this.holyDayCommemoration = gregDate;\n        this.holyDayCommemoration.hour(gregDate.isDST() ? 4 : 3);\n        break;\n      case 7:\n        // Martyrdom of the Báb: solar noon\n        this.holyDayCommemoration = this.solarNoon;\n        break;\n      case 11:\n        // Ascension of 'Abdu'l-Bahá: 01:00 local standard time\n        this.holyDayCommemoration = gregDate;\n        this.holyDayCommemoration.hour(gregDate.isDST() ? 2 : 1);\n        break;\n      // skip default\n    }\n  }\n}\n\n/**\n * Sets options (defaultLanguage, useClockLocations) for the\n * module.\n * @param {object} options Options to be set.\n */\nconst badiDateOptions = function (options) {\n  if (typeof options.defaultLanguage === 'string') {\n    defaultLanguageOption({defaultLanguage: options.defaultLanguage});\n  }\n  if (typeof options.useClockLocations === 'boolean') {\n    useClockLocations(options.useClockLocations);\n  }\n};\n\nMeeusSunMoon.options({returnTimeForPNMS: true, roundToNearestMinute: true});\n\nexport {BadiDate, LocalBadiDate, badiDateOptions};\n"],"names":["deg2rad","deg","rad2deg","rad","sind","Math","sin","cosd","cos","reduceAngle","angle","floor","polynomial","variable","coeffs","varPower","sum","numCoeffs","length","i","interpolateFromThree","y1","y2","y3","n","normalize","a","b","datetimeToJD","datetime","Y","year","M","month","D","date","hour","minute","second","A","gregorianCutoff","moment","B","isAfter","JDToDatetime","JD","Z","F","alpha","C","E","fracDay","day","hours","minutes","seconds","tz","JDToT","datetimeToT","DeltaT","u","t","y","approxK","kToT","k","truePhase","phase","T","timeConversions.kToT","eccentricityCorrection","JDE","meanPhase","sunMeanAnomaly","MPrime","moonMeanAnomaly","moonArgumentOfLatitude","Omega","moonAscendingNodeLongitude","planetaryArguments","DeltaJDE","newMoonFullMoonCorrections","quarterCorrections","commonCorrections","auxMath.sind","W","auxMath.cosd","sunMeanLongitude","meanObliquityOfEcliptic","moonMeanElongation","nutations","sunTransit","L","timezone","transit","timeConversions.DeltaT","timeConversions.datetimeToT","Theta0","apparentSiderealTimeGreenwhich","m","sunApparentRightAscension","normalizeM","utcOffset","sunTransitCorrection","add","roundToNearestMinute","sunRiseSet","phi","flag","suntime","TD","delta","sunApparentDeclination","H0","approxLocalHourAngle","m0","counter","DeltaM","abs","sunRiseSetCorrection","subtract","returnPNMS","returnDate","returnTimeForPNMS","isDST","cosH0","auxMath.rad2deg","acos","localM","theta0","interpolatedRa","localHourAngle","interpolatedDec","H","altitude","auxMath.reduceAngle","asin","alpha1","alpha2","alpha3","auxMath.interpolateFromThree","delta1","delta2","delta3","epsilon","trueObliquityOfEcliptic","lambda","sunApparentLongitude","atan2","meanSiderealTimeGreenwhich","theta","nutationInLongitude","nutationInObliquity","auxMath.polynomial","constants.meanObliquityOfEcliptic","Sol","sunTrueLongitude","sunEquationOfCenter","sineArg","DeltaPsi","constants.nutations","cosArg","DeltaEpsilon","constants.moonArgumentOfLatitude","constants.moonAscendingNodeLongitude","constants.moonMeanAnomaly","constants.moonMeanElongation","constants.sunMeanAnomaly","L0","constants.sunMeanLongitude","dateFormatKeys","**","--","options","formatCI","formatString","customKey","creationData","input","slice","datestring","format","sunrise","sunTimes.sunRiseSet","err","sunTimes.returnPNMS","sunset","solarNoon","sunTimes.sunTransit","yearMoonPhases","yearBegin","yearEnd","phaseTimes","moonDatetime","moonPhases.truePhase","timeConversions.JDToDatetime","isBefore","push","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","monthL","holyDay","weekday","weekdayAbbr3","weekdayAbbr2","weekdayL","yearInVahid","BE","badiCalendar","badiLocale","en","setDefaultLanguage","language","console","log","badiYears","BadiDate","[object Object]","this","_gregDate","_badiYear","_badiMonth","_badiDate","_nawRuz","_ayyamiHaLength","_yearTB","_holyDay","_valid","Date","gregDate","utc","getFullYear","getMonth","getDate","dateArray","_parseBadiDateString","_setFromBadiDate","tempDate","_notInValidGregRange","_setInvalid","constructor","Array","_setFromGregorianDate","_setHolyDay","isValid","formatTokens","returnString","charAt","j","next1","next2","next3","indexOf","_getFormatItem","token","String","_badiDay","_formatItemFallback","substring","replace","isoWeekday","languageCode","split","category","index","_languageFallback","dateString","dateComponents","test","parseInt","gregYear","toString","_setOldAyyamiHaLength","_setBadiYearInfo","_setBadiMonthDay","dayOfBadiYear","_dayOfYear","dayOfGregYear","diff","dayOfYear","isLeapYear","fromGregDate","yearData","_extractBadiYearInfo","NR","aHL","TB","components","TB1","TB2","numDays","badiDateOptions","defaultLanguage","clockLocations","Canada","Finland","Iceland","Norway","Sweden","USA","usingClockLocations","useClockLocations","useCL","inPolygon","coords","polygon","x","inside","xi","yi","xj","yj","clockLocationFromPolygons","latitude","longitude","countries","labels","LocalBadiDate","timezoneId","MeeusSunMoon","badiDate","gregorianDate","clockLocation","badiMonth","end","start","holyDayCommemoration","holyDayNumber","defaultLanguageOption"],"mappings":"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,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,UAAW,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,mBAAoB,oBAAqB,WAAY,aAAc,SAAU,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,kBAAmB,oBAAqB,WAAY,oBAAqB,mBAAoB,oBAAqB,mBAAoB,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,YAAa,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,oBAAqB,kBAAmB,aAAc,WAAY,oBAAqB,UAAW,YAAa,WAAY,aAAc,WAAY,aAAc,UAAW,oBAAqB,WAAY,oBAAqB,WAAY,YAAa,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,UAAW,aAAc,SAAU,aAAc,UAAW,aAAc,WAAY,aAAc,UAAW,aAAc,SAAU,aAAc,WAAY,aAAc,WAAY,YAAa,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,YAAa,mBAAoB,aAAc,kBAAmB,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,YAAa,WAAY,aAAc,UAAW,oBAAqB,WAAY,oBAAqB,UAAW,oBAAqB,WAAY,aAAc,mBAAoB,YAAa,WAAY,aAAc,WAAY,YAAa,WAAY,YAAa,WAAY,aAAc,UAAW,oBAAqB,WAAY,aAAc,UAAW,aAAc,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,oBAAqB,WAAY,aAAc,UAAW,aAAc,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,oBAAqB,WAAY,aAAc,WAAY,aAAc,WAAY,aAAc,mBAAoB,aAAc,mBAAoB,aAAc,WAAY,aAAc,WAAY,aAAc,UAAW,aAAc,UAAW,oBAAqB,WAAY,aAAc,kBAAmB,oBAAqB,mBAAoB,oBAAqB,WAAY,aAAc,UAAW,aAA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"}